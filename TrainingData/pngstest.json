{
  "gpc_preq": {
    "void": 1, 
    "params": 3, 
    "return;": 1, 
    ".*\\-": 17, 
    "if (.*)": 4, 
    "return": 0
  }, 
  "closestinteger": {
    "double": 1, 
    "label": "close", 
    "params": 1, 
    "return": 1
  }, 
  "gpc_A": {
    "void": 1, 
    "params": 3, 
    "return;": 1, 
    ".*\\-": 4, 
    "return": 0
  }, 
  "gpc_g16q": {
    "void": 1, 
    "params": 3, 
    "return;": 1, 
    ".*\\-": 5, 
    "return": 0
  }, 
  "gp_bgr8": {
    "void": 1, 
    "params": 2, 
    "return;": 1, 
    ".*\\-": 4, 
    "return": 0, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "linear_from_sRGB": {
    "if (.* < \\d*)": 1, 
    "if (.* < .*)": 1, 
    "double": 1, 
    "params": 1, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "main": {
    "char**": 1, 
    "if (.* != 0)": 6, 
    "if (.* < \\d*)": 11, 
    "fprintf(.*)": 8, 
    "string": [
      "/* contrib/libtests/pngstest-errors.h\\n", 
      " * BUILT USING: libpng version 1.6.39.git\\n", 
      " * This code is released under the libpng license.\\n", 
      " * For conditions of distribution and use, see the disclaimer\\n", 
      " * and license in png.h\\n", 
      " * THIS IS A MACHINE GENERATED FILE: do not edit it directly!\\n", 
      " * Instead run:\\n", 
      " *    pngstest --accumulate\\n", 
      " * on as many PNG files as possible; at least PNGSuite and\\n", 
      " * contrib/libtests/testpngs.\\n", 
      "static png_uint_16 gpc_error[16/*in*/][16/*out*/][4/*a*/] =\\n", 
      " { /* input: %s */\\n ", 
      "static png_uint_16 gpc_error_via_linear[16][4/*out*/][4] =\\n", 
      " { /* input: %s */\\n ", 
      "static png_uint_16 gpc_error_to_colormap[8/*i*/][8/*o*/][4] =\\n", 
      " { /* input: %s */\\n ", 
      "/* END MACHINE GENERATED */\\n", 
      "%s: open failed\\n", 
      "PNG simple API tests succeeded\\n", 
      "%s: write failed\\n", 
      "--log", 
      "--fresh", 
      "--file", 
      "--memory", 
      "--stdio", 
      "--name", 
      "--verbose", 
      "--quiet", 
      "--preserve", 
      "--nopreserve", 
      "--keep-going", 
      "--fast", 
      "--slow", 
      "--accumulate", 
      "--redundant", 
      "--stop", 
      "--strict", 
      "--nostrict", 
      "--sRGB-16bit", 
      "--linear-16bit", 
      "--noreseed", 
      "--fault-gbg-warning", 
      "--tmpfile", 
      "%s: %s requires a temporary file prefix\\n", 
      "%s: %s is too long for a temp file prefix\\n", 
      "--touch", 
      "%s: %s requires a file name argument\\n", 
      "%s: unknown option: %s\\n", 
      "%s...%s: file name too long\\n"
    ], 
    "if (.* < .*)": 11, 
    "break": 1, 
    "fflush(.*)": 7, 
    "label": "main", 
    "params": 2, 
    ".*\\+ 0x.*": 1, 
    "int": 1, 
    "if (.* == 0)": 25, 
    "memset(.*)": 2, 
    "while(.*)": 2, 
    "for (.*)": 10, 
    "printf(.*)": 51, 
    ".*\\-": 31, 
    "if (.*)": 52, 
    "return": 1, 
    ".*\\+": 23, 
    "= .*\\+": 20
  }, 
  "gpc_lin": {
    "void": 1, 
    "params": 3, 
    "return;": 1, 
    ".*\\-": 17, 
    "if (.*)": 4, 
    "return": 0
  }, 
  "logclose": {
    "label": "close", 
    "params": 4, 
    "int": 1, 
    "char*": 1, 
    "return": 1
  }, 
  "gp_abgr16": {
    "void": 1, 
    "params": 2, 
    "return;": 1, 
    ".*\\-": 4, 
    "return": 0, 
    ".*\\+": 3, 
    "= .*\\+": 3
  }, 
  "gp_rgb8": {
    "void": 1, 
    "params": 2, 
    "return;": 1, 
    ".*\\-": 4, 
    "return": 0, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "YfromRGB": {
    "double": 1, 
    "params": 3, 
    "return": 1, 
    ".*\\+": 1
  }, 
  "check16": {
    "byte": 1, 
    "label": "check", 
    "params": 2, 
    "int": 1, 
    "while(.*)": 1, 
    "return 0": 1, 
    ".*\\-": 1, 
    "if (.*)": 1, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "print_pixel": {
    "void": 1, 
    "string": [
      "%s(%d)", 
      "%s(%d,%d)", 
      "%s(%d,%d,%d)", 
      "%s(%d,%d,%d,%d)", 
      "invalid-format"
    ], 
    "break": 4, 
    "uint": 1, 
    "params": 3, 
    "int": 1, 
    "return;": 1, 
    "char*": 1, 
    "printf(.*)": 5, 
    ".*\\-": 5, 
    "return": 0, 
    "case": 4
  }, 
  "cmppixel": {
    "if (.* != 0)": 3, 
    "if (.* < \\d*)": 5, 
    "void": 1, 
    "if (.* < .*)": 5, 
    "uint": 1, 
    "params": 5, 
    "int": 1, 
    "if (.* == 0)": 5, 
    ".*\\-": 19, 
    "if (.*)": 14, 
    "return": 1
  }, 
  "gp_g8": {
    "void": 1, 
    "params": 2, 
    "return;": 1, 
    ".*\\-": 4, 
    "return": 0
  }, 
  "newimage": {
    "void": 1, 
    "params": 1, 
    "memset(.*)": 1, 
    "return;": 1, 
    "return": 0
  }, 
  "ilinear_g22": {
    "uint": 1, 
    "params": 1, 
    "int": 1, 
    "return": 1
  }, 
  "random_color": {
    "void": 1, 
    "params": 1, 
    "return;": 1, 
    "return": 0
  }, 
  "logerror": {
    "fprintf(.*)": 3, 
    "string": [
      "%s%s%s\\n", 
      "%s%s%s: %s\\n", 
      "%s: image opaque pointer non-NULL on error\\n"
    ], 
    "fflush(.*)": 1, 
    "label": "error", 
    "params": 4, 
    "int": 1, 
    "if (.* == 0)": 1, 
    "return 0": 1, 
    "char*": 1, 
    ".*\\-": 4, 
    "printf(.*)": 3, 
    "if (.*)": 2, 
    "return": 1
  }, 
  "read_file": {
    "if (.* != 0)": 3, 
    "string": [
      "file init: ", 
      "", 
      "stdio init: ", 
      "", 
      "memory init: ", 
      "", 
      "no change", 
      "%s %lu x %lu %s -> %s", 
      " background(%d,%d,%d)\\n", 
      ": image read failed", 
      ""
    ], 
    "fflush(.*)": 1, 
    "label": "read", 
    "uint": 1, 
    "params": 3, 
    ".*\\+ 0x.*": 1, 
    "int": 1, 
    "if (.* == 0)": 6, 
    "memset(.*)": 1, 
    ".*\\-": 24, 
    "printf(.*)": 3, 
    "if (.*)": 12, 
    "return": 1, 
    ".*\\+": 3, 
    "= .*\\+": 3
  }, 
  "gpc_pre": {
    "void": 1, 
    "params": 3, 
    "return;": 1, 
    ".*\\-": 17, 
    "if (.*)": 4, 
    "return": 0
  }, 
  "gp_bgra8": {
    "void": 1, 
    "params": 2, 
    "return;": 1, 
    ".*\\-": 4, 
    "return": 0, 
    ".*\\+": 3, 
    "= .*\\+": 3
  }, 
  "gpc_Lin": {
    "void": 1, 
    "params": 3, 
    "return;": 1, 
    ".*\\-": 17, 
    "if (.*)": 4, 
    "return": 0
  }, 
  "gp_rgba16": {
    "void": 1, 
    "params": 2, 
    "return;": 1, 
    ".*\\-": 4, 
    "return": 0, 
    ".*\\+": 3, 
    "= .*\\+": 3
  }, 
  "format_init": {
    "void": 1, 
    "label": "init", 
    "params": 1, 
    "return;": 1, 
    "for (.*)": 1, 
    ".*\\-": 1, 
    "return": 0, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "logpixel": {
    "string": [
      "", 
      "%lu,%lu", 
      "palette: %lu", 
      " (via linear)", 
      " on background %s", 
      "(%s) %s error%s:\\n %s%s ->\\n       %s\\n  not: %s.\\n The error happened when reading the original file with this format.", 
      "", 
      "(%s) %s error%s:\\n %s%s ->\\n       %s\\n  not: %s.\\nUse --preserve and examine: "
    ], 
    "uint": 1, 
    "params": 7, 
    ".*\\+ 0x.*": 10, 
    "int": 1, 
    "if (.* == 0)": 1, 
    "char*": 1, 
    ".*\\-": 15, 
    "printf(.*)": 5, 
    "if (.*)": 4, 
    "return": 1, 
    ".*\\+": 10
  }, 
  "ilineara": {
    "uint": 1, 
    "params": 2, 
    "int": 1, 
    "return": 1
  }, 
  "print_opts": {
    "if (.* != 0)": 9, 
    "void": 1, 
    "string": [
      " --file", 
      " --stdio", 
      " --nostrict", 
      " --verbose", 
      " --preserve", 
      " --keep-going", 
      " --accumulate", 
      " --slow", 
      " --sRGB-16bit", 
      " --noreseed", 
      " --fault-gbg-warning"
    ], 
    "uint": 1, 
    "params": 1, 
    "int": 1, 
    "if (.* == 0)": 2, 
    "return;": 1, 
    "printf(.*)": 11, 
    ".*\\-": 11, 
    "if (.*)": 11, 
    "return": 0
  }, 
  "write_one_file": {
    "if (.* != 0)": 3, 
    "string": [
      "memory", 
      ": get size:", 
      "", 
      "memory", 
      ": PNG_IMAGE_SIZE_MAX wrong", 
      "", 
      "memory", 
      "memory", 
      ": out of memory", 
      "", 
      "memory", 
      ": write failed", 
      "", 
      "memory", 
      ": memory size wrong", 
      "", 
      "%s%u.png", 
      ": write failed", 
      "", 
      "tmpfile", 
      ": open: ", 
      "tmpfile", 
      ": write failed", 
      "", 
      "tmpfile", 
      ": flush: ", 
      "tmpfile", 
      ": read of new file failed", 
      "", 
      ": format changed on read: "
    ], 
    "strcpy(.*)": 1, 
    "fflush(.*)": 1, 
    "label": "write", 
    "params": 3, 
    ".*\\+ 0x.*": 8, 
    "int": 1, 
    "malloc(.*)": 1, 
    "if (.* == 0)": 23, 
    "return 0": 2, 
    ".*\\-": 65, 
    "printf(.*)": 1, 
    "if (.*)": 31, 
    "return": 1, 
    ".*\\+": 31, 
    "= .*\\+": 16
  }, 
  "format_isset": {
    "if (.* < \\d*)": 1, 
    "if (.* < .*)": 1, 
    "label": "set", 
    "uint": 1, 
    "params": 2, 
    "int": 1, 
    ".*\\-": 1, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "YfromRGBint": {
    "double": 1, 
    "params": 3, 
    "int": 1, 
    "return": 1
  }, 
  "checkbuffer": {
    "if (.* != 0)": 2, 
    "fprintf(.*)": 2, 
    "void": 1, 
    "string": [
      "%s: overwrite at start of image buffer\\n", 
      "%s: overwrite at end of image buffer\\n"
    ], 
    "fflush(.*)": 2, 
    "label": "check", 
    "params": 2, 
    ".*\\+ 0x.*": 1, 
    "return;": 1, 
    "char*": 1, 
    ".*\\-": 2, 
    "printf(.*)": 2, 
    "if (.*)": 2, 
    "return": 0, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "init_sRGB_to_d": {
    "void": 1, 
    "label": "init", 
    "params": 1, 
    "return;": 1, 
    "for (.*)": 2, 
    "return": 0, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "gp_rgb16": {
    "void": 1, 
    "params": 2, 
    "return;": 1, 
    ".*\\-": 4, 
    "return": 0, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "testimage": {
    "if (.* != 0)": 4, 
    "break": 3, 
    "label": "test", 
    "uint": 1, 
    "params": 3, 
    "int": 1, 
    "if (.* == 0)": 7, 
    "memcpy(.*)": 1, 
    "for (.*)": 1, 
    ".*\\-": 5, 
    "if (.*)": 8, 
    "return": 1, 
    ".*\\+": 3, 
    "= .*\\+": 3
  }, 
  "allocbuffer": {
    "if (.* < \\d*)": 1, 
    "fprintf(.*)": 1, 
    "void": 1, 
    "string": [
      "simpletest: out of memory allocating %lu(+32) byte buffer\\n"
    ], 
    "if (.* < .*)": 1, 
    "fflush(.*)": 1, 
    "params": 1, 
    ".*\\+ 0x.*": 4, 
    "malloc(.*)": 1, 
    "if (.* == 0)": 1, 
    "memset(.*)": 2, 
    "return;": 1, 
    ".*\\-": 10, 
    "printf(.*)": 1, 
    "if (.*)": 3, 
    "return": 0, 
    ".*\\+": 6, 
    "= .*\\+": 3
  }, 
  "read_one_file": {
    "if (.* != 0)": 2, 
    "if (.* < \\d*)": 1, 
    "string": [
      ": open failed: ", 
      ": seek failed: ", 
      ": zero length: ", 
      ": tell failed: ", 
      ": out of memory: ", 
      ": read failed: "
    ], 
    "if (.* < .*)": 1, 
    "label": "read", 
    "params": 1, 
    "int": 1, 
    "malloc(.*)": 1, 
    "if (.* == 0)": 3, 
    ".*\\-": 12, 
    "if (.*)": 8, 
    "return": 1
  }, 
  "gp_ga16": {
    "void": 1, 
    "params": 2, 
    "return;": 1, 
    ".*\\-": 4, 
    "return": 0, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "isRGB": {
    "byte": 1, 
    "params": 1, 
    "int": 1, 
    "return": 1
  }, 
  "gpc_gprq": {
    "void": 1, 
    "params": 3, 
    "return;": 1, 
    ".*\\-": 10, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "component_loc": {
    "byte": 1, 
    "uint": 1, 
    "params": 2, 
    "int": 1, 
    "if (.* == 0)": 4, 
    "if (.*)": 4, 
    "return": 1, 
    ".*\\+": 4, 
    "= .*\\+": 4, 
    "byte*": 1
  }, 
  "gpc_g16": {
    "void": 1, 
    "params": 3, 
    "return;": 1, 
    ".*\\-": 5, 
    "return": 0
  }, 
  "format_set": {
    "if (.* < \\d*)": 1, 
    "if (.* < .*)": 1, 
    "label": "set", 
    "uint": 1, 
    "params": 2, 
    "int": 1, 
    ".*\\-": 2, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "gp_rgba8": {
    "void": 1, 
    "params": 2, 
    "return;": 1, 
    ".*\\-": 4, 
    "return": 0, 
    ".*\\+": 3, 
    "= .*\\+": 3
  }, 
  "gp_ag16": {
    "void": 1, 
    "params": 2, 
    "return;": 1, 
    ".*\\-": 4, 
    "return": 0, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "gpc_bckg": {
    "if (.* < \\d*)": 2, 
    "void": 1, 
    "if (.* < .*)": 2, 
    "params": 3, 
    "return;": 1, 
    ".*\\-": 15, 
    "if (.*)": 2, 
    "return": 0
  }, 
  "gpc_g8b": {
    "if (.* < \\d*)": 2, 
    "void": 1, 
    "if (.* < .*)": 2, 
    "params": 3, 
    "return;": 1, 
    ".*\\-": 19, 
    "if (.*)": 3, 
    "return": 0
  }, 
  "gpc_gpre": {
    "void": 1, 
    "params": 3, 
    "return;": 1, 
    ".*\\-": 10, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "formatof": {
    "if (.* < \\d*)": 1, 
    "fprintf(.*)": 1, 
    "string": [
      "pngstest: format name \\'%s\\' invalid\\n"
    ], 
    "if (.* < .*)": 1, 
    "uint": 1, 
    "params": 1, 
    "int": 1, 
    "if (.* == 0)": 1, 
    "for (.*)": 1, 
    "char*": 1, 
    "printf(.*)": 1, 
    "if (.*)": 2, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "gp_ga8": {
    "void": 1, 
    "params": 2, 
    "return;": 1, 
    ".*\\-": 4, 
    "return": 0, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "format_is_initial": {
    "if (.* < \\d*)": 1, 
    "if (.* != 0)": 1, 
    "if (.* < .*)": 1, 
    "break": 1, 
    "label": "init", 
    "params": 1, 
    "int": 1, 
    "while(.*)": 1, 
    "return 0": 1, 
    ".*\\-": 1, 
    "if (.*)": 2, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "gpc_noop": {
    "void": 1, 
    "params": 3, 
    "return;": 1, 
    ".*\\-": 4, 
    "return": 0
  }, 
  "gp_bgr16": {
    "void": 1, 
    "params": 2, 
    "return;": 1, 
    ".*\\-": 4, 
    "return": 0, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "format_default": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "params": 2, 
    "int": 1, 
    "if (.* == 0)": 2, 
    "return;": 1, 
    "for (.*)": 2, 
    ".*\\-": 1, 
    "if (.*)": 2, 
    "return": 0, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "freeimage": {
    "void": 1, 
    "label": "free", 
    "params": 1, 
    "if (.* == 0)": 1, 
    "return;": 1, 
    ".*\\-": 10, 
    "if (.*)": 3, 
    "return": 0
  }, 
  "u8d": {
    "byte": 1, 
    "double": 1, 
    "params": 1, 
    "return": 1
  }, 
  "gpc_unpg": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "if (.* < .*)": 1, 
    "params": 3, 
    "return;": 1, 
    ".*\\-": 9, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "gp_abgr8": {
    "void": 1, 
    "params": 2, 
    "return;": 1, 
    ".*\\-": 4, 
    "return": 0, 
    ".*\\+": 3, 
    "= .*\\+": 3
  }, 
  "gpc_glin": {
    "void": 1, 
    "params": 3, 
    "return;": 1, 
    ".*\\-": 9, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "gpc_sG": {
    "void": 1, 
    "params": 3, 
    "return;": 1, 
    ".*\\-": 5, 
    "return": 0
  }, 
  "gpc_cb16": {
    "if (.* < \\d*)": 2, 
    "void": 1, 
    "if (.* < .*)": 2, 
    "params": 3, 
    "return;": 1, 
    ".*\\-": 16, 
    "if (.*)": 2, 
    "return": 0
  }, 
  "compare_two_images": {
    "if (.* != 0)": 8, 
    "if (.* < \\d*)": 7, 
    "string": [
      ": width x height changed: ", 
      ": bad pixel index: ", 
      ": bad pixel index: ", 
      "%d[%u]", 
      ": bad pixel index: ", 
      "%d[%u]", 
      ": bad pixel index: "
    ], 
    "if (.* < .*)": 7, 
    "break": 6, 
    "label": "compare", 
    "params": 4, 
    ".*\\+ 0x.*": 2, 
    "int": 1, 
    "if (.* == 0)": 13, 
    "memset(.*)": 2, 
    "goto": 11, 
    "return 0": 1, 
    "while(.*)": 1, 
    "for (.*)": 5, 
    ".*\\-": 34, 
    "printf(.*)": 4, 
    "if (.*)": 40, 
    "return": 1, 
    ".*\\+": 34, 
    "= .*\\+": 30, 
    "case": 24
  }, 
  "gpc_unpc": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "if (.* < .*)": 1, 
    "params": 3, 
    "return;": 1, 
    ".*\\-": 9, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "initimage": {
    "void": 1, 
    "label": "init", 
    "uint": 1, 
    "params": 4, 
    "int": 1, 
    "memset(.*)": 1, 
    "return;": 1, 
    "char*": 1, 
    ".*\\-": 3, 
    "return": 0
  }, 
  "gp_ag8": {
    "void": 1, 
    "params": 2, 
    "return;": 1, 
    ".*\\-": 4, 
    "return": 0, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "freebuffer": {
    "void": 1, 
    "label": "free", 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 5, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "gpc_gb16": {
    "if (.* < \\d*)": 2, 
    "void": 1, 
    "if (.* < .*)": 2, 
    "params": 3, 
    "return;": 1, 
    ".*\\-": 15, 
    "if (.*)": 2, 
    "return": 0
  }, 
  "reseed": {
    "void": 1, 
    "params": 1, 
    "return;": 1, 
    "return": 0
  }, 
  "sRGB_from_linear": {
    "if (.* < \\d*)": 1, 
    "if (.* < .*)": 1, 
    "double": 1, 
    "params": 1, 
    ".*\\-": 1, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "gpc_b16c": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "if (.* < .*)": 1, 
    "params": 3, 
    "return;": 1, 
    ".*\\-": 9, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "gp_g16": {
    "void": 1, 
    "params": 2, 
    "return;": 1, 
    ".*\\-": 4, 
    "return": 0
  }, 
  "gp_argb8": {
    "void": 1, 
    "params": 2, 
    "return;": 1, 
    ".*\\-": 4, 
    "return": 0, 
    ".*\\+": 3, 
    "= .*\\+": 3
  }, 
  "gpc_g8": {
    "void": 1, 
    "params": 3, 
    "return;": 1, 
    ".*\\-": 9, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "gpc_sRGB": {
    "void": 1, 
    "params": 3, 
    "return;": 1, 
    ".*\\-": 17, 
    "if (.*)": 4, 
    "return": 0
  }, 
  "gpc_b16g": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "if (.* < .*)": 1, 
    "params": 3, 
    "return;": 1, 
    ".*\\-": 10, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "sRGB": {
    "byte": 1, 
    "double": 1, 
    "params": 1, 
    "return": 1
  }, 
  "test_one_file": {
    "if (.* != 0)": 1, 
    "string": [
      "FAIL:", 
      "PASS:"
    ], 
    "fflush(.*)": 2, 
    "label": "test", 
    "uint": 1, 
    "params": 5, 
    "int": 1, 
    "if (.* == 0)": 4, 
    "char*": 1, 
    "printf(.*)": 3, 
    "if (.*)": 5, 
    "return": 1
  }, 
  "resetimage": {
    "void": 1, 
    "label": "set", 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 2, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "checkopaque": {
    "if (.* != 0)": 3, 
    "string": [
      "libpng does not support gamma+background+rgb_to_gray", 
      " --strict", 
      " --fault-gbg-warning", 
      "", 
      ": opaque not NULL", 
      ""
    ], 
    "label": "check", 
    "params": 1, 
    "int": 1, 
    "if (.* == 0)": 1, 
    ".*\\-": 10, 
    "if (.*)": 5, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "gpc_bckc": {
    "if (.* < \\d*)": 2, 
    "void": 1, 
    "if (.* < .*)": 2, 
    "params": 3, 
    "return;": 1, 
    ".*\\-": 12, 
    "if (.*)": 2, 
    "return": 0
  }, 
  "get_pixel": {
    "void": 1, 
    "label": "get", 
    "uint": 1, 
    "params": 1, 
    "int": 1, 
    "if (.* == 0)": 17, 
    "if (.*)": 17, 
    "return": 0
  }, 
  "gpc_sGp": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "if (.* < .*)": 1, 
    "params": 3, 
    "return;": 1, 
    ".*\\-": 10, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "gp_bgra16": {
    "void": 1, 
    "params": 2, 
    "return;": 1, 
    ".*\\-": 4, 
    "return": 0, 
    ".*\\+": 3, 
    "= .*\\+": 3
  }, 
  "ilinear": {
    "uint": 1, 
    "params": 1, 
    "int": 1, 
    "return": 1
  }, 
  "transform_from_formats": {
    "if (.* != 0)": 2, 
    "fprintf(.*)": 1, 
    "void": 1, 
    "string": [
      "internal transform via linear error 0x%x->0x%x\\n"
    ], 
    "label": "transform", 
    "params": 5, 
    "int": 1, 
    "if (.* == 0)": 8, 
    "memset(.*)": 1, 
    "return;": 1, 
    ".*\\-": 68, 
    "printf(.*)": 1, 
    "if (.*)": 12, 
    "return": 0
  }, 
  "gpc_sCp": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "if (.* < .*)": 1, 
    "params": 3, 
    "return;": 1, 
    ".*\\-": 9, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "gp_argb16": {
    "void": 1, 
    "params": 2, 
    "return;": 1, 
    ".*\\-": 4, 
    "return": 0, 
    ".*\\+": 3, 
    "= .*\\+": 3
  }, 
  "make_random_bytes": {
    "void": 1, 
    "void*": 1, 
    "int*": 1, 
    "label": "make", 
    "params": 3, 
    "uint*": 1, 
    "return;": 1, 
    "for (.*)": 1, 
    "return": 0, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "u16d": {
    "double": 1, 
    "uint": 1, 
    "params": 1, 
    "int": 1, 
    "return": 1
  }
}