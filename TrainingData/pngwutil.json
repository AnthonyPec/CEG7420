{
  "png_write_hIST": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "string": [
      "Invalid number of histogram entries specified"
    ], 
    "if (.* < .*)": 1, 
    "label": "write", 
    "uint": 1, 
    "params": 3, 
    "int": 1, 
    "return;": 1, 
    "for (.*)": 1, 
    ".*\\-": 1, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "png_save_uint_32": {
    "void": 1, 
    "byte": 1, 
    "uint": 1, 
    "params": 2, 
    "int": 1, 
    "return;": 1, 
    "return": 0
  }, 
  "png_write_pHYs": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "string": [
      "Unrecognized unit type for pHYs chunk"
    ], 
    "if (.* < .*)": 1, 
    "label": "write", 
    "uint": 1, 
    "params": 4, 
    "int": 1, 
    "return;": 1, 
    "for (.*)": 1, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "png_write_find_filter": {
    "if (.* < \\d*)": 2, 
    "if (.* != 0)": 5, 
    "void": 1, 
    "if (.* < .*)": 2, 
    "label": "write", 
    "params": 2, 
    "return;": 1, 
    "for (.*)": 1, 
    ".*\\-": 25, 
    "if (.*)": 11, 
    "return": 0, 
    ".*\\+": 4, 
    "= .*\\+": 3
  }, 
  "png_write_IHDR": {
    "if (.* < \\d*)": 4, 
    "if (.* != 0)": 6, 
    "void": 1, 
    "string": [
      "Invalid image color type specified", 
      "Invalid bit depth for RGB image", 
      "Invalid bit depth for paletted image", 
      "Invalid bit depth for grayscale+alpha image", 
      "Invalid bit depth for RGBA image", 
      "Invalid compression type specified", 
      "Invalid filter type specified", 
      "Invalid interlace type specified"
    ], 
    "if (.* < .*)": 4, 
    "break": 5, 
    "label": "write", 
    "uint": 1, 
    "params": 8, 
    "int": 1, 
    "if (.* == 0)": 2, 
    "return;": 1, 
    "for (.*)": 4, 
    ".*\\-": 28, 
    "if (.*)": 11, 
    "return": 0, 
    "case": 5, 
    ".*\\+": 2, 
    "= .*\\+": 1
  }, 
  "png_write_chunk_end": {
    "void": 1, 
    "label": "write", 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 2, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "png_setup_paeth_row_only": {
    "if (.* < \\d*)": 4, 
    "void": 1, 
    "break": 2, 
    "if (.* < .*)": 4, 
    "byte": 1, 
    "label": "set", 
    "uint": 1, 
    "params": 3, 
    "int": 1, 
    "return;": 1, 
    "while(.*)": 2, 
    ".*\\-": 13, 
    "if (.*)": 7, 
    "return": 0, 
    ".*\\+": 13, 
    "= .*\\+": 12
  }, 
  "png_write_sCAL_s": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "string": [
      "Can\\'t write sCAL (buffer too small)"
    ], 
    "if (.* < .*)": 1, 
    "label": "write", 
    "params": 4, 
    "int": 1, 
    "return;": 1, 
    "memcpy(.*)": 2, 
    "char": 1, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\+": 3, 
    "= .*\\+": 1
  }, 
  "png_write_sBIT": {
    "if (.* < \\d*)": 3, 
    "if (.* != 0)": 1, 
    "void": 1, 
    "string": [
      "Invalid sBIT depth specified", 
      "Invalid sBIT depth specified", 
      "Invalid sBIT depth specified"
    ], 
    "if (.* < .*)": 3, 
    "label": "write", 
    "params": 3, 
    "int": 1, 
    "if (.* == 0)": 1, 
    "return;": 4, 
    ".*\\-": 10, 
    "if (.*)": 6, 
    "return": 0, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "png_write_PLTE": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "string": [
      "Invalid number of colors in palette", 
      "Invalid number of colors in palette", 
      "Ignoring request to write a PLTE chunk in grayscale PNG"
    ], 
    "if (.* < .*)": 1, 
    "label": "write", 
    "uint": 1, 
    "params": 3, 
    "int": 1, 
    "if (.* == 0)": 2, 
    "return;": 1, 
    "for (.*)": 1, 
    ".*\\-": 10, 
    "if (.*)": 4, 
    "return": 0, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "png_setup_up_row_only": {
    "void": 1, 
    "byte": 1, 
    "label": "set", 
    "params": 2, 
    "return;": 1, 
    "for (.*)": 1, 
    ".*\\-": 5, 
    "return": 0, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "png_deflate_claim": {
    "if (.* != 0)": 3, 
    "if (.* < \\d*)": 1, 
    "string": [
      " using zstream", 
      "deflateEnd failed (ignored)", 
      "1.2.11"
    ], 
    "if (.* < .*)": 1, 
    "uint": 1, 
    "params": 3, 
    ".*\\+ 0x.*": 1, 
    "int": 1, 
    "if (.* == 0)": 4, 
    "for (.*)": 1, 
    ".*\\-": 34, 
    "if (.*)": 9, 
    "return": 1, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "png_write_cHRM_fixed": {
    "void": 1, 
    "label": "write", 
    "params": 2, 
    "return;": 1, 
    ".*\\-": 8, 
    "return": 0
  }, 
  "png_image_size": {
    "if (.* < \\d*)": 6, 
    "if (.* != 0)": 1, 
    "if (.* < .*)": 6, 
    "params": 1, 
    "for (.*)": 1, 
    ".*\\-": 14, 
    "if (.*)": 8, 
    "return": 1, 
    ".*\\+": 9, 
    "= .*\\+": 5
  }, 
  "png_write_tRNS": {
    "if (.* < \\d*)": 2, 
    "if (.* != 0)": 1, 
    "void": 1, 
    "string": [
      "Invalid number of transparent colors specified", 
      "Ignoring attempt to write tRNS chunk out-of-range for bit_depth", 
      "Ignoring attempt to write 16-bit tRNS chunk when bit_depth is 8", 
      "Can\\'t write tRNS with an alpha channel"
    ], 
    "if (.* < .*)": 2, 
    "byte": 1, 
    "label": "write", 
    "params": 5, 
    "int": 1, 
    "if (.* == 0)": 1, 
    "return;": 1, 
    "for (.*)": 1, 
    ".*\\-": 9, 
    "if (.*)": 6, 
    "return": 0
  }, 
  "png_write_iCCP": {
    "if (.* < \\d*)": 2, 
    "if (.* != 0)": 2, 
    "void": 1, 
    "string": [
      "No profile for iCCP chunk", 
      "ICC profile too short", 
      "ICC profile length invalid (not a multiple of 4)", 
      "Profile length does not match profile", 
      "iCCP: invalid keyword"
    ], 
    "if (.* < .*)": 2, 
    "byte": 1, 
    "label": "write", 
    "params": 3, 
    "if (.* == 0)": 1, 
    "return;": 1, 
    "for (.*)": 1, 
    "char": 1, 
    ".*\\-": 1, 
    "if (.*)": 6, 
    "return": 0, 
    ".*\\+": 6, 
    "= .*\\+": 3
  }, 
  "png_write_iTXt": {
    "if (.* < \\d*)": 3, 
    "if (.* != 0)": 1, 
    "void": 1, 
    "string": [
      "iTXt: invalid keyword", 
      "iTXt: invalid compression", 
      "", 
      "", 
      "iTXt: uncompressed text too long"
    ], 
    "break": 2, 
    "if (.* < .*)": 3, 
    "label": "write", 
    "params": 6, 
    "int": 1, 
    "if (.* == 0)": 4, 
    "return;": 1, 
    "char": 1, 
    ".*\\-": 5, 
    "if (.*)": 10, 
    "return": 0, 
    "case": 4, 
    ".*\\+": 10, 
    "= .*\\+": 9
  }, 
  "png_write_tEXt": {
    "if (.* < \\d*)": 1, 
    "if (.* != 0)": 1, 
    "void": 1, 
    "string": [
      "tEXt: invalid keyword", 
      "tEXt: text too long"
    ], 
    "if (.* < .*)": 1, 
    "label": "write", 
    "params": 4, 
    "if (.* == 0)": 2, 
    "return;": 1, 
    "char": 1, 
    ".*\\-": 1, 
    "if (.*)": 4, 
    "return": 0, 
    ".*\\+": 3
  }, 
  "png_write_tIME": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "string": [
      "Invalid time specified for tIME chunk"
    ], 
    "if (.* < .*)": 1, 
    "label": "write", 
    "params": 2, 
    "return;": 1, 
    "for (.*)": 1, 
    ".*\\-": 8, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "png_write_oFFs": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "string": [
      "Unrecognized unit type for oFFs chunk"
    ], 
    "if (.* < .*)": 1, 
    "label": "write", 
    "params": 4, 
    "int": 1, 
    "return;": 1, 
    "for (.*)": 1, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "png_write_IEND": {
    "void": 1, 
    "label": "write", 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "return": 0
  }, 
  "png_write_zTXt": {
    "if (.* != 0)": 2, 
    "void": 1, 
    "string": [
      "zTXt: invalid compression type", 
      "zTXt: invalid keyword"
    ], 
    "label": "write", 
    "params": 4, 
    "int": 1, 
    "if (.* == 0)": 2, 
    "return;": 1, 
    "char": 1, 
    ".*\\-": 2, 
    "if (.*)": 5, 
    "return": 0, 
    ".*\\+": 4, 
    "= .*\\+": 3
  }, 
  "png_compress_IDAT": {
    "if (.* != 0)": 5, 
    "void": 1, 
    "string": [
      "Z_OK on Z_FINISH with output space"
    ], 
    "byte": 1, 
    "params": 4, 
    "int": 1, 
    "malloc(.*)": 1, 
    "if (.* == 0)": 6, 
    "return;": 2, 
    "goto": 1, 
    "while(.*)": 1, 
    ".*\\-": 32, 
    "if (.*)": 15, 
    "return": 0, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "png_text_compress": {
    "if (.* != 0)": 1, 
    "if (.* < \\d*)": 2, 
    "string": [
      "compressed data too long"
    ], 
    "if (.* < .*)": 2, 
    "break": 2, 
    "uint": 1, 
    "params": 4, 
    "int": 1, 
    "malloc(.*)": 1, 
    "if (.* == 0)": 4, 
    "while(.*)": 1, 
    ".*\\-": 30, 
    "if (.*)": 9, 
    "return": 1, 
    ".*\\+": 5, 
    "= .*\\+": 3
  }, 
  "png_write_pCAL": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "string": [
      "Unrecognized equation type for pCAL chunk", 
      "pCAL: invalid keyword"
    ], 
    "if (.* < .*)": 1, 
    "label": "write", 
    "params": 8, 
    "int": 1, 
    "malloc(.*)": 1, 
    "if (.* == 0)": 2, 
    "return;": 1, 
    "for (.*)": 3, 
    "char": 1, 
    ".*\\-": 1, 
    "if (.*)": 4, 
    "return": 0, 
    ".*\\+": 10, 
    "= .*\\+": 7
  }, 
  "png_write_filtered_row": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "byte": 1, 
    "label": "write", 
    "params": 3, 
    "return;": 1, 
    ".*\\-": 6, 
    "if (.*)": 2, 
    "return": 0, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "png_setup_avg_row": {
    "if (.* < \\d*)": 3, 
    "break": 2, 
    "if (.* < .*)": 3, 
    "byte": 1, 
    "label": "set", 
    "uint": 1, 
    "params": 4, 
    "int": 1, 
    "while(.*)": 2, 
    ".*\\-": 9, 
    "if (.*)": 5, 
    "return": 1, 
    ".*\\+": 12, 
    "= .*\\+": 12
  }, 
  "png_save_uint_16": {
    "void": 1, 
    "byte": 1, 
    "uint": 1, 
    "params": 2, 
    "int": 1, 
    "return;": 1, 
    "return": 0
  }, 
  "png_write_sig": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "if (.* < .*)": 1, 
    "label": "write", 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 4, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\+": 1
  }, 
  "png_write_bKGD": {
    "if (.* != 0)": 2, 
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "string": [
      "Invalid background palette index", 
      "Ignoring attempt to write bKGD chunk out-of-range for bit_depth", 
      "Ignoring attempt to write 16-bit bKGD chunk when bit_depth is 8"
    ], 
    "if (.* < .*)": 1, 
    "label": "write", 
    "params": 3, 
    "int": 1, 
    "if (.* == 0)": 2, 
    "return;": 1, 
    "for (.*)": 1, 
    ".*\\-": 11, 
    "if (.*)": 5, 
    "return": 0
  }, 
  "png_write_chunk_start": {
    "void": 1, 
    "byte": 1, 
    "label": "write", 
    "uint": 1, 
    "params": 3, 
    "int": 1, 
    "return;": 1, 
    "return": 0
  }, 
  "png_write_complete_chunk": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "string": [
      "length exceeds PNG maximum"
    ], 
    "if (.* < .*)": 1, 
    "byte": 1, 
    "label": "write", 
    "uint": 1, 
    "params": 4, 
    "int": 1, 
    "return;": 1, 
    "if (.*)": 2, 
    "return": 0
  }, 
  "png_write_start_row": {
    "if (.* < \\d*)": 2, 
    "if (.* != 0)": 5, 
    "void": 1, 
    "if (.* < .*)": 2, 
    "label": "write", 
    "params": 1, 
    "malloc(.*)": 3, 
    "if (.* == 0)": 2, 
    "return;": 1, 
    ".*\\-": 25, 
    "if (.*)": 12, 
    "return": 0, 
    ".*\\+": 7, 
    "= .*\\+": 7
  }, 
  "png_write_sRGB": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "string": [
      "Invalid sRGB rendering intent specified"
    ], 
    "if (.* < .*)": 1, 
    "label": "write", 
    "params": 2, 
    "int": 1, 
    "return;": 1, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "png_write_finish_row": {
    "if (.* < \\d*)": 3, 
    "if (.* != 0)": 2, 
    "void": 1, 
    "string": [
      "\\b\\b\\x04\\x04\\x02\\x02\\x01", 
      "", 
      "\\b\\b\\x04\\x04\\x02\\x02\\x01", 
      "\\b\\b\\b\\x04\\x04\\x02\\x02", 
      "", 
      "\\b\\b\\b\\x04\\x04\\x02\\x02"
    ], 
    "if (.* < .*)": 3, 
    "break": 2, 
    "label": "write", 
    "params": 1, 
    "if (.* == 0)": 1, 
    "return;": 3, 
    "memset(.*)": 1, 
    "while(.*)": 1, 
    ".*\\-": 26, 
    "if (.*)": 9, 
    "return": 0, 
    ".*\\+": 7, 
    "= .*\\+": 6
  }, 
  "png_write_chunk": {
    "void": 1, 
    "byte": 1, 
    "label": "write", 
    "params": 4, 
    "return;": 1, 
    "return": 0
  }, 
  "png_free_buffer_list": {
    "void": 1, 
    "label": "free", 
    "params": 2, 
    "return;": 1, 
    "while(.*)": 1, 
    ".*\\-": 1, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "png_setup_sub_row": {
    "if (.* < \\d*)": 3, 
    "break": 2, 
    "if (.* < .*)": 3, 
    "byte": 1, 
    "label": "set", 
    "uint": 1, 
    "params": 4, 
    "int": 1, 
    "while(.*)": 2, 
    ".*\\-": 7, 
    "if (.*)": 5, 
    "return": 1, 
    ".*\\+": 9, 
    "= .*\\+": 9
  }, 
  "png_setup_paeth_row": {
    "if (.* < \\d*)": 7, 
    "break": 2, 
    "if (.* < .*)": 7, 
    "byte": 1, 
    "label": "set", 
    "uint": 1, 
    "params": 4, 
    "int": 1, 
    "while(.*)": 2, 
    ".*\\-": 15, 
    "if (.*)": 10, 
    "return": 1, 
    ".*\\+": 15, 
    "= .*\\+": 14
  }, 
  "png_write_compressed_data_out": {
    "if (.* < \\d*)": 1, 
    "if (.* != 0)": 1, 
    "void": 1, 
    "string": [
      "error writing ancillary chunked compressed data"
    ], 
    "if (.* < .*)": 1, 
    "break": 1, 
    "label": "write", 
    "params": 2, 
    "if (.* == 0)": 1, 
    "return;": 1, 
    "while(.*)": 1, 
    ".*\\-": 7, 
    "if (.*)": 3, 
    "return": 0
  }, 
  "png_write_chunk_data": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "byte": 1, 
    "label": "write", 
    "params": 3, 
    "return;": 1, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "png_write_chunk_header": {
    "void": 1, 
    "label": "write", 
    "uint": 1, 
    "params": 3, 
    "int": 1, 
    "return;": 1, 
    ".*\\-": 3, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "png_write_gAMA_fixed": {
    "void": 1, 
    "label": "write", 
    "params": 2, 
    "int": 1, 
    "return;": 1, 
    "return": 0
  }, 
  "png_text_compress_init": {
    "void": 1, 
    "byte": 1, 
    "label": "init", 
    "params": 3, 
    "return;": 1, 
    ".*\\-": 3, 
    "return": 0
  }, 
  "png_setup_up_row": {
    "if (.* < \\d*)": 2, 
    "if (.* < .*)": 2, 
    "break": 1, 
    "byte": 1, 
    "label": "set", 
    "params": 3, 
    "while(.*)": 1, 
    ".*\\-": 6, 
    "if (.*)": 3, 
    "return": 1, 
    ".*\\+": 5, 
    "= .*\\+": 5
  }, 
  "png_write_sPLT": {
    "void": 1, 
    "string": [
      "sPLT: invalid keyword"
    ], 
    "label": "write", 
    "params": 2, 
    "if (.* == 0)": 1, 
    "return;": 1, 
    "for (.*)": 1, 
    ".*\\-": 16, 
    "if (.*)": 3, 
    "return": 0, 
    ".*\\+": 4, 
    "= .*\\+": 2
  }, 
  "png_setup_avg_row_only": {
    "void": 1, 
    "byte": 1, 
    "label": "set", 
    "uint": 1, 
    "params": 3, 
    "int": 1, 
    "return;": 1, 
    "for (.*)": 2, 
    ".*\\-": 7, 
    "return": 0, 
    ".*\\+": 7, 
    "= .*\\+": 7
  }, 
  "png_write_eXIf": {
    "void": 1, 
    "byte": 1, 
    "label": "write", 
    "params": 3, 
    "int": 1, 
    "return;": 1, 
    "for (.*)": 1, 
    "return": 0, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "optimize_cmf": {
    "if (.* < \\d*)": 2, 
    "void": 1, 
    "if (.* < .*)": 2, 
    "byte": 1, 
    "params": 2, 
    "return;": 1, 
    "while(.*)": 1, 
    ".*\\-": 2, 
    "if (.*)": 3, 
    "return": 0, 
    ".*\\+": 3, 
    "= .*\\+": 3
  }, 
  "png_setup_sub_row_only": {
    "void": 1, 
    "byte": 1, 
    "label": "set", 
    "uint": 1, 
    "params": 3, 
    "int": 1, 
    "return;": 1, 
    "for (.*)": 2, 
    ".*\\-": 5, 
    "return": 0, 
    ".*\\+": 4, 
    "= .*\\+": 4
  }, 
  "png_do_write_interlace": {
    "if (.* < \\d*)": 2, 
    "void": 1, 
    "string": [
      "", 
      "", 
      "", 
      "", 
      ""
    ], 
    "if (.* < .*)": 2, 
    "byte": 1, 
    "label": "write", 
    "params": 3, 
    "int": 1, 
    "if (.* == 0)": 3, 
    "return;": 1, 
    "memcpy(.*)": 1, 
    "for (.*)": 4, 
    ".*\\-": 19, 
    "if (.*)": 12, 
    "return": 0, 
    ".*\\+": 14, 
    "= .*\\+": 13
  }
}