{
  "operator>": {
    "params": 2, 
    "ByteVector *": 2, 
    "return": 1
  }, 
  "toFloat32BE": {
    "size_t": 1, 
    "float": 1, 
    "params": 2, 
    "ByteVector *": 1, 
    "return": 1
  }, 
  "operator<": {
    "params": 2, 
    "if (.* == 0)": 1, 
    "ByteVector *": 2, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "operator=": {
    "params": 2, 
    "char *": 1, 
    "ByteVector *": 1, 
    "return": 1
  }, 
  "operator==": {
    "params": 2, 
    "if (.*) param": 1, 
    "char *": 1, 
    "ByteVector *": 1, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "operator--": {
    "params": 1, 
    ".*\\+ param": 1, 
    "char": 1, 
    ".*\\-": 1, 
    "= .*\\+ param": 1, 
    "return": 1, 
    ".*\\+": 1, 
    ".*\\- param": 1, 
    "= .*\\+": 1, 
    "__normal_iterator<const_char_*,_std::vector<char,_std::allocator<char>_>_> *": 1
  }, 
  "fill<char_*,_char>": {
    "void": 1, 
    "label": "fill", 
    "params": 3, 
    "return;": 1, 
    "char *": 3, 
    "return": 0
  }, 
  "deallocate": {
    "pointer": 1, 
    "void": 1, 
    "size_type": 1, 
    "delete(.*)": 1, 
    "params": 3, 
    "delete(.*) param": 1, 
    "new_allocator<char> *": 1, 
    "return;": 1, 
    "return": 0
  }, 
  "findVector<std::reverse_iterator<__gnu_cxx::__normal_iterator<const_char_*,_std::vector<char,_std::allocator<char>_>_>_>_>": {
    "if (.* < \\d*)": 1, 
    "if (.* < .*)": 1, 
    "break": 2, 
    "if (.* == 0) param": 1, 
    "uint": 1, 
    "params": 6, 
    "int": 2, 
    ".*\\+ param": 1, 
    "if (.*) param": 1, 
    "if (.* == 0)": 2, 
    "while(.*)": 2, 
    ".*\\-": 3, 
    "if (.* < .*) param": 1, 
    "= .*\\+ param": 1, 
    "if (.*)": 6, 
    "return": 1, 
    "reverse_iterator<__gnu_cxx::__normal_iterator<const_char_*,_std::vector<char,_std::allocator<char>_>_>_>": 4, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "fromFloat<float,_unsigned_int,_TagLib::Utils::(anonymous_namespace)::BigEndian>": {
    "label": "gen", 
    "float": 1, 
    "params": 1, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "fromBase64": {
    "if (.* < \\d*)": 1, 
    "if (.* < .*)": 1, 
    "break": 1, 
    "params": 1, 
    "if (.* == 0)": 5, 
    "while(.*)": 1, 
    "goto": 4, 
    "ByteVector *": 1, 
    ".*\\-": 4, 
    "if (.*)": 6, 
    "return": 1, 
    ".*\\+": 7, 
    "= .*\\+": 7
  }, 
  "reverse_iterator": {
    "void": 1, 
    "iterator_type": 1, 
    "reverse_iterator<__gnu_cxx::__normal_iterator<char_*,_std::vector<char,_std::allocator<char>_>_>_> *": 1, 
    "params": 2, 
    "return;": 1, 
    ".*\\-": 1, 
    "return": 0, 
    ".*\\- param": 1
  }, 
  "~ByteVectorPrivate": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "ByteVectorPrivate *": 1, 
    "delete(.*)": 1, 
    "label": "~", 
    "params": 1, 
    "delete(.*) param": 1, 
    ".*\\+ param": 1, 
    "if (.*) param": 1, 
    "return;": 1, 
    ".*\\-": 3, 
    "if (.*)": 3, 
    "return": 0, 
    ".*\\- param": 1, 
    ".*\\+": 1
  }, 
  "__uninit_copy<char_*,_char_*>": {
    "label": "init", 
    "params": 3, 
    "char *": 3, 
    "char": 1, 
    "return": 1
  }, 
  "toNumber<unsigned_long_long>": {
    "if (.* < \\d*)": 3, 
    "if (.* < \\d*) param": 1, 
    "bool": 1, 
    "if (.* < .*)": 3, 
    "size_t": 2, 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "if (.*) param": 1, 
    "if (.* == 0)": 1, 
    "for (.*)": 1, 
    "ByteVector *": 1, 
    ".*\\-": 7, 
    "if (.* < .*) param": 1, 
    "if (.*)": 4, 
    "return": 1, 
    ".*\\+": 3, 
    "= .*\\+": 3
  }, 
  "fromFloat<double,_unsigned_long_long,_TagLib::Utils::(anonymous_namespace)::BigEndian>": {
    "double": 1, 
    "label": "gen", 
    "params": 1, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "operator-": {
    "__normal_iterator<char_*,_std::vector<char,_std::allocator<char>_>_> *": 1, 
    "params": 2, 
    ".*\\+ param": 1, 
    "difference_type": 1, 
    "char": 1, 
    ".*\\-": 1, 
    "= .*\\+ param": 1, 
    "return": 1, 
    ".*\\+": 1, 
    ".*\\- param": 1, 
    "= .*\\+": 1
  }, 
  "byteSwap": {
    "ulonglong": 1, 
    "params": 1, 
    "return": 1
  }, 
  "__uninit_copy<const_char_*,_char_*>": {
    "label": "init", 
    "params": 3, 
    "char *": 3, 
    "char": 1, 
    "return": 1
  }, 
  "__copy_move_b<char>": {
    "if (.* != 0)": 1, 
    "label": "copy", 
    "params": 3, 
    ".*\\+ param": 1, 
    "char *": 3, 
    "char": 1, 
    ".*\\-": 3, 
    "if (.*)": 1, 
    "return": 1, 
    ".*\\- param": 1, 
    ".*\\+": 2
  }, 
  "operator-=": {
    "params": 2, 
    ".*\\+ param": 1, 
    "difference_type": 1, 
    "char": 1, 
    ".*\\-": 1, 
    "= .*\\+ param": 1, 
    "return": 1, 
    ".*\\+": 1, 
    ".*\\- param": 1, 
    "= .*\\+": 1, 
    "__normal_iterator<const_char_*,_std::vector<char,_std::allocator<char>_>_> *": 1
  }, 
  "endsWithPartialMatch": {
    "for (.*) param": 1, 
    "params": 2, 
    "int": 1, 
    ".*\\+ param": 1, 
    "for (.*)": 1, 
    "ByteVector *": 2, 
    ".*\\-": 3, 
    "= .*\\+ param": 1, 
    "if (.*)": 2, 
    "return": 1, 
    ".*\\+": 3, 
    "= .*\\+": 2, 
    ".*\\- param": 1
  }, 
  "findVector<__gnu_cxx::__normal_iterator<const_char_*,_std::vector<char,_std::allocator<char>_>_>_>": {
    "if (.* < \\d*)": 1, 
    "if (.* < .*)": 1, 
    "break": 2, 
    "if (.* == 0) param": 1, 
    "__normal_iterator<const_char_*,_std::vector<char,_std::allocator<char>_>_>": 4, 
    "uint": 1, 
    "params": 6, 
    "int": 2, 
    ".*\\+ param": 1, 
    "if (.*) param": 1, 
    "if (.* == 0)": 2, 
    "while(.*)": 2, 
    ".*\\-": 3, 
    "if (.* < .*) param": 1, 
    "= .*\\+ param": 1, 
    "if (.*)": 6, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "copy<const_char_*,_char_*>": {
    "label": "copy", 
    "params": 3, 
    "char *": 3, 
    "char": 1, 
    "return": 1
  }, 
  "containsAt": {
    "if (.* < \\d*)": 2, 
    "if (.* < .*)": 2, 
    "uint": 3, 
    "params": 5, 
    ".*\\+ param": 1, 
    "if (.*) param": 1, 
    "ByteVector *": 2, 
    ".*\\-": 2, 
    "if (.* < .*) param": 1, 
    "= .*\\+ param": 1, 
    "if (.*)": 2, 
    "return": 1, 
    ".*\\+": 2, 
    ".*\\- param": 1, 
    "= .*\\+": 1
  }, 
  "fromFloat64BE": {
    "double": 1, 
    "params": 1, 
    "return": 1
  }, 
  "operator*": {
    "reverse_iterator<__gnu_cxx::__normal_iterator<const_char_*,_std::vector<char,_std::allocator<char>_>_>_> *": 1, 
    "params": 1, 
    ".*\\-": 1, 
    "return": 1, 
    ".*\\- param": 1
  }, 
  "rend": {
    "params": 1, 
    "ByteVector *": 1, 
    ".*\\-": 1, 
    "return": 1
  }, 
  "__fill_n_a<unsigned_int,_char>": {
    "label": "fill", 
    "uint": 1, 
    "params": 3, 
    ".*\\+ param": 1, 
    "char *": 2, 
    "return": 1, 
    ".*\\+": 2
  }, 
  "operator+": {
    "params": 2, 
    ".*\\+ param": 1, 
    "difference_type": 1, 
    "char": 1, 
    ".*\\-": 1, 
    "= .*\\+ param": 1, 
    "return": 1, 
    ".*\\+": 1, 
    ".*\\- param": 1, 
    "= .*\\+": 1, 
    "__normal_iterator<const_char_*,_std::vector<char,_std::allocator<char>_>_> *": 1
  }, 
  "__miter_base<const_char_*>": {
    "params": 1, 
    "char *": 1, 
    "char": 1, 
    "return": 1
  }, 
  "__niter_base<const_char_*>": {
    "params": 1, 
    "char *": 1, 
    "char": 1, 
    "return": 1
  }, 
  "__normal_iterator<char_*>": {
    "void": 1, 
    "__normal_iterator<char_*,_std::vector<char,_std::allocator<char>_>_> *": 1, 
    "params": 2, 
    "return;": 1, 
    ".*\\-": 1, 
    "return": 0, 
    ".*\\- param": 1, 
    "__normal_iterator<const_char_*,_std::vector<char,_std::allocator<char>_>_> *": 1
  }, 
  "operator-<char_*,_std::vector<char,_std::allocator<char>_>_>": {
    "__normal_iterator<char_*,_std::vector<char,_std::allocator<char>_>_> *": 2, 
    "params": 2, 
    ".*\\-": 2, 
    "return": 1
  }, 
  "fromNumber<unsigned_short>": {
    "bool": 1, 
    "params": 2, 
    "unsigned short": 1, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "operator-<const_char_*,_std::vector<char,_std::allocator<char>_>_>": {
    "params": 2, 
    ".*\\-": 2, 
    "return": 1, 
    "__normal_iterator<const_char_*,_std::vector<char,_std::allocator<char>_>_> *": 2
  }, 
  "~vector": {
    "void": 1, 
    "label": "~", 
    "params": 1, 
    "return;": 1, 
    "vector<char,_std::allocator<char>_> *": 1, 
    ".*\\-": 4, 
    "return": 0, 
    ".*\\- param": 1
  }, 
  "fromLongLong": {
    "bool": 1, 
    "params": 2, 
    "longlong": 1, 
    "return": 1
  }, 
  "ByteVector": {
    "void": 1, 
    "params": 2, 
    "return;": 1, 
    "char *": 1, 
    "ByteVector *": 1, 
    ".*\\-": 2, 
    "return": 0, 
    ".*\\- param": 1
  }, 
  "operator-<__gnu_cxx::__normal_iterator<const_char_*,_std::vector<char,_std::allocator<char>_>_>_>": {
    "reverse_iterator<__gnu_cxx::__normal_iterator<const_char_*,_std::vector<char,_std::allocator<char>_>_>_> *": 2, 
    "params": 2, 
    ".*\\-": 1, 
    "return": 1
  }, 
  "at": {
    "if (.* < \\d*)": 1, 
    "if (.* < \\d*) param": 1, 
    "if (.* < .*)": 1, 
    "uint": 1, 
    "params": 2, 
    ".*\\+ param": 1, 
    "if (.*) param": 1, 
    "char": 1, 
    "ByteVector *": 1, 
    ".*\\-": 1, 
    "if (.* < .*) param": 1, 
    "if (.*)": 1, 
    "return": 1, 
    ".*\\+": 1, 
    ".*\\- param": 1
  }, 
  "size": {
    "params": 1, 
    "vector<char,_std::allocator<char>_> *": 1, 
    ".*\\-": 2, 
    "return": 1, 
    ".*\\- param": 1
  }, 
  "allocate": {
    "if (.* < \\d*)": 1, 
    "size_type": 1, 
    "if (.* < .*)": 1, 
    "params": 3, 
    "int": 1, 
    "new_allocator<char> *": 1, 
    "if (.*) param": 1, 
    "void *": 1, 
    "if (.* < .*) param": 1, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "toHex": {
    "params": 1, 
    "for (.*)": 1, 
    "ByteVector *": 1, 
    "return": 1, 
    ".*\\+": 3, 
    "= .*\\+": 3
  }, 
  "__uninit_fill_n<char_*,_unsigned_int,_char>": {
    "label": "init", 
    "uint": 1, 
    "params": 3, 
    "char *": 2, 
    "char": 1, 
    "return": 1
  }, 
  "_M_range_initialize<const_char_*>": {
    "void": 1, 
    "label": "init", 
    "params": 3, 
    ".*\\+ param": 1, 
    "return;": 1, 
    "vector<char,_std::allocator<char>_> *": 1, 
    "char *": 2, 
    ".*\\-": 8, 
    "return": 0, 
    ".*\\- param": 1, 
    ".*\\+": 1
  }, 
  "endsWith": {
    "params": 2, 
    "ByteVector *": 2, 
    ".*\\-": 1, 
    "return": 1, 
    ".*\\- param": 1
  }, 
  "systemByteOrder": {
    "params": 0, 
    "return": 1
  }, 
  "toFloat32LE": {
    "size_t": 1, 
    "float": 1, 
    "params": 2, 
    "ByteVector *": 1, 
    "return": 1
  }, 
  "begin": {
    "params": 1, 
    "vector<char,_std::allocator<char>_> *": 1, 
    "return": 1
  }, 
  "operator!=<const_char_*,_std::vector<char,_std::allocator<char>_>_>": {
    "params": 2, 
    "return": 1, 
    "__normal_iterator<const_char_*,_std::vector<char,_std::allocator<char>_>_> *": 2
  }, 
  "operator[]": {
    "size_type": 1, 
    "params": 2, 
    ".*\\+ param": 1, 
    "vector<char,_std::allocator<char>_> *": 1, 
    ".*\\-": 1, 
    "return": 1, 
    ".*\\+": 1, 
    ".*\\- param": 1
  }, 
  "~_Vector_impl": {
    "void": 1, 
    "_Vector_impl *": 1, 
    "label": "~", 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "return": 0, 
    ".*\\- param": 1
  }, 
  "operator++": {
    "reverse_iterator<__gnu_cxx::__normal_iterator<const_char_*,_std::vector<char,_std::allocator<char>_>_>_> *": 1, 
    "params": 1, 
    "char": 1, 
    ".*\\-": 1, 
    "return": 1, 
    ".*\\- param": 1
  }, 
  "mid": {
    "uint": 2, 
    "params": 3, 
    "ByteVector *": 1, 
    ".*\\-": 1, 
    "return": 1
  }, 
  "toFloat<float,_unsigned_int,_TagLib::Utils::(anonymous_namespace)::LittleEndian>": {
    "if (.* < \\d*)": 1, 
    "if (.* < .*)": 1, 
    "size_t": 1, 
    "float": 1, 
    "params": 2, 
    "if (.*) param": 1, 
    "ByteVector *": 1, 
    ".*\\-": 2, 
    "if (.* < .*) param": 1, 
    "if (.*)": 2, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "toFloat<float,_unsigned_int,_TagLib::Utils::(anonymous_namespace)::BigEndian>": {
    "if (.* < \\d*)": 1, 
    "if (.* < .*)": 1, 
    "label": "gen", 
    "size_t": 1, 
    "float": 1, 
    "params": 2, 
    "if (.*) param": 1, 
    "ByteVector *": 1, 
    ".*\\-": 2, 
    "if (.* < .*) param": 1, 
    "if (.*)": 2, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "__copy_m<char>": {
    "if (.* != 0)": 1, 
    "label": "copy", 
    "params": 3, 
    ".*\\+ param": 1, 
    "char *": 3, 
    "char": 1, 
    ".*\\-": 1, 
    "if (.*)": 1, 
    "return": 1, 
    ".*\\- param": 1, 
    ".*\\+": 1
  }, 
  "__cxx_global_var_init": {
    "void": 1, 
    "label": "init", 
    "params": 0, 
    "return;": 1, 
    "return": 0
  }, 
  "__copy_move_a<false,_char_*,_char_*>": {
    "label": "copy", 
    "params": 3, 
    "char *": 3, 
    "char": 1, 
    "return": 1
  }, 
  "max<unsigned_int>": {
    "if (.* < \\d*)": 1, 
    "if (.* < \\d*) param": 1, 
    "if (.* < .*)": 1, 
    "uint *": 2, 
    "uint": 1, 
    "params": 2, 
    "int": 1, 
    "if (.*) param": 1, 
    "if (.* < .*) param": 1, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "__copy_move_a2<false,_const_char_*,_char_*>": {
    "label": "copy", 
    "params": 3, 
    "char *": 3, 
    "char": 1, 
    "return": 1
  }, 
  "operator+=": {
    "reverse_iterator<__gnu_cxx::__normal_iterator<const_char_*,_std::vector<char,_std::allocator<char>_>_>_> *": 1, 
    "params": 2, 
    "difference_type": 1, 
    "char": 1, 
    ".*\\-": 1, 
    "return": 1, 
    ".*\\- param": 1
  }, 
  "uninitialized_copy<char_*,_char_*>": {
    "label": "init", 
    "params": 3, 
    "char *": 3, 
    "char": 1, 
    "return": 1
  }, 
  "__uninitialized_move_a<char_*,_char_*,_std::allocator<char>_>": {
    "allocator<char> *": 1, 
    "label": "init", 
    "params": 4, 
    "char *": 3, 
    "char": 1, 
    "return": 1
  }, 
  "__miter_base<char_*>": {
    "params": 1, 
    "char *": 1, 
    "char": 1, 
    "return": 1
  }, 
  "toFloat80BE": {
    "double": 1, 
    "size_t": 1, 
    "params": 2, 
    "ByteVector *": 1, 
    "return": 1
  }, 
  "__uninitialized_move_if_noexcept_a<char_*,_char_*,_std::allocator<char>_>": {
    "allocator<char> *": 1, 
    "label": "init", 
    "params": 4, 
    "char *": 3, 
    "char": 1, 
    "return": 1
  }, 
  "vector": {
    "void": 1, 
    "size_type": 1, 
    "params": 4, 
    "value_type *": 1, 
    "allocator_type *": 1, 
    "return;": 1, 
    "vector<char,_std::allocator<char>_> *": 1, 
    ".*\\-": 1, 
    "return": 0, 
    ".*\\- param": 1
  }, 
  "rfind": {
    "if (.* != 0)": 1, 
    "if (.* != 0) param": 1, 
    "uint": 1, 
    "params": 4, 
    "int": 2, 
    "if (.*) param": 1, 
    "ByteVector *": 2, 
    ".*\\-": 6, 
    "if (.*)": 3, 
    "return": 1, 
    ".*\\+": 4
  }, 
  "toFloat<double,_unsigned_long_long,_TagLib::Utils::(anonymous_namespace)::BigEndian>": {
    "if (.* < \\d*)": 1, 
    "if (.* < .*)": 1, 
    "double": 1, 
    "label": "gen", 
    "size_t": 1, 
    "params": 2, 
    "if (.*) param": 1, 
    "ByteVector *": 1, 
    ".*\\-": 2, 
    "if (.* < .*) param": 1, 
    "if (.*)": 2, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "__clang_call_terminate": {
    "void": 1, 
    "params": 0, 
    "return": 0
  }, 
  "_S_max_size": {
    "params": 1, 
    "_Tp_alloc_type *": 1, 
    "return": 1
  }, 
  "toUInt": {
    "bool": 1, 
    "uint": 3, 
    "params": 4, 
    "int": 1, 
    "ByteVector *": 1, 
    "return": 1
  }, 
  "__copy_move_backward_a<false,_char_*,_char_*>": {
    "label": "copy", 
    "params": 3, 
    "char *": 3, 
    "char": 1, 
    "return": 1
  }, 
  "setData": {
    "label": "set", 
    "params": 2, 
    "char *": 1, 
    "ByteVector *": 1, 
    "return": 1
  }, 
  "toNumber<unsigned_short>": {
    "if (.* < \\d*)": 1, 
    "if (.* < \\d*) param": 1, 
    "bool": 1, 
    "if (.* < .*)": 1, 
    "size_t": 2, 
    "params": 4, 
    "if (.*) param": 1, 
    "if (.* == 0)": 1, 
    "for (.*)": 1, 
    "ByteVector *": 1, 
    ".*\\-": 3, 
    "if (.* < .*) param": 1, 
    "if (.*)": 2, 
    "return": 1, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "operator<<": {
    "break": 1, 
    "params": 2, 
    "ostream *": 1, 
    "while(.*)": 1, 
    "ByteVector *": 1, 
    "if (.*)": 1, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "_GLOBAL__sub_I_tbytevector.cpp": {
    "void": 1, 
    "params": 0, 
    "return;": 1, 
    "return": 0
  }, 
  "_M_deallocate": {
    "_Vector_base<char,_std::allocator<char>_> *": 1, 
    "pointer": 1, 
    "void": 1, 
    "size_t": 1, 
    "params": 3, 
    "if (.*) param": 1, 
    "return;": 1, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "rbegin": {
    "params": 1, 
    "vector<char,_std::allocator<char>_> *": 1, 
    "return": 1
  }, 
  "fromNumber<unsigned_long_long>": {
    "ulonglong": 1, 
    "bool": 1, 
    "params": 2, 
    "if (.*) param": 1, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "_M_create_storage": {
    "_Vector_base<char,_std::allocator<char>_> *": 1, 
    "void": 1, 
    "label": "create", 
    "size_t": 1, 
    "params": 2, 
    ".*\\+ param": 1, 
    "return;": 1, 
    ".*\\-": 3, 
    "= .*\\+ param": 1, 
    "return": 0, 
    ".*\\- param": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "fromNumber<unsigned_int>": {
    "bool": 1, 
    "uint": 1, 
    "params": 2, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "operator<<const_char_*,_std::vector<char,_std::allocator<char>_>_>": {
    "params": 2, 
    "return": 1, 
    "__normal_iterator<const_char_*,_std::vector<char,_std::allocator<char>_>_> *": 2
  }, 
  "__copy_move_backward_a2<false,_char_*,_char_*>": {
    "label": "copy", 
    "params": 3, 
    "char *": 3, 
    "char": 1, 
    "return": 1
  }, 
  "isNull": {
    "params": 1, 
    "ByteVector *": 1, 
    ".*\\-": 1, 
    "return": 1, 
    ".*\\- param": 1
  }, 
  "uninitialized_fill_n<char_*,_unsigned_int,_char>": {
    "label": "init", 
    "uint": 1, 
    "params": 3, 
    "char *": 2, 
    "char": 1, 
    "return": 1
  }, 
  "fromFloat<double,_unsigned_long_long,_TagLib::Utils::(anonymous_namespace)::LittleEndian>": {
    "double": 1, 
    "params": 1, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "toFloat<double,_unsigned_long_long,_TagLib::Utils::(anonymous_namespace)::LittleEndian>": {
    "if (.* < \\d*)": 1, 
    "if (.* < .*)": 1, 
    "double": 1, 
    "size_t": 1, 
    "params": 2, 
    "if (.*) param": 1, 
    "ByteVector *": 1, 
    ".*\\-": 2, 
    "if (.* < .*) param": 1, 
    "if (.*)": 2, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "data": {
    "params": 1, 
    "if (.* == 0)": 1, 
    "char": 1, 
    "ByteVector *": 1, 
    ".*\\-": 1, 
    "if (.*)": 1, 
    "return": 1, 
    ".*\\- param": 1
  }, 
  "__iterator_category<const_char_*>": {
    "params": 1, 
    "char * *": 1, 
    "return": 1
  }, 
  "replace": {
    "while(.*) param": 1, 
    "params": 3, 
    ".*\\+ param": 1, 
    "if (.*) param": 1, 
    "while(.*)": 3, 
    "memcpy(.*)": 4, 
    "ByteVector *": 3, 
    ".*\\-": 7, 
    "= .*\\+ param": 1, 
    "if (.*)": 3, 
    "return": 1, 
    ".*\\+": 11, 
    "= .*\\+": 8, 
    ".*\\- param": 1
  }, 
  "ByteVectorPrivate": {
    "void": 1, 
    "ByteVectorPrivate *": 1, 
    "uint": 1, 
    "params": 3, 
    ".*\\+ param": 1, 
    "return;": 1, 
    "char *": 1, 
    ".*\\-": 4, 
    "= .*\\+ param": 1, 
    "return": 0, 
    ".*\\- param": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "_Vector_base": {
    "_Vector_base<char,_std::allocator<char>_> *": 1, 
    "void": 1, 
    "params": 2, 
    "allocator_type *": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "return": 0, 
    ".*\\- param": 1
  }, 
  "fromCString": {
    "uint": 1, 
    "params": 2, 
    "if (.* == 0)": 1, 
    "char *": 1, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "_M_check_len": {
    "if (.* < \\d*)": 1, 
    "size_type": 1, 
    "if (.* < .*)": 1, 
    "label": "check", 
    "params": 3, 
    "if (.*) param": 1, 
    "vector<char,_std::allocator<char>_> *": 1, 
    "char *": 1, 
    ".*\\-": 1, 
    "if (.*)": 2, 
    "return": 1, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "swap<unsigned_char>": {
    "void": 1, 
    "uchar *": 2, 
    "params": 2, 
    "return;": 1, 
    "return": 0
  }, 
  "fill_n<char_*,_unsigned_int,_char>": {
    "label": "fill", 
    "uint": 1, 
    "params": 3, 
    "char *": 2, 
    "char": 1, 
    "return": 1
  }, 
  "find": {
    "uint": 1, 
    "params": 4, 
    "int": 2, 
    "ByteVector *": 1, 
    "char": 1, 
    "return": 1
  }, 
  "toLongLong": {
    "bool": 1, 
    "uint": 1, 
    "params": 3, 
    "ByteVector *": 1, 
    "return": 1
  }, 
  "toFloat80LE": {
    "double": 1, 
    "size_t": 1, 
    "params": 2, 
    "ByteVector *": 1, 
    "return": 1
  }, 
  "~_Vector_base": {
    "_Vector_base<char,_std::allocator<char>_> *": 1, 
    "void": 1, 
    "label": "~", 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 3, 
    "return": 0, 
    ".*\\- param": 1
  }, 
  "_M_fill_initialize": {
    "void": 1, 
    "size_type": 1, 
    "label": "init", 
    "params": 3, 
    "value_type *": 1, 
    "return;": 1, 
    "vector<char,_std::allocator<char>_> *": 1, 
    ".*\\-": 3, 
    "return": 0, 
    ".*\\- param": 1
  }, 
  "findChar<__gnu_cxx::__normal_iterator<const_char_*,_std::vector<char,_std::allocator<char>_>_>_>": {
    "if (.* != 0)": 1, 
    "if (.* != 0) param": 1, 
    "while(.*) param": 1, 
    "__normal_iterator<const_char_*,_std::vector<char,_std::allocator<char>_>_>": 2, 
    "uint": 1, 
    "params": 5, 
    "int": 2, 
    ".*\\+ param": 1, 
    "if (.*) param": 1, 
    "while(.*)": 1, 
    "char": 1, 
    ".*\\-": 1, 
    "if (.*)": 2, 
    "return": 1, 
    ".*\\+": 1
  }, 
  "toNumber<unsigned_int>": {
    "if (.* < \\d*)": 1, 
    "if (.* < \\d*) param": 1, 
    "bool": 1, 
    "if (.* < .*)": 1, 
    "size_t": 2, 
    "uint": 1, 
    "params": 4, 
    "int": 1, 
    "if (.*) param": 1, 
    "if (.* == 0)": 1, 
    "for (.*)": 1, 
    "ByteVector *": 1, 
    ".*\\-": 3, 
    "if (.* < .*) param": 1, 
    "if (.*)": 2, 
    "return": 1, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "_Destroy<char_*>": {
    "void": 1, 
    "label": "destroy", 
    "params": 2, 
    "return;": 1, 
    "char *": 2, 
    "return": 0
  }, 
  "__fill_a<char>": {
    "if (.* != 0)": 1, 
    "if (.* != 0) param": 1, 
    "memset(.*) param": 1, 
    "label": "fill", 
    "params": 3, 
    "if (.*) param": 1, 
    "memset(.*)": 1, 
    "return;": 1, 
    "char *": 3, 
    ".*\\-": 2, 
    "if (.*)": 1, 
    "return": 1, 
    ".*\\- param": 1
  }, 
  "toBase64": {
    "if (.* < \\d*)": 1, 
    "if (.* < .*)": 1, 
    "params": 1, 
    ".*\\+ param": 1, 
    "for (.*)": 1, 
    "ByteVector *": 1, 
    ".*\\-": 2, 
    "if (.*)": 3, 
    "return": 1, 
    ".*\\+": 14, 
    ".*\\- param": 1, 
    "= .*\\+": 13
  }, 
  "operator!=": {
    "params": 2, 
    "char *": 1, 
    "ByteVector *": 1, 
    "return": 1
  }, 
  "fromFloat32LE": {
    "float": 1, 
    "params": 1, 
    "return": 1
  }, 
  "_M_fill_insert": {
    "if (.* != 0)": 1, 
    "if (.* != 0) param": 1, 
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "size_type": 1, 
    "if (.* < .*)": 1, 
    "label": "fill", 
    "params": 4, 
    "value_type *": 1, 
    "if (.*) param": 1, 
    "iterator": 1, 
    "return;": 1, 
    "vector<char,_std::allocator<char>_> *": 1, 
    ".*\\-": 35, 
    "if (.*)": 3, 
    "return": 0, 
    ".*\\- param": 1, 
    ".*\\+": 6, 
    "= .*\\+": 2
  }, 
  "swap": {
    "void": 1, 
    "params": 2, 
    "return;": 1, 
    "ByteVector *": 2, 
    ".*\\-": 1, 
    "return": 0, 
    ".*\\- param": 1
  }, 
  "toFloat64BE": {
    "double": 1, 
    "size_t": 1, 
    "params": 2, 
    "ByteVector *": 1, 
    "return": 1
  }, 
  "uninitialized_copy<const_char_*,_char_*>": {
    "label": "init", 
    "params": 3, 
    "char *": 3, 
    "char": 1, 
    "return": 1
  }, 
  "__uninitialized_copy_a<char_*,_char_*,_char>": {
    "allocator<char> *": 1, 
    "label": "init", 
    "params": 4, 
    "char *": 3, 
    "char": 1, 
    "return": 1
  }, 
  "__destroy<char_*>": {
    "void": 1, 
    "label": "destroy", 
    "params": 2, 
    "return;": 1, 
    "char *": 2, 
    "return": 0
  }, 
  "max_size": {
    "params": 1, 
    "vector<char,_std::allocator<char>_> *": 1, 
    ".*\\-": 1, 
    "return": 1, 
    ".*\\- param": 1
  }, 
  "operator!=<char_*,_std::vector<char,_std::allocator<char>_>_>": {
    "__normal_iterator<char_*,_std::vector<char,_std::allocator<char>_>_> *": 2, 
    "params": 2, 
    "return": 1
  }, 
  "__copy_move_a<false,_const_char_*,_char_*>": {
    "label": "copy", 
    "params": 3, 
    "char *": 3, 
    "char": 1, 
    "return": 1
  }, 
  "operator==<const_char_*,_std::vector<char,_std::allocator<char>_>_>": {
    "params": 2, 
    "return": 1, 
    "__normal_iterator<const_char_*,_std::vector<char,_std::allocator<char>_>_> *": 2
  }, 
  "__uninitialized_copy_a<const_char_*,_char_*,_char>": {
    "allocator<char> *": 1, 
    "label": "init", 
    "params": 4, 
    "char *": 3, 
    "char": 1, 
    "return": 1
  }, 
  "_Vector_impl": {
    "void": 1, 
    "_Vector_impl *": 1, 
    "params": 2, 
    "return;": 1, 
    "_Tp_alloc_type *": 1, 
    "return": 0
  }, 
  "~ByteVector": {
    "void": 1, 
    "delete(.*)": 1, 
    "label": "~", 
    "params": 1, 
    "delete(.*) param": 1, 
    "return;": 1, 
    "ByteVector *": 1, 
    "return": 0
  }, 
  "toShort": {
    "bool": 1, 
    "uint": 1, 
    "params": 3, 
    "ByteVector *": 1, 
    "return": 1
  }, 
  "findChar<std::reverse_iterator<__gnu_cxx::__normal_iterator<const_char_*,_std::vector<char,_std::allocator<char>_>_>_>_>": {
    "if (.* != 0)": 1, 
    "if (.* != 0) param": 1, 
    "uint": 1, 
    "params": 5, 
    "int": 2, 
    ".*\\+ param": 1, 
    "if (.*) param": 1, 
    "while(.*)": 1, 
    "char": 1, 
    ".*\\-": 1, 
    "if (.*)": 2, 
    "return": 1, 
    "reverse_iterator<__gnu_cxx::__normal_iterator<const_char_*,_std::vector<char,_std::allocator<char>_>_>_>": 2, 
    ".*\\+": 1
  }, 
  "fromFloat64LE": {
    "double": 1, 
    "params": 1, 
    "return": 1
  }, 
  "swap<TagLib::ByteVector::ByteVectorPrivate_*>": {
    "void": 1, 
    "ByteVectorPrivate * *": 2, 
    "params": 2, 
    "return;": 1, 
    "return": 0
  }, 
  "__niter_base<char_*>": {
    "params": 1, 
    "char *": 1, 
    "char": 1, 
    "return": 1
  }, 
  "_M_erase_at_end": {
    "pointer": 1, 
    "void": 1, 
    "params": 2, 
    "if (.*) param": 1, 
    "return;": 1, 
    "vector<char,_std::allocator<char>_> *": 1, 
    ".*\\-": 4, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\- param": 1
  }, 
  "toUShort": {
    "bool": 1, 
    "uint": 1, 
    "params": 3, 
    "ByteVector *": 1, 
    "return": 1
  }, 
  "operator<<__gnu_cxx::__normal_iterator<const_char_*,_std::vector<char,_std::allocator<char>_>_>_>": {
    "reverse_iterator<__gnu_cxx::__normal_iterator<const_char_*,_std::vector<char,_std::allocator<char>_>_>_> *": 2, 
    "params": 2, 
    "return": 1
  }, 
  "fromUInt": {
    "bool": 1, 
    "uint": 1, 
    "params": 2, 
    "return": 1
  }, 
  "__copy_move_a2<false,_char_*,_char_*>": {
    "label": "copy", 
    "params": 3, 
    "char *": 3, 
    "char": 1, 
    "return": 1
  }, 
  "__uninitialized_fill_n_a<char_*,_unsigned_int,_char,_char>": {
    "allocator<char> *": 1, 
    "label": "init", 
    "uint": 1, 
    "params": 4, 
    "char *": 2, 
    "char": 1, 
    "return": 1
  }, 
  "__niter_wrap<char_*>": {
    "params": 2, 
    "char * *": 1, 
    "char *": 1, 
    "char": 1, 
    "return": 1
  }, 
  "fromShort": {
    "bool": 1, 
    "params": 2, 
    "short": 1, 
    "return": 1
  }, 
  "_Vector_impl_data": {
    "void": 1, 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 3, 
    "return": 0, 
    ".*\\- param": 1, 
    "_Vector_impl_data *": 1
  }, 
  "__cxx_global_var_init.1": {
    "void": 1, 
    "label": "init", 
    "params": 0, 
    "return;": 1, 
    "return": 0
  }, 
  "operator==<__gnu_cxx::__normal_iterator<const_char_*,_std::vector<char,_std::allocator<char>_>_>_>": {
    "reverse_iterator<__gnu_cxx::__normal_iterator<const_char_*,_std::vector<char,_std::allocator<char>_>_>_> *": 2, 
    "params": 2, 
    "return": 1
  }, 
  "distance<const_char_*>": {
    "params": 2, 
    "char *": 2, 
    "return": 1
  }, 
  "_M_initialize_dispatch<const_char_*>": {
    "void": 1, 
    "label": "init", 
    "params": 3, 
    "return;": 1, 
    "vector<char,_std::allocator<char>_> *": 1, 
    "char *": 2, 
    "return": 0
  }, 
  "checksum": {
    "break": 1, 
    "label": "check", 
    "uint": 1, 
    "params": 1, 
    "int": 1, 
    "while(.*)": 1, 
    "ByteVector *": 1, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "end": {
    "params": 1, 
    "vector<char,_std::allocator<char>_> *": 1, 
    ".*\\-": 1, 
    "return": 1, 
    ".*\\- param": 1
  }, 
  "toFloat64LE": {
    "double": 1, 
    "size_t": 1, 
    "params": 2, 
    "ByteVector *": 1, 
    "return": 1
  }, 
  "copy<char_*,_char_*>": {
    "label": "copy", 
    "params": 3, 
    "char *": 3, 
    "char": 1, 
    "return": 1
  }, 
  "min<unsigned_int>": {
    "if (.* < \\d*)": 1, 
    "if (.* < \\d*) param": 1, 
    "if (.* < .*)": 1, 
    "uint *": 2, 
    "uint": 1, 
    "params": 2, 
    "int": 1, 
    "if (.*) param": 1, 
    "if (.* < .*) param": 1, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "copy_backward<char_*,_char_*>": {
    "label": "copy", 
    "params": 3, 
    "char *": 3, 
    "char": 1, 
    "return": 1
  }, 
  "toFloat80<TagLib::Utils::(anonymous_namespace)::LittleEndian>": {
    "if (.* < \\d*)": 1, 
    "if (.* < .*)": 1, 
    "double": 1, 
    "size_t": 1, 
    "params": 2, 
    "if (.*) param": 1, 
    "if (.* == 0)": 3, 
    "ByteVector *": 1, 
    ".*\\-": 5, 
    "if (.* < .*) param": 1, 
    "if (.*)": 4, 
    "return": 1, 
    ".*\\+": 4, 
    "= .*\\+": 2
  }, 
  "clear": {
    "params": 1, 
    "ByteVector *": 1, 
    "return": 1
  }, 
  "isEmpty": {
    "params": 1, 
    "ByteVector *": 1, 
    ".*\\-": 1, 
    "return": 1, 
    ".*\\- param": 1
  }, 
  "toFloat80<TagLib::Utils::(anonymous_namespace)::BigEndian>": {
    "if (.* < \\d*)": 1, 
    "if (.* < .*)": 1, 
    "double": 1, 
    "label": "gen", 
    "size_t": 1, 
    "params": 2, 
    "if (.*) param": 1, 
    "if (.* == 0)": 3, 
    "ByteVector *": 1, 
    ".*\\-": 5, 
    "if (.* < .*) param": 1, 
    "if (.*)": 4, 
    "return": 1, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "_S_check_init_len": {
    "if (.* < \\d*)": 1, 
    "size_type": 1, 
    "if (.* < .*)": 1, 
    "label": "init", 
    "params": 2, 
    "if (.*) param": 1, 
    "allocator_type *": 1, 
    "if (.* < .*) param": 1, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "_M_allocate": {
    "_Vector_base<char,_std::allocator<char>_> *": 1, 
    "if (.* == 0) param": 1, 
    "size_t": 1, 
    "params": 2, 
    "int": 1, 
    "if (.*) param": 1, 
    "if (.* == 0)": 1, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "vector<const_char_*>": {
    "void": 1, 
    "params": 4, 
    "allocator_type *": 1, 
    "return;": 1, 
    "vector<char,_std::allocator<char>_> *": 1, 
    "char *": 2, 
    ".*\\-": 1, 
    "return": 0, 
    ".*\\- param": 1
  }, 
  "__distance<const_char_*>": {
    "params": 2, 
    "char *": 2, 
    ".*\\-": 1, 
    "return": 1, 
    ".*\\- param": 1
  }, 
  "_M_get_Tp_allocator": {
    "_Vector_base<char,_std::allocator<char>_> *": 1, 
    "label": "get", 
    "params": 1, 
    "return": 1
  }, 
  "fromFloat<float,_unsigned_int,_TagLib::Utils::(anonymous_namespace)::LittleEndian>": {
    "float": 1, 
    "params": 1, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "detach": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "if (.* < .*)": 1, 
    "params": 1, 
    "return;": 1, 
    "ByteVector *": 1, 
    ".*\\-": 2, 
    "if (.*)": 2, 
    "return": 0, 
    ".*\\- param": 1, 
    ".*\\+": 1
  }, 
  "resize": {
    "if (.* < \\d*)": 2, 
    "value_type": 1, 
    "void": 1, 
    "size_type": 1, 
    "if (.* < .*)": 2, 
    "params": 3, 
    "if (.*) param": 1, 
    "return;": 1, 
    "vector<char,_std::allocator<char>_> *": 1, 
    ".*\\-": 2, 
    "if (.* < .*) param": 1, 
    "if (.*)": 2, 
    "return": 0, 
    ".*\\- param": 1, 
    ".*\\+": 1
  }, 
  "front": {
    "params": 1, 
    "vector<char,_std::allocator<char>_> *": 1, 
    "return": 1
  }, 
  "__normal_iterator": {
    "void": 1, 
    "__normal_iterator<char_*,_std::vector<char,_std::allocator<char>_>_> *": 1, 
    "params": 2, 
    "char * *": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "return": 0, 
    ".*\\- param": 1
  }, 
  "fromFloat32BE": {
    "float": 1, 
    "params": 1, 
    "return": 1
  }, 
  "_Destroy<char_*,_char>": {
    "void": 1, 
    "allocator<char> *": 1, 
    "label": "destroy", 
    "params": 3, 
    "return;": 1, 
    "char *": 2, 
    "return": 0
  }, 
  "append": {
    "params": 2, 
    ".*\\+ param": 1, 
    "ByteVector *": 1, 
    "char": 1, 
    "return": 1, 
    ".*\\+": 1
  }, 
  "startsWith": {
    "params": 2, 
    "ByteVector *": 2, 
    "return": 1
  }, 
  "base": {
    "__normal_iterator<char_*,_std::vector<char,_std::allocator<char>_>_> *": 1, 
    "params": 1, 
    "char": 1, 
    ".*\\-": 1, 
    "return": 1, 
    ".*\\- param": 1
  }
}