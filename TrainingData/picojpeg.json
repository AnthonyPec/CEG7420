{
  "getBits": {
    "if (.* < \\d*)": 2, 
    "if (.* < .*)": 2, 
    "label": "get", 
    "uint": 1, 
    "params": 0, 
    "int": 1, 
    ".*\\-": 6, 
    "if (.*)": 2, 
    "return": 1
  }, 
  "getBits1": {
    "label": "get", 
    "params": 0, 
    "undefined": 1, 
    "return": 1
  }, 
  "getBits2": {
    "label": "get", 
    "params": 0, 
    "undefined": 1, 
    "return": 1
  }, 
  "skipVariableMarker": {
    "if (.* < \\d*)": 1, 
    "if (.* < .*)": 1, 
    "params": 0, 
    "undefined": 1, 
    "for (.*)": 1, 
    ".*\\-": 1, 
    "if (.*)": 1, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "upsampleCb": {
    "void": 1, 
    "params": 0, 
    "return;": 1, 
    "for (.*)": 2, 
    ".*\\-": 2, 
    "return": 0, 
    ".*\\+": 13, 
    "= .*\\+": 13
  }, 
  "imul_b2": {
    "params": 0, 
    ".*\\+ 0x.*": 1, 
    "int": 1, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "idctRows": {
    "void": 1, 
    "params": 0, 
    ".*\\+ 0x.*": 11, 
    "return;": 1, 
    "for (.*)": 1, 
    ".*\\-": 16, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\+": 34, 
    "= .*\\+": 18
  }, 
  "imul_b5": {
    "params": 0, 
    ".*\\+ 0x.*": 1, 
    "int": 1, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "imul_b4": {
    "params": 0, 
    ".*\\+ 0x.*": 1, 
    "int": 1, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "fillInBuf": {
    "void": 1, 
    "label": "fill", 
    "params": 0, 
    "return;": 1, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "upsampleCrH": {
    "void": 1, 
    "params": 0, 
    "return;": 1, 
    "for (.*)": 2, 
    ".*\\-": 2, 
    "return": 0, 
    ".*\\+": 11, 
    "= .*\\+": 11
  }, 
  "getMaxHuffCodes": {
    "if (.* < \\d*)": 1, 
    "if (.* < .*)": 1, 
    "label": "get", 
    "params": 0, 
    "undefined": 1, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "huffDecode": {
    "if (.* != 0)": 1, 
    "break": 1, 
    "params": 0, 
    ".*\\+ 0x.*": 2, 
    "undefined": 1, 
    "if (.* == 0)": 1, 
    "while(.*)": 1, 
    "return 0": 1, 
    ".*\\-": 1, 
    "if (.*)": 2, 
    "return": 1, 
    ".*\\+": 5, 
    "= .*\\+": 2
  }, 
  "readDHTMarker": {
    "if (.* < \\d*)": 4, 
    "if (.* < .*)": 4, 
    "label": "read", 
    "params": 0, 
    ".*\\+ 0x.*": 2, 
    "undefined": 1, 
    "while(.*)": 1, 
    "for (.*)": 2, 
    ".*\\-": 2, 
    "if (.*)": 4, 
    "return": 1, 
    ".*\\+": 7, 
    "= .*\\+": 5
  }, 
  "readDRIMarker": {
    "label": "read", 
    "params": 0, 
    "undefined": 1, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "getExtendOffset": {
    "break": 16, 
    "label": "get", 
    "params": 0, 
    "int": 1, 
    ".*\\-": 15, 
    "return": 1, 
    "case": 16
  }, 
  "upsampleCr": {
    "void": 1, 
    "params": 0, 
    "return;": 1, 
    "for (.*)": 2, 
    ".*\\-": 2, 
    "return": 0, 
    ".*\\+": 13, 
    "= .*\\+": 13
  }, 
  "huffExtend": {
    "if (.* < \\d*)": 1, 
    "if (.* < .*)": 1, 
    "params": 0, 
    "int": 1, 
    "if (.*)": 1, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "arithmeticRightShift8L": {
    "if (.* < \\d*)": 1, 
    "if (.* < .*)": 1, 
    "uint": 1, 
    "params": 0, 
    "int": 1, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "readDQTMarker": {
    "if (.* < \\d*)": 3, 
    "if (.* != 0)": 1, 
    "if (.* < .*)": 3, 
    "label": "read", 
    "params": 0, 
    "undefined": 1, 
    "if (.* == 0)": 2, 
    "while(.*)": 1, 
    "return 0": 1, 
    "for (.*)": 1, 
    ".*\\-": 1, 
    "if (.*)": 8, 
    "return": 1, 
    ".*\\+": 4, 
    "= .*\\+": 2
  }, 
  "clamp": {
    "if (.* < \\d*)": 3, 
    "if (.* < .*)": 3, 
    "params": 0, 
    "undefined": 1, 
    "return 0": 2, 
    "if (.*)": 3, 
    "return": 1
  }, 
  "pjpeg_decode_mcu": {
    "params": 0, 
    "if (.* == 0)": 1, 
    "char": 1, 
    ".*\\-": 1, 
    "if (.*)": 4, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "stuffChar": {
    "void": 1, 
    "params": 0, 
    "return;": 1, 
    ".*\\-": 1, 
    "return": 0, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "init": {
    "label": "init", 
    "params": 1, 
    "int": 1, 
    "return 0": 1, 
    "EVP_PKEY_CTX *": 1, 
    "return": 1
  }, 
  "copyY": {
    "void": 1, 
    "label": "copy", 
    "params": 0, 
    "return;": 1, 
    "for (.*)": 1, 
    ".*\\-": 1, 
    "return": 0, 
    ".*\\+": 8, 
    "= .*\\+": 8
  }, 
  "checkQuantTables": {
    "break": 1, 
    "label": "check", 
    "params": 0, 
    "undefined": 1, 
    "if (.* == 0)": 1, 
    "while(.*)": 1, 
    "return 0": 2, 
    "if (.*)": 3, 
    "return": 1, 
    ".*\\+": 2, 
    "= .*\\+": 1
  }, 
  "subAndClamp": {
    "if (.* < \\d*)": 3, 
    "if (.* < .*)": 3, 
    "params": 0, 
    "undefined": 1, 
    "return 0": 2, 
    ".*\\-": 1, 
    "if (.*)": 3, 
    "return": 1
  }, 
  "convertCr": {
    "void": 1, 
    "label": "convert", 
    "params": 0, 
    "return;": 1, 
    "for (.*)": 1, 
    ".*\\-": 3, 
    "return": 0, 
    ".*\\+": 9, 
    "= .*\\+": 7
  }, 
  "createWinogradQuant": {
    "void": 1, 
    "label": "create", 
    "params": 0, 
    "return;": 1, 
    "for (.*)": 1, 
    "return": 0, 
    ".*\\+": 4, 
    "= .*\\+": 1
  }, 
  "replicateSignBit16": {
    "break": 16, 
    "params": 0, 
    "int": 1, 
    ".*\\-": 16, 
    "return": 1, 
    "case": 16
  }, 
  "pjpeg_decode_init": {
    "label": "init", 
    "params": 0, 
    "char": 1, 
    "if (.*)": 8, 
    "return": 1
  }, 
  "transformBlock": {
    "void": 1, 
    "break": 15, 
    "label": "transform", 
    "params": 0, 
    "return;": 1, 
    "if (.*)": 3, 
    "return": 0, 
    "case": 19
  }, 
  "decodeNextMCU": {
    "if (.* != 0)": 8, 
    "if (.* < \\d*)": 4, 
    "break": 2, 
    "if (.* < .*)": 4, 
    "params": 0, 
    ".*\\+ 0x.*": 3, 
    "if (.* == 0)": 3, 
    "while(.*)": 2, 
    "for (.*)": 4, 
    "char": 1, 
    ".*\\-": 4, 
    "if (.*)": 24, 
    "return": 1, 
    ".*\\+": 26, 
    "= .*\\+": 14
  }, 
  "getHuffTable": {
    "break": 4, 
    "label": "get", 
    "params": 0, 
    "undefined": 1, 
    "return": 1, 
    "case": 4
  }, 
  "getChar": {
    "label": "get", 
    "params": 0, 
    "undefined": 1, 
    "if (.* == 0)": 1, 
    ".*\\-": 1, 
    "if (.*)": 2, 
    "return": 1, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "readSOSMarker": {
    "if (.* != 0)": 1, 
    "label": "read", 
    "params": 0, 
    "undefined": 1, 
    "return 0": 1, 
    "for (.*)": 3, 
    ".*\\-": 3, 
    "if (.*)": 2, 
    "return": 1, 
    ".*\\+": 10, 
    "= .*\\+": 7
  }, 
  "huffCreate": {
    "void": 1, 
    "label": "create", 
    "params": 0, 
    ".*\\+ 0x.*": 4, 
    "if (.* == 0)": 1, 
    "return;": 1, 
    "while(.*)": 1, 
    ".*\\-": 1, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\+": 10, 
    "= .*\\+": 5
  }, 
  "readSOFMarker": {
    "if (.* < \\d*)": 4, 
    "if (.* < .*)": 4, 
    "label": "read", 
    "params": 0, 
    "undefined": 1, 
    "if (.* == 0)": 2, 
    "return 0": 1, 
    "for (.*)": 1, 
    "if (.*)": 6, 
    "return": 1, 
    ".*\\+": 8, 
    "= .*\\+": 2
  }, 
  "arithmeticRightShiftN16": {
    "if (.* < \\d*)": 1, 
    "if (.* < .*)": 1, 
    "params": 0, 
    "int": 1, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "getExtendTest": {
    "break": 16, 
    "label": "get", 
    "params": 0, 
    "undefined": 1, 
    "return": 1, 
    "case": 16
  }, 
  "fixInBuffer": {
    "void": 1, 
    "params": 0, 
    "return;": 1, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "locateSOFMarker": {
    "break": 3, 
    "params": 0, 
    "char": 1, 
    "if (.*)": 2, 
    "return": 1, 
    "case": 4
  }, 
  "addAndClamp": {
    "if (.* < \\d*)": 3, 
    "if (.* < .*)": 3, 
    "label": "add", 
    "params": 0, 
    "undefined": 1, 
    "return 0": 2, 
    "if (.*)": 3, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "nextMarker": {
    "params": 0, 
    "while(.*)": 3, 
    "char": 1, 
    ".*\\-": 2, 
    "return": 1
  }, 
  "initScan": {
    "if (.* != 0)": 1, 
    "label": "init", 
    "params": 0, 
    "char": 1, 
    "if (.*)": 4, 
    "return": 1
  }, 
  "convertCb": {
    "void": 1, 
    "label": "convert", 
    "params": 0, 
    "return;": 1, 
    "for (.*)": 1, 
    ".*\\-": 3, 
    "return": 0, 
    ".*\\+": 8, 
    "= .*\\+": 7
  }, 
  "getHuffVal": {
    "break": 4, 
    "label": "get", 
    "params": 0, 
    "undefined": 1, 
    "return": 1, 
    "case": 4
  }, 
  "checkHuffTables": {
    "break": 1, 
    "label": "check", 
    "params": 0, 
    "undefined": 1, 
    "while(.*)": 1, 
    "return 0": 2, 
    "if (.*)": 2, 
    "return": 1, 
    ".*\\+": 3, 
    "= .*\\+": 1
  }, 
  "imul_b1_b3": {
    "params": 0, 
    ".*\\+ 0x.*": 1, 
    "int": 1, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "getBit": {
    "label": "get", 
    "params": 0, 
    ".*\\-": 1, 
    "if (.*)": 1, 
    "return": 1, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "idctCols": {
    "void": 1, 
    "params": 0, 
    ".*\\+ 0x.*": 45, 
    "return;": 1, 
    "for (.*)": 1, 
    ".*\\-": 16, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\+": 51, 
    "= .*\\+": 32
  }, 
  "locateSOIMarker": {
    "params": 0, 
    "undefined": 1, 
    "if (.* == 0)": 1, 
    "return 0": 3, 
    "while(.*)": 2, 
    ".*\\-": 6, 
    "if (.*)": 4, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "locateSOSMarker": {
    "params": 0, 
    "char": 1, 
    ".*\\-": 2, 
    "if (.*)": 3, 
    "return": 1
  }, 
  "transformBlockReduce": {
    "void": 1, 
    "break": 15, 
    "label": "transform", 
    "params": 0, 
    ".*\\+ 0x.*": 2, 
    "return;": 1, 
    ".*\\-": 16, 
    "if (.*)": 3, 
    "return": 0, 
    ".*\\+": 18, 
    "= .*\\+": 16, 
    "case": 19
  }, 
  "upsampleCbV": {
    "void": 1, 
    "params": 0, 
    "return;": 1, 
    "for (.*)": 2, 
    ".*\\-": 2, 
    "return": 0, 
    ".*\\+": 12, 
    "= .*\\+": 12
  }, 
  "getOctet": {
    "label": "get", 
    "params": 0, 
    "char": 1, 
    ".*\\-": 1, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "upsampleCbH": {
    "void": 1, 
    "params": 0, 
    "return;": 1, 
    "for (.*)": 2, 
    ".*\\-": 2, 
    "return": 0, 
    ".*\\+": 11, 
    "= .*\\+": 11
  }, 
  "processRestart": {
    "label": "process", 
    "params": 0, 
    ".*\\+ 0x.*": 1, 
    "undefined": 1, 
    "if (.* == 0)": 2, 
    "while(.*)": 2, 
    ".*\\-": 3, 
    "if (.*)": 3, 
    "return": 1, 
    ".*\\+": 4, 
    "= .*\\+": 4
  }, 
  "processMarkers": {
    "break": 3, 
    "label": "process", 
    "params": 0, 
    "undefined": 1, 
    "return 0": 3, 
    "while(.*)": 1, 
    "return": 1, 
    "case": 30
  }, 
  "initFrame": {
    "label": "init", 
    "params": 0, 
    "undefined": 1, 
    "return 0": 5, 
    ".*\\-": 2, 
    "if (.*)": 10, 
    "return": 1, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "upsampleCrV": {
    "void": 1, 
    "params": 0, 
    "return;": 1, 
    "for (.*)": 2, 
    ".*\\-": 2, 
    "return": 0, 
    ".*\\+": 12, 
    "= .*\\+": 12
  }
}