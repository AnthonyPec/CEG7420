{
  "write_vpAg_chunk": {
    "if (.* != 0)": 1, 
    "fprintf(.*)": 1, 
    "void": 1, 
    "string": [
      " vpAg = %lu x %lu, units = %d\\n"
    ], 
    "label": "write", 
    "params": 1, 
    "return;": 1, 
    "printf(.*)": 1, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "pngtest_warning": {
    "fprintf(.*)": 1, 
    "void": 1, 
    "string": [
      "UNKNOWN (ERROR!)", 
      "\\n%s: libpng warning: %s\\n"
    ], 
    "label": "test", 
    "params": 2, 
    "return;": 1, 
    "char": 1, 
    "printf(.*)": 1, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "main": {
    "char**": 1, 
    "fprintf(.*)": 31, 
    "if (.* != 0)": 3, 
    "if (.* < \\d*)": 1, 
    "string": [
      "\\n Testing libpng version %s\\n", 
      "   with zlib   version %s\\n", 
      "1.2.11", 
      " library (%lu):%s", 
      " pngtest (%lu):%s", 
      " libpng version 1.6.39.git\\n", 
      "Warning: versions are different between png.h and png.c\\n", 
      "  png.h version: %s\\n", 
      "  png.c version: %s\\n\\n", 
      "--strict", 
      "--relaxed", 
      "--xfail", 
      "\\n Testing %s:", 
      "\\n PASS (%lu zero samples)\\n", 
      " tIME = %s\\n", 
      "\\n Testing %s:", 
      " FAIL\\n", 
      " XFAIL\\n", 
      "\\n Testing %s:", 
      "\\n PASS (%lu zero samples)\\n", 
      " tIME = %s\\n", 
      " FAIL\\n", 
      " XFAIL\\n", 
      " libpng passes test\\n", 
      " libpng FAILS test\\n", 
      " Default limits:\\n", 
      "  width_max  = %lu\\n", 
      "  height_max = %lu\\n", 
      "  cache_max  = unlimited\\n", 
      "  cache_max  = %lu\\n", 
      "  malloc_max = unlimited\\n", 
      "  malloc_max = %lu\\n", 
      "usage: %s [infile.png] [outfile.png]\\n\\t%s -m {infile.png}\\n", 
      "  reads/writes one PNG file (without -m) or multiple files (-m)\\n", 
      "  with -m %s is used as a temporary file\\n"
    ], 
    "if (.* < .*)": 1, 
    "label": "main", 
    "params": 2, 
    "int": 1, 
    "malloc(.*)": 4, 
    "if (.* == 0)": 16, 
    "for (.*)": 2, 
    "printf(.*)": 31, 
    ".*\\-": 6, 
    "if (.*)": 24, 
    "return": 1, 
    ".*\\+": 26, 
    "= .*\\+": 25
  }, 
  "pngtest_error": {
    "void": 1, 
    "label": "error", 
    "params": 2, 
    "return;": 1, 
    "char": 1, 
    "return": 0, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "write_sTER_chunk": {
    "if (.* != 0)": 1, 
    "fprintf(.*)": 1, 
    "void": 1, 
    "string": [
      "\\n stereo mode = %d\\n"
    ], 
    "label": "write", 
    "params": 1, 
    "return;": 1, 
    "printf(.*)": 1, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "test_one_file": {
    "fprintf(.*)": 28, 
    "if (.* != 0)": 31, 
    "if (.* < \\d*)": 7, 
    "string": [
      "Could not find input file %s\\n", 
      "Could not open output file %s\\n", 
      "png_get_IHDR failed", 
      "invalid interlace type", 
      " eXIf type %c%c, %lu bytes\\n", 
      "   Text compression[%d]=%d\\n", 
      "*** invalid time ***", 
      "png_set_interlace_handling(read): wrong pass count ", 
      "png_set_interlace_handling(write): wrong pass count ", 
      "   Text compression[%d]=%d\\n", 
      " eXIf type %c%c, %lu bytes\\n", 
      "*** invalid time ***", 
      "\\n Image width = %lu, height = %lu\\n", 
      "\\n  %s: %d libpng warnings found", 
      "\\n  %s: unsupported chunks (%d)%s", 
      "\\n  %s: %d libpng errors found (%d warnings)", 
      "Could not find file %s\\n", 
      "Could not find file %s\\n", 
      "\\nFiles %s and %s are of a different size\\n", 
      "   Was %s written with the same maximum IDAT chunk size (%d bytes),", 
      "\\n   filtering heuristic (libpng default), compression", 
      " level (zlib default),\\n   and zlib version (%s)?\\n\\n", 
      "1.2.11", 
      "\\nFiles %s and %s are different\\n", 
      "   Was %s written with the same maximum IDAT chunk size (%d bytes),", 
      "\\n   filtering heuristic (libpng default), compression", 
      " level (zlib default),\\n   and zlib version (%s)?\\n\\n", 
      "1.2.11", 
      "%s -> %s: libpng write error\\n", 
      "   destroying read structs\\n", 
      "   destroying write structs\\n", 
      "%s -> %s: libpng read error\\n", 
      "   destroy read structs\\n", 
      "   destroy write structs\\n"
    ], 
    "if (.* < .*)": 7, 
    "setjmp(.*)": 2, 
    "label": "test", 
    "params": 2, 
    "int": 1, 
    "malloc(.*)": 1, 
    "if (.* == 0)": 13, 
    "return 0": 1, 
    "goto": 1, 
    "while(.*)": 1, 
    "for (.*)": 5, 
    "char*": 1, 
    "printf(.*)": 28, 
    ".*\\-": 8, 
    "if (.*)": 58, 
    "return": 1, 
    ".*\\+": 13, 
    "= .*\\+": 7
  }, 
  "read_user_chunk_callback": {
    "string": [
      "lost user chunk pointer"
    ], 
    "label": "read", 
    "params": 2, 
    "int": 1, 
    "if (.* == 0)": 2, 
    ".*\\-": 16, 
    "if (.*)": 8, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "pngtest_check_text_support": {
    "if (.* != 0)": 1, 
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "string": [
      "invalid text chunk compression field"
    ], 
    "if (.* < .*)": 1, 
    "label": "test", 
    "params": 3, 
    "int": 1, 
    "return;": 1, 
    "while(.*)": 1, 
    ".*\\-": 2, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "set_location": {
    "label": "set", 
    "params": 3, 
    "int": 1, 
    "if (.* == 0)": 3, 
    ".*\\-": 6, 
    "if (.*)": 4, 
    "return": 1
  }, 
  "write_chunks": {
    "void": 1, 
    "label": "write", 
    "params": 2, 
    "int": 1, 
    "return;": 1, 
    "for (.*)": 1, 
    "if (.*)": 2, 
    "return": 0, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "read_row_callback": {
    "fprintf(.*)": 3, 
    "void": 1, 
    "string": [
      "\\n Pass %d: "
    ], 
    "label": "read", 
    "uint": 1, 
    "params": 3, 
    "int": 1, 
    "if (.* == 0)": 1, 
    "return;": 1, 
    "printf(.*)": 3, 
    ".*\\-": 1, 
    "if (.*)": 3, 
    "return": 0, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "read_user_callback": {
    "void": 1, 
    "byte": 1, 
    "label": "read", 
    "params": 3, 
    "return;": 1, 
    "return": 0
  }, 
  "write_row_callback": {
    "if (.* < \\d*)": 1, 
    "fprintf(.*)": 1, 
    "void": 1, 
    "if (.* < .*)": 1, 
    "label": "write", 
    "uint": 1, 
    "params": 3, 
    "int": 1, 
    "return;": 1, 
    "printf(.*)": 1, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "init_callback_info": {
    "void": 1, 
    "label": "init", 
    "params": 1, 
    "memset(.*)": 1, 
    "return;": 1, 
    "return": 0
  }, 
  "count_zero_samples": {
    "if (.* < \\d*)": 2, 
    "void": 1, 
    "if (.* < .*)": 2, 
    "byte": 1, 
    "params": 3, 
    "if (.* == 0)": 5, 
    "return;": 1, 
    "for (.*)": 3, 
    ".*\\-": 14, 
    "if (.*)": 19, 
    "return": 0, 
    ".*\\+": 22, 
    "= .*\\+": 22
  }
}