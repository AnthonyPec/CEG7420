{
  "test_wolfSSL_CheckOCSPResponse": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha384Update": {
    "if (.* != 0)": 9, 
    "string": [
      "   %s:", 
      "wc_Sha384Update()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 6, 
    "if (.* == 0)": 9, 
    "char *": 4, 
    "printf(.*)": 2, 
    ".*\\-": 5, 
    "if (.*)": 14, 
    "return": "int"
  }, 
  "test_wolfSSL_Tls13_postauth": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_PUBKEY_RSA": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_set_notAfter": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CTX_new": {
    "if (.* != 0)": 1, 
    "string": [
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is null", 
      "ctx = wolfSSL_CTX_new(NULL)", 
      "\\n    result:   ", 
      "ctx = wolfSSL_CTX_new(NULL) => %p", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "method = wolfSSLv23_server_method()", 
      "\\n    result:   ", 
      "method = wolfSSLv23_server_method() => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "ctx = wolfSSL_CTX_new(method)", 
      "\\n    result:   ", 
      "ctx = wolfSSL_CTX_new(method) => NULL"
    ], 
    "abort(.*)": 3, 
    "fflush(.*)": 3, 
    "label": "test", 
    "param1": "void);", 
    "int": 10, 
    "if (.* == 0)": 2, 
    "return 0": 1, 
    "fputs(.*)": 9, 
    "char *": 3, 
    "printf(.*)": 9, 
    ".*\\-": 6, 
    "if (.*)": 3, 
    "return": "int"
  }, 
  "test_wolfSSL_make_cert": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha256HmacSetKey": {
    "if (.* != 0)": 2, 
    "string": [
      "   %s:", 
      "wc_HmacSetKey() with SHA256"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 11, 
    "if (.* == 0)": 6, 
    "for (.*)": 1, 
    "char *": 7, 
    "printf(.*)": 2, 
    ".*\\-": 7, 
    "if (.*)": 10, 
    "return": "int", 
    ".*\\+": 1
  }, 
  "test_wolfSSL_PEM_read": {
    "label": "read", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_set1_sigalgs_list": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_SetSubjectKeyId": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_RipeMdFinal": {
    "label": "test", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_get_X509_PUBKEY": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_InitSha224": {
    "label": "test", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_i2a_ASN1_OBJECT": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_MD5": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_MD4": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_FPKI": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_UseOCSPStaplingV2": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_i2t_ASN1_OBJECT": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CTX_add_session": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_UseALPN": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_SHA_Transform": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_OCSP_id_cmp": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_PEM_read_bio_ECPKParameters": {
    "label": "read", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_BIO_get_len": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_ASN1_TIME_to_generalizedtime": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_ecc_get_curve_size_from_name": {
    "if (.* != 0)": 1, 
    "string": [
      "   %s:", 
      "wc_ecc_get_curve_size_from_name", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "\\n    result:   ", 
      "%d != %d", 
      "BADCURVE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d"
    ], 
    "abort(.*)": 3, 
    "fflush(.*)": 3, 
    "label": "get", 
    "param1": "void);", 
    "int": 19, 
    "return 0": 1, 
    "fputs(.*)": 9, 
    "char *": 4, 
    "printf(.*)": 11, 
    ".*\\-": 8, 
    "if (.*)": 3, 
    "return": "int"
  }, 
  "test_wolfSSL_BIO_f_md": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_ASN1_STRING_print_ex": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha512_256Update": {
    "if (.* != 0)": 8, 
    "string": [
      "   %s:", 
      "wc_Sha512_256Update()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 6, 
    "if (.* == 0)": 7, 
    "char *": 4, 
    "printf(.*)": 2, 
    ".*\\-": 5, 
    "if (.*)": 13, 
    "return": "int"
  }, 
  "test_wolfSSL_EVP_PKEY_print_public": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_NAME": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_PKCS12": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_TLS_version": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_ShaHmacSetKey": {
    "if (.* != 0)": 2, 
    "string": [
      "   %s:", 
      "wc_HmacSetKey() with SHA"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 11, 
    "if (.* == 0)": 6, 
    "for (.*)": 1, 
    "char *": 7, 
    "printf(.*)": 2, 
    ".*\\-": 7, 
    "if (.*)": 10, 
    "return": "int", 
    ".*\\+": 1
  }, 
  "test_wolfSSL_SetMinVersion": {
    "string": [
      "   %s:", 
      "wolfSSL_SetMinVersion()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 9, 
    "for (.*)": 1, 
    "char *": 2, 
    "printf(.*)": 2, 
    "if (.*)": 3, 
    "return": "int", 
    ".*\\+": 1
  }, 
  "test_wc_Sha384FinalRaw": {
    "if (.* != 0)": 1, 
    "string": [
      "   %s:", 
      "wc_Sha384FinalRaw()"
    ], 
    "= .*\\+.*\\+ 0x.*": 1, 
    "label": "test", 
    "param1": "void);", 
    "int": 8, 
    "if (.* == 0)": 6, 
    "for (.*)": 1, 
    "char *": 2, 
    "printf(.*)": 2, 
    ".*\\-": 7, 
    "if (.*)": 7, 
    "return": "int", 
    ".*\\+": 5
  }, 
  "test_wolfSSL_dtls_export": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_BIO_gets": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_URI": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_CRYPTO_THREADID_xxx": {
    "label": "read", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_RSA_sign": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha3_512_Final": {
    "label": "test", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_verify_depth": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_issuer_name_hash": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_EVP_MD_size": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_EVP_Cipher_extra": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha512FinalRaw": {
    "if (.* != 0)": 1, 
    "string": [
      "   %s:", 
      "wc_Sha512FinalRaw()"
    ], 
    "= .*\\+.*\\+ 0x.*": 1, 
    "label": "test", 
    "param1": "void);", 
    "int": 8, 
    "if (.* == 0)": 6, 
    "for (.*)": 1, 
    "char *": 2, 
    "printf(.*)": 2, 
    ".*\\-": 7, 
    "if (.*)": 7, 
    "return": "int", 
    ".*\\+": 5
  }, 
  "test_wolfSSL_ERR_print_errors_cb": {
    "label": "error", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_DH_1536_prime": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_SetSubject": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_BIO_accept": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha512_224Free": {
    "string": [
      "   %s:", 
      "wc_Sha512_224Free()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 3, 
    "return 0": 1, 
    "char *": 1, 
    "printf(.*)": 2, 
    "return": "int"
  }, 
  "test_client_wolfSSL_new": {
    "if (.* != 0)": 1, 
    "string": [
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "ctx_nocert = wolfSSL_CTX_new(wolfSSLv23_client_method())", 
      "\\n    result:   ", 
      "ctx_nocert = wolfSSL_CTX_new(wolfSSLv23_client_method()) => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "ctx = wolfSSL_CTX_new(wolfSSLv23_client_method())", 
      "\\n    result:   ", 
      "ctx = wolfSSL_CTX_new(wolfSSLv23_client_method()) => NULL", 
      "./certs/ca-cert.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "wolfSSL_CTX_load_verify_locations(ctx, caCertFile, 0)", 
      "\\n    result:   ", 
      "wolfSSL_CTX_load_verify_locations(ctx, caCertFile, 0) => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is null", 
      "ssl = wolfSSL_new(NULL)", 
      "\\n    result:   ", 
      "ssl = wolfSSL_new(NULL) => %p", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "ssl = wolfSSL_new(ctx_nocert)", 
      "\\n    result:   ", 
      "ssl = wolfSSL_new(ctx_nocert) => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "ssl = wolfSSL_new(ctx)", 
      "\\n    result:   ", 
      "ssl = wolfSSL_new(ctx) => NULL"
    ], 
    "abort(.*)": 6, 
    "fflush(.*)": 6, 
    "label": "test", 
    "param1": "void);", 
    "int": 21, 
    "if (.* == 0)": 5, 
    "return 0": 1, 
    "fputs(.*)": 18, 
    "char *": 6, 
    "printf(.*)": 18, 
    ".*\\-": 13, 
    "if (.*)": 6, 
    "return": "int"
  }, 
  "test_wolfSSL_CTX_use_certificate_buffer": {
    "string": [
      "   %s:", 
      "wolfSSL_CTX_use_certificate_buffer()", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "ctx = wolfSSL_CTX_new(wolfSSLv23_server_method())", 
      "\\n    result:   ", 
      "ctx = wolfSSL_CTX_new(wolfSSLv23_server_method()) => NULL"
    ], 
    "abort(.*)": 1, 
    "fflush(.*)": 1, 
    "label": "test", 
    "param1": "void);", 
    "int": 8, 
    "if (.* == 0)": 1, 
    "fputs(.*)": 3, 
    "char *": 3, 
    "printf(.*)": 5, 
    ".*\\-": 2, 
    "if (.*)": 3, 
    "return": "int"
  }, 
  "test_wolfSSL_sk_DIST_POINT": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_Tls13_Key_Logging_test": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_SetTmpEC_DHE_Sz": {
    "string": [
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "\\n    result:   ", 
      "ctx => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_CTX_SetTmpEC_DHE_Sz(ctx, 32)", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "\\n    result:   ", 
      "ssl => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_SetTmpEC_DHE_Sz(ssl, 32)", 
      "\\n    result:   ", 
      "%d != %d"
    ], 
    "abort(.*)": 4, 
    "fflush(.*)": 4, 
    "label": "test", 
    "param1": "void);", 
    "int": 19, 
    "if (.* == 0)": 2, 
    "return 0": 1, 
    "fputs(.*)": 12, 
    "char *": 4, 
    "printf(.*)": 12, 
    ".*\\-": 8, 
    "if (.*)": 4, 
    "return": "int"
  }, 
  "test_wolfSSL_AES_cbc_encrypt": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_ERR_peek_last_error_line": {
    "label": "error", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CTX_set_keylog_callback": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_PEM_write_DHparams": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_X509_get_signature_nid": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_dtls_fragments": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_ERR_get_error_order": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_PEM_RSAPrivateKey": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_ERR_put_error": {
    "label": "error", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_d2i_and_i2d_DSAparams": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_BIO_printf": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha224HmacFinal": {
    "label": "test", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha512_256Copy": {
    "string": [
      "   %s:", 
      "wc_Sha512_256Copy()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 4, 
    "if (.* == 0)": 6, 
    "char *": 2, 
    "printf(.*)": 2, 
    ".*\\-": 6, 
    "if (.*)": 6, 
    "return": "int"
  }, 
  "test_wc_InitBlake2b_WithKey": {
    "label": "test", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha3_GetFlags": {
    "label": "get", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_verify": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_InitSha384": {
    "if (.* != 0)": 1, 
    "string": [
      "   %s:", 
      "wc_InitSha384()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 6, 
    "if (.* == 0)": 2, 
    "char *": 2, 
    "printf(.*)": 2, 
    ".*\\-": 3, 
    "if (.*)": 3, 
    "return": "int"
  }, 
  "test_wolfSSL_UseTrustedCA": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_PEM_write_bio_PKCS7": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_STORE_set_flags": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_for_double_Free": {
    "string": [
      "RC4-SHA:RC4-MD5:DES-CBC3-SHA:AES128-SHA:AES256-SHA:NULL-SHA:NULL-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:DHE-PSK-AES256-GCM-SHA384:DHE-PSK-AES128-GCM-SHA256:PSK-AES256-GCM-SHA384:PSK-AES128-GCM-SHA256:DHE-PSK-AES256-CBC-SHA384:DHE-PSK-AES128-CBC-SHA256:PSK-AES256-CBC-SHA384:PSK-AES128-CBC-SHA256:PSK-AES128-CBC-SHA:PSK-AES256-CBC-SHA:DHE-PSK-AES128-CCM:DHE-PSK-AES256-CCM:PSK-AES128-CCM:PSK-AES256-CCM:PSK-AES128-CCM-8:PSK-AES256-CCM-8:DHE-PSK-NULL-SHA384:DHE-PSK-NULL-SHA256:PSK-NULL-SHA384:PSK-NULL-SHA256:PSK-NULL-SHA:AES128-CCM-8:AES256-CCM-8:ECDHE-ECDSA-AES128-CCM:ECDHE-ECDSA-AES128-CCM-8:ECDHE-ECDSA-AES256-CCM-8:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-RC4-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-RC4-SHA:ECDHE-ECDSA-DES-CBC3-SHA:AES128-SHA256:AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:ECDH-RSA-AES128-SHA:ECDH-RSA-AES256-SHA:ECDH-ECDSA-AES128-SHA:ECDH-ECDSA-AES256-SHA:ECDH-RSA-RC4-SHA:ECDH-RSA-DES-CBC3-SHA:ECDH-ECDSA-RC4-SHA:ECDH-ECDSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDH-RSA-AES128-GCM-SHA256:ECDH-RSA-AES256-GCM-SHA384:ECDH-ECDSA-AES128-GCM-SHA256:ECDH-ECDSA-AES256-GCM-SHA384:CAMELLIA128-SHA:DHE-RSA-CAMELLIA128-SHA:CAMELLIA256-SHA:DHE-RSA-CAMELLIA256-SHA:CAMELLIA128-SHA256:DHE-RSA-CAMELLIA128-SHA256:CAMELLIA256-SHA256:DHE-RSA-CAMELLIA256-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDH-RSA-AES128-SHA256:ECDH-ECDSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDH-RSA-AES256-SHA384:ECDH-ECDSA-AES256-SHA384:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-CHACHA20-POLY1305:DHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305-OLD:ECDHE-ECDSA-CHACHA20-POLY1305-OLD:DHE-RSA-CHACHA20-POLY1305-OLD:ECDHE-ECDSA-NULL-SHA:ECDHE-PSK-NULL-SHA256:ECDHE-PSK-AES128-CBC-SHA256:PSK-CHACHA20-POLY1305:ECDHE-PSK-CHACHA20-POLY1305:DHE-PSK-CHACHA20-POLY1305...", 
      "./certs/server-cert.pem", 
      "./certs/server-key.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "\\n    result:   ", 
      "ctx => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "wolfSSL_CTX_use_certificate_file(ctx, testCertFile, WOLFSSL_FILETYPE_PEM)", 
      "\\n    result:   ", 
      "wolfSSL_CTX_use_certificate_file(ctx, testCertFile, WOLFSSL_FILETYPE_PEM) => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "wolfSSL_CTX_use_PrivateKey_file(ctx, testKeyFile, WOLFSSL_FILETYPE_PEM)", 
      "\\n    result:   ", 
      "wolfSSL_CTX_use_PrivateKey_file(ctx, testKeyFile, WOLFSSL_FILETYPE_PEM) => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "\\n    result:   ", 
      "ssl => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "\\n    result:   ", 
      "ctx => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "wolfSSL_CTX_use_certificate_file(ctx, testCertFile, WOLFSSL_FILETYPE_PEM)", 
      "\\n    result:   ", 
      "wolfSSL_CTX_use_certificate_file(ctx, testCertFile, WOLFSSL_FILETYPE_PEM) => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "wolfSSL_CTX_use_PrivateKey_file(ctx, testKeyFile, WOLFSSL_FILETYPE_PEM)", 
      "\\n    result:   ", 
      "wolfSSL_CTX_use_PrivateKey_file(ctx, testKeyFile, WOLFSSL_FILETYPE_PEM) => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "\\n    result:   ", 
      "ssl => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "\\n    result:   ", 
      "ctx => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "wolfSSL_CTX_use_certificate_file(ctx, testCertFile, WOLFSSL_FILETYPE_PEM)", 
      "\\n    result:   ", 
      "wolfSSL_CTX_use_certificate_file(ctx, testCertFile, WOLFSSL_FILETYPE_PEM) => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "wolfSSL_CTX_use_PrivateKey_file(ctx, testKeyFile, WOLFSSL_FILETYPE_PEM)", 
      "\\n    result:   ", 
      "wolfSSL_CTX_use_PrivateKey_file(ctx, testKeyFile, WOLFSSL_FILETYPE_PEM) => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "wolfSSL_CTX_set_cipher_list(ctx, optionsCiphers)", 
      "\\n    result:   ", 
      "wolfSSL_CTX_set_cipher_list(ctx, optionsCiphers) => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "ssl = wolfSSL_new(ctx)", 
      "\\n    result:   ", 
      "ssl = wolfSSL_new(ctx) => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "\\n    result:   ", 
      "ctx => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "wolfSSL_CTX_use_certificate_file(ctx, testCertFile, WOLFSSL_FILETYPE_PEM)", 
      "\\n    result:   ", 
      "wolfSSL_CTX_use_certificate_file(ctx, testCertFile, WOLFSSL_FILETYPE_PEM) => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "wolfSSL_CTX_use_PrivateKey_file(ctx, testKeyFile, WOLFSSL_FILETYPE_PEM)", 
      "\\n    result:   ", 
      "wolfSSL_CTX_use_PrivateKey_file(ctx, testKeyFile, WOLFSSL_FILETYPE_PEM) => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "\\n    result:   ", 
      "ssl => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "wolfSSL_set_cipher_list(ssl, optionsCiphers)", 
      "\\n    result:   ", 
      "wolfSSL_set_cipher_list(ssl, optionsCiphers) => FALSE"
    ], 
    "abort(.*)": 18, 
    "fflush(.*)": 18, 
    "label": "test", 
    "param1": "void);", 
    "int": 56, 
    "if (.* == 0)": 14, 
    "return 0": 1, 
    "memcpy(.*)": 1, 
    "fputs(.*)": 54, 
    "char *": 33, 
    ".*\\-": 39, 
    "printf(.*)": 54, 
    "if (.*)": 19, 
    "return": "int"
  }, 
  "test_wolfSSL_tls_export": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_ASN1_TIME_adj": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_BIO": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "testing_wc_Shake256_Update": {
    "label": "test", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_d2i_X509_REQ": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_openssl_generate_key_and_cert": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha512_224Update": {
    "if (.* != 0)": 8, 
    "string": [
      "   %s:", 
      "wc_Sha512_224Update()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 6, 
    "if (.* == 0)": 7, 
    "char *": 4, 
    "printf(.*)": 2, 
    ".*\\-": 5, 
    "if (.*)": 13, 
    "return": "int"
  }, 
  "test_wolfSSL_PEM_read_PrivateKey": {
    "label": "read", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_OCSP_single_get0_status": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha384GetFlags": {
    "label": "get", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_OBJ": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_BIO_up_ref": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_DES_ecb_encrypt": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_CheckCertSigPubKey": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_InitSha256": {
    "if (.* != 0)": 1, 
    "string": [
      "   %s:", 
      "wc_InitSha256()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 6, 
    "if (.* == 0)": 2, 
    "char *": 2, 
    "printf(.*)": 2, 
    ".*\\-": 3, 
    "if (.*)": 3, 
    "return": "int"
  }, 
  "test_wc_InitSha3": {
    "label": "test", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_ShaHmacFinal": {
    "if (.* != 0)": 4, 
    "string": [
      "Hi There", 
      "   %s:", 
      "wc_HmacFinal() with SHA", 
      "Hi There"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 7, 
    "if (.* == 0)": 7, 
    "char *": 3, 
    "printf(.*)": 2, 
    ".*\\-": 5, 
    "if (.*)": 8, 
    "return": "int"
  }, 
  "test_wolfSSL_i2d_OCSP_CERTID": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Md5HmacSetKey": {
    "if (.* != 0)": 2, 
    "string": [
      "   %s:", 
      "wc_HmacSetKey() with MD5"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 11, 
    "if (.* == 0)": 6, 
    "for (.*)": 1, 
    "char *": 7, 
    "printf(.*)": 2, 
    ".*\\-": 7, 
    "if (.*)": 10, 
    "return": "int", 
    ".*\\+": 1
  }, 
  "test_wolfSSL_ASN1_get_object": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_a2i_IPADDRESS": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CRYPTO_get_ex_new_index": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_OBJ_txt2obj": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_RSA_blinding_on": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_InitSha512_256": {
    "if (.* != 0)": 1, 
    "string": [
      "   %s:", 
      "wc_InitSha512_256()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 6, 
    "if (.* == 0)": 2, 
    "char *": 2, 
    "printf(.*)": 2, 
    ".*\\-": 3, 
    "if (.*)": 3, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_get_ext_count": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_get_ext_by_NID": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_BIO_should_retry": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_wolfSSL_UseSecureRenegotiation": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_IMPLEMENT_ASN1_FUNCTIONS": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CTX_trust_peer_cert": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha512Final": {
    "if (.* != 0)": 1, 
    "string": [
      "   %s:", 
      "wc_Sha512Final()"
    ], 
    "= .*\\+.*\\+ 0x.*": 1, 
    "label": "test", 
    "param1": "void);", 
    "int": 8, 
    "if (.* == 0)": 5, 
    "for (.*)": 1, 
    "char *": 2, 
    "printf(.*)": 2, 
    ".*\\-": 7, 
    "if (.*)": 8, 
    "return": "int", 
    ".*\\+": 5
  }, 
  "test_wolfSSL_EVP_EncodeFinal": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_HMAC_CTX": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_EC_KEY_print_fp": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_sk_SSL_CIPHER": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_STORE_CTX_set_time": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_PEM_bio_ECKey": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_UseSupportedCurve": {
    "string": [
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "\\n    result:   ", 
      "ctx => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "\\n    result:   ", 
      "ssl => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s != %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_CTX_UseSupportedCurve(((void*)0), WOLFSSL_ECC_SECP256R1)", 
      "\\n    result:   ", 
      "%d == %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s != %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_CTX_UseSupportedCurve(ctx, 0)", 
      "\\n    result:   ", 
      "%d == %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s != %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_UseSupportedCurve(((void*)0), WOLFSSL_ECC_SECP256R1)", 
      "\\n    result:   ", 
      "%d == %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s != %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_UseSupportedCurve(ssl, 0)", 
      "\\n    result:   ", 
      "%d == %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_CTX_UseSupportedCurve(ctx, WOLFSSL_ECC_SECP256R1)", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_UseSupportedCurve(ssl, WOLFSSL_ECC_SECP256R1)", 
      "\\n    result:   ", 
      "%d != %d"
    ], 
    "abort(.*)": 8, 
    "fflush(.*)": 8, 
    "label": "test", 
    "param1": "void);", 
    "int": 39, 
    "if (.* == 0)": 2, 
    "return 0": 1, 
    "fputs(.*)": 24, 
    "char *": 8, 
    "printf(.*)": 24, 
    ".*\\-": 16, 
    "if (.*)": 8, 
    "return": "int"
  }, 
  "test_wolfSSL_CTX_get0_set1_param": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_EVP_EncodeUpdate": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_RAND_bytes": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha384HmacUpdate": {
    "if (.* != 0)": 2, 
    "string": [
      "what do ya want for nothing?", 
      "Hi There", 
      "   %s:", 
      "wc_HmacUpdate() with SHA384", 
      "Hi There", 
      "what do ya want for nothing?", 
      "what do ya want for nothing?", 
      "what do ya want for nothing?"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 7, 
    "if (.* == 0)": 7, 
    "for (.*)": 4, 
    "char *": 4, 
    "printf(.*)": 2, 
    ".*\\-": 4, 
    "if (.*)": 8, 
    "return": "int"
  }, 
  "test_tls13_apis": {
    "if (.* != 0)": 6, 
    "string": [
      "./certs/server-cert.pem", 
      "./certs/server-cert.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_UseKeyShare(((void*)0), WOLFSSL_ECC_SECP256R1)", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "WOLFSSL_SUCCESS", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "WOLFSSL_SUCCESS", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "WOLFSSL_SUCCESS", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_NoKeyShares(((void*)0))", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_NoKeyShares(serverSsl)", 
      "SIDE_ERROR", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_NoKeyShares(clientTls12Ssl)", 
      "WOLFSSL_SUCCESS", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_NoKeyShares(clientSsl)", 
      "WOLFSSL_SUCCESS", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_no_ticket_TLSv13(((void*)0))", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_no_ticket_TLSv13(clientCtx)", 
      "SIDE_ERROR", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_no_ticket_TLSv13(serverTls12Ctx)", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_no_ticket_TLSv13(serverCtx)", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_no_ticket_TLSv13(((void*)0))", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_no_ticket_TLSv13(clientSsl)", 
      "SIDE_ERROR", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_no_ticket_TLSv13(serverTls12Ssl)", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_no_ticket_TLSv13(serverSsl)", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_no_dhe_psk(((void*)0))", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_no_dhe_psk(clientTls12Ctx)", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_no_dhe_psk(clientCtx)", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_no_dhe_psk(serverCtx)", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_no_dhe_psk(((void*)0))", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_no_dhe_psk(clientTls12Ssl)", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_no_dhe_psk(clientSsl)", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_no_dhe_psk(serverSsl)", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_update_keys(((void*)0))", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_update_keys(clientTls12Ssl)", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_update_keys(clientSsl)", 
      "BUILD_MSG_ERROR", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_update_keys(serverSsl)", 
      "BUILD_MSG_ERROR", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_key_update_response(((void*)0), ((void*)0))", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_key_update_response(((void*)0), &required)", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_key_update_response(clientTls12Ssl, &required)", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_key_update_response(serverSsl, ((void*)0))", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_preferred_group(((void*)0))", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_preferred_group(serverSsl)", 
      "SIDE_ERROR", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_preferred_group(clientTls12Ssl)", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_preferred_group(clientSsl)", 
      "NOT_READY_ERROR", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_set_groups(((void*)0), ((void*)0), 0)", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_set_groups(clientCtx, ((void*)0), 0)", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_set_groups(((void*)0), groups, numGroups)", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_set_groups(clientTls12Ctx, groups, numGroups)", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_set_groups(clientCtx, groups, 10 + 1)", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_set_groups(clientCtx, groups, numGroups)", 
      "WOLFSSL_SUCCESS", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_set_groups(clientCtx, bad_groups, numGroups)", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_set_groups(serverCtx, groups, numGroups)", 
      "WOLFSSL_SUCCESS", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_set_groups(serverCtx, bad_groups, numGroups)", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_set_groups(((void*)0), ((void*)0), 0)", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_set_groups(((void*)0), groups, numGroups)", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_set_groups(clientTls12Ssl, groups, numGroups)", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_set_groups(clientSsl, groups, 10 + 1)", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_set_groups(clientSsl, bad_groups, numGroups)", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_set_groups(serverSsl, bad_groups, numGroups)", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_set_groups(serverSsl, groups, numGroups)", 
      "WOLFSSL_SUCCESS", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_set_groups(clientSsl, groups, numGroups)", 
      "WOLFSSL_SUCCESS", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_set_groups(clientSsl, ((void*)0), 0)", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_key_update_response(clientSsl, ((void*)0))", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d"
    ], 
    "abort(.*)": 55, 
    "fflush(.*)": 55, 
    "label": "test", 
    "param1": "void);", 
    "int": 285, 
    "while(.*)": 3, 
    "return 0": 1, 
    "fputs(.*)": 165, 
    "char *": 57, 
    ".*\\-": 148, 
    "printf(.*)": 165, 
    "if (.*)": 55, 
    "return": "int", 
    ".*\\+": 2
  }, 
  "test_wolfSSL_RSA_To_Der": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_set_tlsext_status_type": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CertManagerLoadCABuffer": {
    "string": [
      "./certs/ca-cert.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "WOLFSSL_SUCCESS", 
      "\\n    result:   ", 
      "%d != %d", 
      "./certs/test/expired/expired-ca.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "ASN_AFTER_DATE_E", 
      "\\n    result:   ", 
      "%d != %d"
    ], 
    "abort(.*)": 2, 
    "fflush(.*)": 2, 
    "label": "load", 
    "param1": "void);", 
    "int": 12, 
    "return 0": 1, 
    "fputs(.*)": 6, 
    "char *": 4, 
    ".*\\-": 7, 
    "printf(.*)": 6, 
    "if (.*)": 2, 
    "return": "int"
  }, 
  "test_wc_InitBlake2s_WithKey": {
    "label": "test", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_CheckCertSignature": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_check_email": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "testing_wc_Sha3_Update": {
    "label": "test", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CTX_load_verify_locations_ex": {
    "string": [
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "\\n    result:   ", 
      "ctx => NULL", 
      "./certs/ca-cert.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "WOLFSSL_SUCCESS == wolfSSL_CTX_load_verify_locations_ex(ctx, ca_cert, NULL, WOLFSSL_LOAD_FLAG_NONE)", 
      "\\n    result:   ", 
      "WOLFSSL_SUCCESS == wolfSSL_CTX_load_verify_locations_ex(ctx, ca_cert, NULL, WOLFSSL_LOAD_FLAG_NONE) => FALSE", 
      "./certs/test/expired/expired-ca.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s != %s", 
      "wolfSSL_CTX_load_verify_locations_ex(ctx, ca_expired_cert, ((void*)0), 0x00000000)", 
      "WOLFSSL_SUCCESS", 
      "\\n    result:   ", 
      "%d == %d", 
      "./certs/test/expired/expired-ca.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_load_verify_locations_ex(ctx, ca_expired_cert, ((void*)0), 0x00000002)", 
      "WOLFSSL_SUCCESS", 
      "\\n    result:   ", 
      "%d != %d"
    ], 
    "abort(.*)": 4, 
    "fflush(.*)": 4, 
    "label": "load", 
    "param1": "void);", 
    "int": 18, 
    "if (.* == 0)": 1, 
    "return 0": 1, 
    "fputs(.*)": 12, 
    "char *": 6, 
    "printf(.*)": 12, 
    ".*\\-": 11, 
    "if (.*)": 4, 
    "return": "int"
  }, 
  "test_wolfSSL_SHA": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha512Free": {
    "string": [
      "   %s:", 
      "wc_Sha512Free()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 3, 
    "return 0": 1, 
    "char *": 1, 
    "printf(.*)": 2, 
    "return": "int"
  }, 
  "test_wc_Sha256Update": {
    "if (.* != 0)": 9, 
    "string": [
      "   %s:", 
      "wc_Sha256Update()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 6, 
    "if (.* == 0)": 9, 
    "char *": 4, 
    "printf(.*)": 2, 
    ".*\\-": 5, 
    "if (.*)": 14, 
    "return": "int"
  }, 
  "test_wolfSSL_ASN1_TIME_to_tm": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_BN": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_EVP_Digest_all": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509V3_EXT_nconf": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha384Final": {
    "if (.* != 0)": 1, 
    "string": [
      "   %s:", 
      "wc_Sha384Final()"
    ], 
    "= .*\\+.*\\+ 0x.*": 1, 
    "label": "test", 
    "param1": "void);", 
    "int": 8, 
    "if (.* == 0)": 6, 
    "for (.*)": 1, 
    "char *": 2, 
    "printf(.*)": 2, 
    ".*\\-": 7, 
    "if (.*)": 7, 
    "return": "int", 
    ".*\\+": 5
  }, 
  "test_wolfSSL_CTX_set_srp_username": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_EVP_MD_hmac_signing": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_check_ca": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_GetPkcs8TraditionalOffset": {
    "if (.* < \\d*)": 1, 
    "if (.* != 0)": 3, 
    "string": [
      "./certs/server-keyPkcs8.der", 
      "   %s:", 
      "wc_GetPkcs8TraditionalOffset", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "file != XBADFILE", 
      "\\n    result:   ", 
      "file != XBADFILE => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s > %s", 
      "length", 
      "\\n    result:   ", 
      "%d <= %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "length", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "length", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "length", 
      "ASN_PARSE_E", 
      "\\n    result:   ", 
      "%d != %d"
    ], 
    "if (.* < .*)": 1, 
    "abort(.*)": 5, 
    "fflush(.*)": 5, 
    "label": "get", 
    "param1": "void);", 
    "int": 28, 
    "memset(.*)": 1, 
    "return 0": 1, 
    "fputs(.*)": 15, 
    "char *": 10, 
    ".*\\-": 11, 
    "printf(.*)": 17, 
    "if (.*)": 5, 
    "return": "int"
  }, 
  "test_EccSigFailure_cm": {
    "string": [
      "./certs/ca-ecc-cert.pem", 
      "./certs/server-ecc.der", 
      "./certs/server-ecc.der", 
      "Signature failure test: ECC: Ret %d\\n"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 3, 
    "if (.* == 0)": 1, 
    "char *": 4, 
    ".*\\-": 5, 
    "printf(.*)": 1, 
    "if (.*)": 3, 
    "return": "int"
  }, 
  "test_wc_Sha512GetFlags": {
    "label": "get", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha3_384_Copy": {
    "label": "test", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_i2d_PrivateKey": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_ERR_print_errors_fp": {
    "label": "error", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_UseSNI": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_dtls_plaintext": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_get0_tbs_sigalg": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_PEM_read_DHparams": {
    "label": "read", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_PEM_write_RSA_PUBKEY": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_server_wolfSSL_new": {
    "if (.* != 0)": 2, 
    "string": [
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "ctx_nocert = wolfSSL_CTX_new(wolfSSLv23_server_method())", 
      "\\n    result:   ", 
      "ctx_nocert = wolfSSL_CTX_new(wolfSSLv23_server_method()) => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "ctx = wolfSSL_CTX_new(wolfSSLv23_server_method())", 
      "\\n    result:   ", 
      "ctx = wolfSSL_CTX_new(wolfSSLv23_server_method()) => NULL", 
      "./certs/server-cert.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "wolfSSL_CTX_use_certificate_file(ctx, svrCertFile, WOLFSSL_FILETYPE_PEM)", 
      "\\n    result:   ", 
      "wolfSSL_CTX_use_certificate_file(ctx, svrCertFile, WOLFSSL_FILETYPE_PEM) => FALSE", 
      "./certs/server-key.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "wolfSSL_CTX_use_PrivateKey_file(ctx, svrKeyFile, WOLFSSL_FILETYPE_PEM)", 
      "\\n    result:   ", 
      "wolfSSL_CTX_use_PrivateKey_file(ctx, svrKeyFile, WOLFSSL_FILETYPE_PEM) => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is null", 
      "ssl = wolfSSL_new(NULL)", 
      "\\n    result:   ", 
      "ssl = wolfSSL_new(NULL) => %p", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is null", 
      "ssl = wolfSSL_new(ctx_nocert)", 
      "\\n    result:   ", 
      "ssl = wolfSSL_new(ctx_nocert) => %p", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "ssl = wolfSSL_new(ctx)", 
      "\\n    result:   ", 
      "ssl = wolfSSL_new(ctx) => NULL"
    ], 
    "abort(.*)": 7, 
    "fflush(.*)": 7, 
    "label": "test", 
    "param1": "void);", 
    "int": 24, 
    "if (.* == 0)": 5, 
    "return 0": 1, 
    "fputs(.*)": 21, 
    "char *": 7, 
    "printf(.*)": 21, 
    ".*\\-": 16, 
    "if (.*)": 7, 
    "return": "int"
  }, 
  "test_wolfSSL_msgCb": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha256HmacFinal": {
    "if (.* != 0)": 4, 
    "string": [
      "Hi There", 
      "   %s:", 
      "wc_HmacFinal() with WC_SHA256", 
      "Hi There"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 7, 
    "if (.* == 0)": 7, 
    "char *": 3, 
    "printf(.*)": 2, 
    ".*\\-": 5, 
    "if (.*)": 8, 
    "return": "int"
  }, 
  "test_wolfSSL_EVP_ENCODE_CTX_free": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CertManagerSetVerify": {
    "string": [
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "\\n    result:   ", 
      "cm => NULL", 
      "./certs/ca-cert.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "WOLFSSL_SUCCESS", 
      "\\n    result:   ", 
      "%d != %d", 
      "./certs/test/expired/expired-cert.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "WOLFSSL_SUCCESS", 
      "\\n    result:   ", 
      "%d != %d"
    ], 
    "abort(.*)": 3, 
    "fflush(.*)": 3, 
    "label": "test", 
    "param1": "void);", 
    "int": 18, 
    "if (.* == 0)": 1, 
    "return 0": 1, 
    "fputs(.*)": 9, 
    "char *": 5, 
    "printf(.*)": 9, 
    ".*\\-": 8, 
    "if (.*)": 3, 
    "return": "int", 
    ".*\\+": 3
  }, 
  "test_wolfSSL_CertManagerNameConstraint": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_generate_cookie": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_DH": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_GetPubKeyDerFromCert": {
    "if (.* != 0)": 8, 
    "if (.* < \\d*)": 4, 
    "string": [
      "   %s:", 
      "wc_GetPubKeyDerFromCert()", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s > %s", 
      "keyDerSz", 
      "\\n    result:   ", 
      "%d <= %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "LENGTH_ONLY_E", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s > %s", 
      "keyDerSz", 
      "\\n    result:   ", 
      "%d <= %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s > %s", 
      "keyDerSz", 
      "\\n    result:   ", 
      "%d <= %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "LENGTH_ONLY_E", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s > %s", 
      "keyDerSz", 
      "\\n    result:   ", 
      "%d <= %d"
    ], 
    "if (.* < .*)": 4, 
    "abort(.*)": 17, 
    "fflush(.*)": 17, 
    "label": "get", 
    "param1": "void);", 
    "int": 90, 
    "memset(.*)": 1, 
    "return 0": 1, 
    "fputs(.*)": 51, 
    "char *": 19, 
    "printf(.*)": 53, 
    ".*\\-": 39, 
    "if (.*)": 17, 
    "return": "int", 
    ".*\\+": 2
  }, 
  "test_wolfSSL_EC_curve": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_DES_ncbc": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha256FinalRaw": {
    "if (.* != 0)": 2, 
    "string": [
      "   %s:", 
      "wc_Sha256FinalRaw()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 9, 
    "if (.* == 0)": 6, 
    "for (.*)": 1, 
    "char *": 2, 
    "printf(.*)": 2, 
    ".*\\-": 7, 
    "if (.*)": 7, 
    "return": "int", 
    ".*\\+": 1
  }, 
  "test_wolfSSL_CTX_get_min_proto_version": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha224HmacUpdate": {
    "label": "test", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_EVP_PKEY_derive": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_RSA_LoadDer": {
    "label": "load", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_ecc_get_curve_id_from_name": {
    "string": [
      "   %s:", 
      "wc_ecc_get_curve_id_from_name", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "ECC_SECP256R1", 
      "\\n    result:   ", 
      "%d != %d", 
      "BADCURVE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d"
    ], 
    "abort(.*)": 3, 
    "fflush(.*)": 3, 
    "label": "get", 
    "param1": "void);", 
    "int": 19, 
    "return 0": 1, 
    "fputs(.*)": 9, 
    "char *": 4, 
    "printf(.*)": 11, 
    ".*\\-": 8, 
    "if (.*)": 3, 
    "return": "int"
  }, 
  "test_wolfSSL_EVP_DecodeInit": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_ASN1_TIME_print": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_CA_num": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_RSA_get0_key": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_EVP_DecodeFinal": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CTX_SetTmpDH_file": {
    "string": [
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "ctx = wolfSSL_CTX_new(wolfSSLv23_client_method())", 
      "\\n    result:   ", 
      "ctx = wolfSSL_CTX_new(wolfSSLv23_client_method()) => NULL", 
      "./certs/dh2048.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s != %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_CTX_SetTmpDH_file(((void*)0), \\", 
      ", WOLFSSL_FILETYPE_PEM)", 
      "\\n    result:   ", 
      "%d == %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s != %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_CTX_SetTmpDH_file(ctx, ((void*)0), WOLFSSL_FILETYPE_PEM)", 
      "\\n    result:   ", 
      "%d == %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s != %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_CTX_SetTmpDH_file(ctx, bogusFile, WOLFSSL_FILETYPE_PEM)", 
      "\\n    result:   ", 
      "%d == %d", 
      "./certs/dh2048.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_CTX_SetTmpDH_file(ctx, \\", 
      ", WOLFSSL_FILETYPE_PEM)", 
      "\\n    result:   ", 
      "%d != %d"
    ], 
    "abort(.*)": 5, 
    "fflush(.*)": 5, 
    "label": "test", 
    "param1": "void);", 
    "int": 25, 
    "if (.* == 0)": 1, 
    "return 0": 1, 
    "fputs(.*)": 15, 
    "char *": 5, 
    "printf(.*)": 15, 
    ".*\\-": 10, 
    "if (.*)": 5, 
    "return": "int"
  }, 
  "test_wc_Sha3_512_Copy": {
    "label": "test", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_VERIFY_PARAM": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_UseMaxFragment": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_MD5_Transform": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_check_host": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_InitBlake2b": {
    "label": "test", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_RSA_meth": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha512_256Free": {
    "string": [
      "   %s:", 
      "wc_Sha512_256Free()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 3, 
    "return 0": 1, 
    "char *": 1, 
    "printf(.*)": 2, 
    "return": "int"
  }, 
  "test_wolfSSL_OCSP_SINGLERESP_get0_id": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_private_keys": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_PEM_PrivateKey": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CertRsaPss": {
    "if (.* != 0)": 2, 
    "string": [
      "./certs/rsapss/ca-3072-rsapss.der", 
      "   %s:", 
      "test_CertRsaPss", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "\\n    result:   ", 
      "cm => NULL", 
      "./certs/rsapss/root-rsapss.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_CertManagerLoadCA(cm, rsaPssRootSha256Cert, ((void*)0))", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_CertManagerLoadCA(cm, rsaPssRootSha384Cert, ((void*)0))", 
      "\\n    result:   ", 
      "%d != %d", 
      "./certs/rsapss/ca-rsapss.der", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "(f != XBADFILE)", 
      "\\n    result:   ", 
      "(f != XBADFILE) => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wc_ParseCert(&cert, CERT_TYPE, VERIFY, cm)", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "(f != XBADFILE)", 
      "\\n    result:   ", 
      "(f != XBADFILE) => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wc_ParseCert(&cert, CERT_TYPE, VERIFY, cm)", 
      "\\n    result:   ", 
      "%d != %d"
    ], 
    "abort(.*)": 7, 
    "fflush(.*)": 7, 
    "label": "test", 
    "param1": "void);", 
    "int": 35, 
    "if (.* == 0)": 1, 
    "return 0": 1, 
    "fputs(.*)": 21, 
    "char *": 14, 
    ".*\\-": 17, 
    "printf(.*)": 23, 
    "if (.*)": 7, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_EXTENSION_get_critical": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_RSA_public_encrypt": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_ParseCert": {
    "if (.* != 0)": 2, 
    "string": [
      "   %s:", 
      "wc_ParseCert", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wc_ParseCert(&decodedCert, CERT_TYPE, NO_VERIFY, ((void*)0))", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "decodedCert.subjectEmail", 
      "\\n    result:   ", 
      "decodedCert.subjectEmail => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is null", 
      "decodedCert.altEmailNames", 
      "\\n    result:   ", 
      "decodedCert.altEmailNames => %p"
    ], 
    "abort(.*)": 3, 
    "fflush(.*)": 3, 
    "label": "test", 
    "param1": "void);", 
    "int": 17, 
    "if (.* == 0)": 1, 
    "return 0": 1, 
    "fputs(.*)": 9, 
    "char *": 4, 
    "printf(.*)": 11, 
    ".*\\-": 6, 
    "if (.*)": 3, 
    "return": "int"
  }, 
  "test_wolfSSL_DES": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_PEM_write_bio_X509": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_OpenSSL_add_all_algorithms": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_CRYPTO_set_dynlock_xxx": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_ERR_remove_state": {
    "label": "test", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_RsaSigFailure_cm": {
    "string": [
      "./certs/ca-cert.pem", 
      "./certs/server-cert.der", 
      "./certs/server-cert.der", 
      "Signature failure test: RSA: Ret %d\\n"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 3, 
    "if (.* == 0)": 1, 
    "char *": 4, 
    ".*\\-": 5, 
    "printf(.*)": 1, 
    "if (.*)": 3, 
    "return": "int"
  }, 
  "test_wolfSSL_RAND": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_NAME_ENTRY": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_RSA_DER": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_EVP_ENCODE_CTX_new": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_sk_GENERAL_NAME": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_RipeMdUpdate": {
    "label": "test", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_DisableExtendedMasterSecret": {
    "string": [
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "\\n    result:   ", 
      "ctx => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "\\n    result:   ", 
      "ssl => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s != %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_CTX_DisableExtendedMasterSecret(((void*)0))", 
      "\\n    result:   ", 
      "%d == %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s != %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_DisableExtendedMasterSecret(((void*)0))", 
      "\\n    result:   ", 
      "%d == %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_CTX_DisableExtendedMasterSecret(ctx)", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_DisableExtendedMasterSecret(ssl)", 
      "\\n    result:   ", 
      "%d != %d"
    ], 
    "abort(.*)": 6, 
    "fflush(.*)": 6, 
    "label": "test", 
    "param1": "void);", 
    "int": 29, 
    "if (.* == 0)": 2, 
    "return 0": 1, 
    "fputs(.*)": 18, 
    "char *": 6, 
    "printf(.*)": 18, 
    ".*\\-": 12, 
    "if (.*)": 6, 
    "return": "int"
  }, 
  "test_wolfSSL_CTX_set_ecdh_auto": {
    "label": "test", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_set_version": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CTX_set_timeout": {
    "string": [
      "   %s:", 
      "test_wolfSSL_CTX_set_timeout()", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "\\n    result:   ", 
      "ctx => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_set_timeout(((void*)0), 0)", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_set_timeout(ctx, 100)", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_set_timeout(ctx, 0)", 
      "\\n    result:   ", 
      "%d != %d"
    ], 
    "abort(.*)": 4, 
    "fflush(.*)": 4, 
    "label": "test", 
    "param1": "void);", 
    "int": 23, 
    "if (.* == 0)": 1, 
    "return 0": 1, 
    "fputs(.*)": 12, 
    "char *": 5, 
    "printf(.*)": 14, 
    ".*\\-": 9, 
    "if (.*)": 4, 
    "return": "int"
  }, 
  "test_wolfSSL_set_options": {
    "if (.* != 0)": 11, 
    "if (.* < \\d*)": 2, 
    "string": [
      "   %s:", 
      "wolfSSL_set_options()", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "ctx = wolfSSL_CTX_new(wolfSSLv23_server_method())", 
      "\\n    result:   ", 
      "ctx = wolfSSL_CTX_new(wolfSSLv23_server_method()) => NULL", 
      "./certs/server-cert.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "wolfSSL_CTX_use_certificate_file(ctx, svrCertFile, WOLFSSL_FILETYPE_PEM)", 
      "\\n    result:   ", 
      "wolfSSL_CTX_use_certificate_file(ctx, svrCertFile, WOLFSSL_FILETYPE_PEM) => FALSE", 
      "./certs/server-key.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "wolfSSL_CTX_use_PrivateKey_file(ctx, svrKeyFile, WOLFSSL_FILETYPE_PEM)", 
      "\\n    result:   ", 
      "wolfSSL_CTX_use_PrivateKey_file(ctx, svrKeyFile, WOLFSSL_FILETYPE_PEM) => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "wolfSSL_CTX_set_options(ctx, WOLFSSL_OP_NO_TLSv1) == WOLFSSL_OP_NO_TLSv1", 
      "\\n    result:   ", 
      "wolfSSL_CTX_set_options(ctx, WOLFSSL_OP_NO_TLSv1) == WOLFSSL_OP_NO_TLSv1 => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "wolfSSL_CTX_get_options(ctx) == WOLFSSL_OP_NO_TLSv1", 
      "\\n    result:   ", 
      "wolfSSL_CTX_get_options(ctx) == WOLFSSL_OP_NO_TLSv1 => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s > %s", 
      "(int)wolfSSL_CTX_set_options(ctx, (WOLFSSL_OP_COOKIE_EXCHANGE | WOLFSSL_OP_NO_SSLv2))", 
      "\\n    result:   ", 
      "%d <= %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "(wolfSSL_CTX_set_options(ctx, WOLFSSL_OP_COOKIE_EXCHANGE) & WOLFSSL_OP_COOKIE_EXCHANGE) == WOLFSSL_OP_COOKIE_EXCHANGE", 
      "\\n    result:   ", 
      "(wolfSSL_CTX_set_options(ctx, WOLFSSL_OP_COOKIE_EXCHANGE) & WOLFSSL_OP_COOKIE_EXCHANGE) == WOLFSSL_OP_COOKIE_EXCHANGE => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "(wolfSSL_CTX_set_options(ctx, WOLFSSL_OP_NO_TLSv1_2) & WOLFSSL_OP_NO_TLSv1_2) == WOLFSSL_OP_NO_TLSv1_2", 
      "\\n    result:   ", 
      "(wolfSSL_CTX_set_options(ctx, WOLFSSL_OP_NO_TLSv1_2) & WOLFSSL_OP_NO_TLSv1_2) == WOLFSSL_OP_NO_TLSv1_2 => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "(wolfSSL_CTX_set_options(ctx, WOLFSSL_OP_NO_COMPRESSION) & WOLFSSL_OP_NO_COMPRESSION) == WOLFSSL_OP_NO_COMPRESSION", 
      "\\n    result:   ", 
      "(wolfSSL_CTX_set_options(ctx, WOLFSSL_OP_NO_COMPRESSION) & WOLFSSL_OP_NO_COMPRESSION) == WOLFSSL_OP_NO_COMPRESSION => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is false", 
      "(wolfSSL_CTX_clear_options(ctx, WOLFSSL_OP_NO_COMPRESSION) & WOLFSSL_OP_NO_COMPRESSION)", 
      "\\n    result:   ", 
      "(wolfSSL_CTX_clear_options(ctx, WOLFSSL_OP_NO_COMPRESSION) & WOLFSSL_OP_NO_COMPRESSION) => TRUE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "\\n    result:   ", 
      "ctx => NULL", 
      "./certs/server-cert.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "wolfSSL_CTX_use_certificate_file(ctx, svrCertFile, WOLFSSL_FILETYPE_PEM)", 
      "\\n    result:   ", 
      "wolfSSL_CTX_use_certificate_file(ctx, svrCertFile, WOLFSSL_FILETYPE_PEM) => FALSE", 
      "./certs/server-key.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "wolfSSL_CTX_use_PrivateKey_file(ctx, svrKeyFile, WOLFSSL_FILETYPE_PEM)", 
      "\\n    result:   ", 
      "wolfSSL_CTX_use_PrivateKey_file(ctx, svrKeyFile, WOLFSSL_FILETYPE_PEM) => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "ssl = wolfSSL_new(ctx)", 
      "\\n    result:   ", 
      "ssl = wolfSSL_new(ctx) => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "wolfSSL_set_options(ssl, WOLFSSL_OP_NO_TLSv1) == WOLFSSL_OP_NO_TLSv1", 
      "\\n    result:   ", 
      "wolfSSL_set_options(ssl, WOLFSSL_OP_NO_TLSv1) == WOLFSSL_OP_NO_TLSv1 => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "wolfSSL_get_options(ssl) == WOLFSSL_OP_NO_TLSv1", 
      "\\n    result:   ", 
      "wolfSSL_get_options(ssl) == WOLFSSL_OP_NO_TLSv1 => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s > %s", 
      "(int)wolfSSL_set_options(ssl, (WOLFSSL_OP_COOKIE_EXCHANGE | WOLFSSL_OP_NO_SSLv2))", 
      "\\n    result:   ", 
      "%d <= %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "(wolfSSL_set_options(ssl, WOLFSSL_OP_COOKIE_EXCHANGE) & WOLFSSL_OP_COOKIE_EXCHANGE) == WOLFSSL_OP_COOKIE_EXCHANGE", 
      "\\n    result:   ", 
      "(wolfSSL_set_options(ssl, WOLFSSL_OP_COOKIE_EXCHANGE) & WOLFSSL_OP_COOKIE_EXCHANGE) == WOLFSSL_OP_COOKIE_EXCHANGE => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "(wolfSSL_set_options(ssl, WOLFSSL_OP_NO_TLSv1_2) & WOLFSSL_OP_NO_TLSv1_2) == WOLFSSL_OP_NO_TLSv1_2", 
      "\\n    result:   ", 
      "(wolfSSL_set_options(ssl, WOLFSSL_OP_NO_TLSv1_2) & WOLFSSL_OP_NO_TLSv1_2) == WOLFSSL_OP_NO_TLSv1_2 => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "(wolfSSL_set_options(ssl, WOLFSSL_OP_NO_COMPRESSION) & WOLFSSL_OP_NO_COMPRESSION) == WOLFSSL_OP_NO_COMPRESSION", 
      "\\n    result:   ", 
      "(wolfSSL_set_options(ssl, WOLFSSL_OP_NO_COMPRESSION) & WOLFSSL_OP_NO_COMPRESSION) == WOLFSSL_OP_NO_COMPRESSION => FALSE"
    ], 
    "if (.* < .*)": 2, 
    "abort(.*)": 20, 
    "fflush(.*)": 20, 
    "label": "test", 
    "param1": "void);", 
    "int": 72, 
    "if (.* == 0)": 7, 
    "return 0": 1, 
    "fputs(.*)": 60, 
    "char *": 21, 
    "printf(.*)": 62, 
    ".*\\-": 44, 
    "if (.*)": 20, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_VERIFY_PARAM_set1_host": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfssl_EVP_chacha20_poly1305": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_OCSP_resp_get0": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_ASN1_STRING_print": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_ERR_strings": {
    "if (.* != 0)": 1, 
    "string": [
      "   %s:", 
      "test_wolfSSL_ERR_strings", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "err != NULL", 
      "\\n    result:   ", 
      "err != NULL => FALSE", 
      "unsupported cipher suite", 
      "unsupported cipher suite", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "strncmp((err),(err1),(strlen((err1))))", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "err != NULL", 
      "\\n    result:   ", 
      "err != NULL => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "err != NULL", 
      "\\n    result:   ", 
      "err != NULL => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "\\n    result:   ", 
      "%d != %d"
    ], 
    "abort(.*)": 6, 
    "fflush(.*)": 6, 
    "label": "test", 
    "param1": "void);", 
    "int": 29, 
    "return 0": 1, 
    "fputs(.*)": 18, 
    "char *": 18, 
    "printf(.*)": 20, 
    ".*\\-": 12, 
    "if (.*)": 6, 
    "return": "int"
  }, 
  "test_wolfSSL_ASN1_BIT_STRING": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CTX_add_client_CA": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_lhash": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CTX_ticket_API": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha256GetHash": {
    "string": [
      "   %s:", 
      "wc_Sha256GetHash()"
    ], 
    "label": "get", 
    "param1": "void);", 
    "int": 4, 
    "if (.* == 0)": 5, 
    "char *": 2, 
    "printf(.*)": 2, 
    ".*\\-": 3, 
    "if (.*)": 5, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_load_crl_file": {
    "label": "load", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_Tls12_Key_Logging_test": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_MakeCertWithPathLen": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_PKCS7_certs": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_set_notBefore": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_InitSha512": {
    "if (.* != 0)": 1, 
    "string": [
      "   %s:", 
      "wc_InitSha512()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 6, 
    "if (.* == 0)": 2, 
    "char *": 2, 
    "printf(.*)": 2, 
    ".*\\-": 3, 
    "if (.*)": 3, 
    "return": "int"
  }, 
  "test_wc_Sha512_224FinalRaw": {
    "string": [
      "   %s:", 
      "wc_Sha512_224FinalRaw()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 4, 
    "if (.* == 0)": 1, 
    "char *": 2, 
    "printf(.*)": 2, 
    "if (.*)": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_PEM_read_bio": {
    "label": "read", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_get_version": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_RSA_ex_data": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_OBJ_NAME_do_all": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_cert_cb": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha3_224_Final": {
    "label": "test", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_CONF_CTX_CMDLINE": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_HMAC": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_RAND_set_rand_method": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_STORE_CTX": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_TBS": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha384Free": {
    "string": [
      "   %s:", 
      "wc_Sha384Free()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 3, 
    "return 0": 1, 
    "char *": 1, 
    "printf(.*)": 2, 
    "return": "int"
  }, 
  "test_wolfSSL_RSA_private_encrypt": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_NID": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_EVP_shake256": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_ASN1_UTCTIME_print": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_ticket_keys": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_THREADID_hash": {
    "label": "read", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha512GetHash": {
    "string": [
      "   %s:", 
      "wc_Sha512GetHash()"
    ], 
    "label": "get", 
    "param1": "void);", 
    "int": 4, 
    "if (.* == 0)": 5, 
    "char *": 2, 
    "printf(.*)": 2, 
    ".*\\-": 3, 
    "if (.*)": 5, 
    "return": "int"
  }, 
  "test_wc_Sha256Free": {
    "string": [
      "   %s:", 
      "wc_Sha256Free()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 3, 
    "return 0": 1, 
    "char *": 1, 
    "printf(.*)": 2, 
    "return": "int"
  }, 
  "test_WOLFSSL_ERROR_MSG": {
    "label": "error", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_EVP_shake128": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_sign": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_pseudo_rand": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_BIO_puts": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_InitShake256": {
    "label": "test", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_read_write": {
    "string": [
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "client_args.return_code", 
      "\\n    result:   ", 
      "client_args.return_code => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "server_args.return_code", 
      "\\n    result:   ", 
      "server_args.return_code => FALSE"
    ], 
    "abort(.*)": 2, 
    "fflush(.*)": 2, 
    "label": "read", 
    "param1": "void);", 
    "int": 8, 
    "if (.* == 0)": 2, 
    "memset(.*)": 2, 
    "return 0": 1, 
    "fputs(.*)": 6, 
    "char *": 2, 
    "printf(.*)": 6, 
    ".*\\-": 4, 
    "if (.*)": 2, 
    "return": "int"
  }, 
  "test_wc_Sha3_384_Final": {
    "label": "test", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha224GetHash": {
    "label": "get", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_STORE": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_EVP_PKEY_encrypt": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Md5HmacFinal": {
    "if (.* != 0)": 4, 
    "string": [
      "Hi There", 
      "   %s:", 
      "wc_HmacFinal() with MD5", 
      "Hi There"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 7, 
    "if (.* == 0)": 7, 
    "char *": 3, 
    "printf(.*)": 2, 
    ".*\\-": 5, 
    "if (.*)": 8, 
    "return": "int"
  }, 
  "test_fileAccess": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_STORE_CTX_get0_current_issuer": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Md5HmacUpdate": {
    "if (.* != 0)": 2, 
    "string": [
      "what do ya want for nothing?", 
      "Hi There", 
      "   %s:", 
      "wc_HmacUpdate() with MD5", 
      "Hi There", 
      "what do ya want for nothing?", 
      "what do ya want for nothing?", 
      "what do ya want for nothing?"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 7, 
    "if (.* == 0)": 7, 
    "for (.*)": 4, 
    "char *": 4, 
    "printf(.*)": 2, 
    ".*\\-": 4, 
    "if (.*)": 8, 
    "return": "int"
  }, 
  "test_EVP_PKEY_rsa": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_BIO_connect": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_get_finished": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_EVP_EncodeInit": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_X509_STORE_get0_objects": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_InitSha": {
    "if (.* != 0)": 1, 
    "string": [
      "   %s:", 
      "wc_InitSha()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 6, 
    "if (.* == 0)": 2, 
    "char *": 2, 
    "printf(.*)": 2, 
    ".*\\-": 3, 
    "if (.*)": 3, 
    "return": "int"
  }, 
  "test_wolfSSL_read_detect_TCP_disconnect": {
    "label": "read", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha224Final": {
    "label": "test", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_BIO_tls": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_EC_get_builtin_curves": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_get_ext_subj_alt_name": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_CONF_CTX_FILE": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CTX_load_verify_chain_buffer_format": {
    "label": "load", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_RSA_verify": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CTX_der_load_verify_locations": {
    "label": "load", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_RSA_public_decrypt": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_sk_X509": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_d2i_ASN1_INTEGER": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_SSL_in_init": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_OBJ_txt2nid": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Shake256_Copy": {
    "label": "test", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_SHA224": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_ALGOR_get0": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_AllocDer": {
    "if (.* != 0)": 1, 
    "string": [
      "   %s:", 
      "wc_AllocDer()", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "\\n    result:   ", 
      "pDer => NULL"
    ], 
    "abort(.*)": 2, 
    "fflush(.*)": 2, 
    "label": "test", 
    "param1": "void);", 
    "int": 11, 
    "if (.* == 0)": 1, 
    "return 0": 1, 
    "fputs(.*)": 6, 
    "char *": 3, 
    "printf(.*)": 8, 
    ".*\\-": 4, 
    "if (.*)": 2, 
    "return": "int"
  }, 
  "test_wolfSSL_UseTruncatedHMAC": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha512_256GetFlags": {
    "label": "get", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_CRL": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_PKCS8_ED448": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_LOOKUP_ctrl_hash_dir": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha224SetFlags": {
    "label": "test", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha256GetFlags": {
    "label": "get", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_BIO_dump": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_DH_get_2048_256": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha224GetFlags": {
    "label": "get", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_check_ip_asc": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_EVP_PKEY_hkdf": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_RSA_padding_add_PKCS1_PSS": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_get0_param": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_Init": {
    "string": [
      "   %s:", 
      "wolfSSL_Init()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 4, 
    "char *": 2, 
    "printf(.*)": 2, 
    "if (.*)": 2, 
    "return": "int"
  }, 
  "test_wolfSSL_SetMinMaxDhKey_Sz": {
    "string": [
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "\\n    result:   ", 
      "ctx => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "wolfSSL_CTX_use_certificate_buffer(ctx, server_cert_der_2048, sizeof_server_cert_der_2048, WOLFSSL_FILETYPE_ASN1)", 
      "\\n    result:   ", 
      "wolfSSL_CTX_use_certificate_buffer(ctx, server_cert_der_2048, sizeof_server_cert_der_2048, WOLFSSL_FILETYPE_ASN1) => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "wolfSSL_CTX_use_PrivateKey_buffer(ctx, server_key_der_2048, sizeof_server_key_der_2048, WOLFSSL_FILETYPE_ASN1)", 
      "\\n    result:   ", 
      "wolfSSL_CTX_use_PrivateKey_buffer(ctx, server_key_der_2048, sizeof_server_key_der_2048, WOLFSSL_FILETYPE_ASN1) => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_CTX_SetMinDhKey_Sz(ctx, 3072)", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "\\n    result:   ", 
      "ssl => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "\\n    result:   ", 
      "ctx2 => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "wolfSSL_CTX_use_certificate_buffer(ctx2, server_cert_der_2048, sizeof_server_cert_der_2048, WOLFSSL_FILETYPE_ASN1)", 
      "\\n    result:   ", 
      "wolfSSL_CTX_use_certificate_buffer(ctx2, server_cert_der_2048, sizeof_server_cert_der_2048, WOLFSSL_FILETYPE_ASN1) => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "wolfSSL_CTX_use_PrivateKey_buffer(ctx2, server_key_der_2048, sizeof_server_key_der_2048, WOLFSSL_FILETYPE_ASN1)", 
      "\\n    result:   ", 
      "wolfSSL_CTX_use_PrivateKey_buffer(ctx2, server_key_der_2048, sizeof_server_key_der_2048, WOLFSSL_FILETYPE_ASN1) => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_CTX_SetMaxDhKey_Sz(ctx, 1024)", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "\\n    result:   ", 
      "ssl2 => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "DH_KEY_SIZE_E", 
      "wolfSSL_SetTmpDH_buffer(ssl, dh_key_der_2048, sizeof_dh_key_der_2048, WOLFSSL_FILETYPE_ASN1)", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_SetMinDhKey_Sz(ssl, 2048)", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_SetTmpDH_buffer(ssl, dh_key_der_2048, sizeof_dh_key_der_2048, WOLFSSL_FILETYPE_ASN1)", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_SetMinDhKey_Sz(ssl, 3072)", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "DH_KEY_SIZE_E", 
      "wolfSSL_SetTmpDH_buffer(ssl, dh_key_der_2048, sizeof_dh_key_der_2048, WOLFSSL_FILETYPE_ASN1)", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_SetTmpDH_buffer(ssl2, dh_key_der_2048, sizeof_dh_key_der_2048, WOLFSSL_FILETYPE_ASN1)", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_SetMaxDhKey_Sz(ssl2, 2048)", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_SetTmpDH_buffer(ssl2, dh_key_der_2048, sizeof_dh_key_der_2048, WOLFSSL_FILETYPE_ASN1)", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_SetMaxDhKey_Sz(ssl2, 1024)", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "DH_KEY_SIZE_E", 
      "wolfSSL_SetTmpDH_buffer(ssl, dh_key_der_2048, sizeof_dh_key_der_2048, WOLFSSL_FILETYPE_ASN1)", 
      "\\n    result:   ", 
      "%d != %d"
    ], 
    "abort(.*)": 20, 
    "fflush(.*)": 20, 
    "label": "test", 
    "param1": "void);", 
    "int": 89, 
    "if (.* == 0)": 8, 
    "return 0": 1, 
    "fputs(.*)": 60, 
    "char *": 20, 
    "printf(.*)": 60, 
    ".*\\-": 43, 
    "if (.*)": 20, 
    "return": "int"
  }, 
  "test_wolfSSL_no_password_cb": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_dtls_set_mtu": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_sign2": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_ASN1_INTEGER_get_set": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_PEM_bio_RSAKey": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_RSA_print": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_NAME_print_ex": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_either_side": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_VERIFY_PARAM_set1_ip": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_ShaUpdate": {
    "if (.* != 0)": 9, 
    "string": [
      "   %s:", 
      "wc_ShaUpdate()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 6, 
    "if (.* == 0)": 9, 
    "char *": 4, 
    "printf(.*)": 2, 
    ".*\\-": 5, 
    "if (.*)": 14, 
    "return": "int"
  }, 
  "test_wc_Sha256Copy": {
    "string": [
      "   %s:", 
      "wc_Sha256Copy()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 4, 
    "if (.* == 0)": 6, 
    "char *": 2, 
    "printf(.*)": 2, 
    ".*\\-": 3, 
    "if (.*)": 6, 
    "return": "int"
  }, 
  "test_wolfSSL_EVP_DecodeUpdate": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_EVP_PBE_scrypt": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CTX_use_certificate_file": {
    "if (.* != 0)": 3, 
    "string": [
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "ctx = wolfSSL_CTX_new(wolfSSLv23_server_method())", 
      "\\n    result:   ", 
      "ctx = wolfSSL_CTX_new(wolfSSLv23_server_method()) => NULL", 
      "./certs/server-cert.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is false", 
      "wolfSSL_CTX_use_certificate_file(NULL, svrCertFile, WOLFSSL_FILETYPE_PEM)", 
      "\\n    result:   ", 
      "wolfSSL_CTX_use_certificate_file(NULL, svrCertFile, WOLFSSL_FILETYPE_PEM) => TRUE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is false", 
      "wolfSSL_CTX_use_certificate_file(ctx, bogusFile, WOLFSSL_FILETYPE_PEM)", 
      "\\n    result:   ", 
      "wolfSSL_CTX_use_certificate_file(ctx, bogusFile, WOLFSSL_FILETYPE_PEM) => TRUE", 
      "./certs/server-cert.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is false", 
      "wolfSSL_CTX_use_certificate_file(ctx, svrCertFile, 9999)", 
      "\\n    result:   ", 
      "wolfSSL_CTX_use_certificate_file(ctx, svrCertFile, 9999) => TRUE", 
      "./certs/server-cert.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "wolfSSL_CTX_use_certificate_file(ctx, svrCertFile, WOLFSSL_FILETYPE_PEM)", 
      "\\n    result:   ", 
      "wolfSSL_CTX_use_certificate_file(ctx, svrCertFile, WOLFSSL_FILETYPE_PEM) => FALSE"
    ], 
    "abort(.*)": 5, 
    "fflush(.*)": 5, 
    "label": "test", 
    "param1": "void);", 
    "int": 17, 
    "if (.* == 0)": 2, 
    "return 0": 1, 
    "fputs(.*)": 15, 
    "char *": 5, 
    "printf(.*)": 15, 
    ".*\\-": 13, 
    "if (.*)": 5, 
    "return": "int"
  }, 
  "test_wolfSSL_PEM_X509_INFO_read_bio": {
    "label": "read", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Shake256Hash": {
    "label": "test", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CTX_verifyDepth_ServerClient": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_LOOKUP_load_file": {
    "label": "load", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_PEM_read_PUBKEY": {
    "label": "read", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_set_minmax_proto_version": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_GetLoggingCb": {
    "if (.* != 0)": 1, 
    "string": [
      "   %s:", 
      "wolfSSL_GetLoggingCb()"
    ], 
    "fflush(.*)": 1, 
    "label": "get", 
    "param1": "void);", 
    "int": 5, 
    "if (.* == 0)": 1, 
    "char *": 2, 
    "printf(.*)": 2, 
    ".*\\-": 1, 
    "if (.*)": 2, 
    "return": "int"
  }, 
  "test_wolfSSL_PEM_write_mem_RSAPrivateKey": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_BIO_write": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_get_serialNumber": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_STORE_load_locations": {
    "label": "load", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_EXTENSION_get_data": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha3_256_Copy": {
    "label": "test", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CTX_set_client_CA_list": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_cmp": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_verify_mode": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_check_private_key": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_SESSION": {
    "if (.* != 0)": 1, 
    "string": [
      "   %s:", 
      "wolfSSL_SESSION()", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "ctx = wolfSSL_CTX_new(wolfTLSv1_2_client_method())", 
      "\\n    result:   ", 
      "ctx = wolfSSL_CTX_new(wolfTLSv1_2_client_method()) => NULL", 
      "./certs/client-cert.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "wolfSSL_CTX_use_certificate_file(ctx, cliCertFile, WOLFSSL_FILETYPE_PEM)", 
      "\\n    result:   ", 
      "wolfSSL_CTX_use_certificate_file(ctx, cliCertFile, WOLFSSL_FILETYPE_PEM) => FALSE", 
      "./certs/client-key.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "wolfSSL_CTX_use_PrivateKey_file(ctx, cliKeyFile, WOLFSSL_FILETYPE_PEM)", 
      "\\n    result:   ", 
      "wolfSSL_CTX_use_PrivateKey_file(ctx, cliKeyFile, WOLFSSL_FILETYPE_PEM) => FALSE", 
      "./certs/ca-cert.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_load_verify_locations(ctx, \\", 
      ", 0)", 
      "WOLFSSL_SUCCESS", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_set_fd(ssl, sockfd)", 
      "WOLFSSL_SUCCESS", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "WOLFSSL_SUCCESS", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "(int)strlen((sendGET))", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s != %s", 
      "(sess = wolfSSL_get1_session(ssl))", 
      "\\n    result:   ", 
      "%p == %p", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s != %s", 
      "(sess_copy = wolfSSL_get1_session(ssl))", 
      "\\n    result:   ", 
      "%p == %p", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "sess = wolfSSL_get1_session(ssl)", 
      "\\n    result:   ", 
      "sess = wolfSSL_get1_session(ssl) => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_set_session(ssl, sess)", 
      "WOLFSSL_SUCCESS", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "ssl = wolfSSL_new(ctx)", 
      "\\n    result:   ", 
      "ssl = wolfSSL_new(ctx) => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "\\n    result:   ", 
      "%d != %d"
    ], 
    "abort(.*)": 13, 
    "fflush(.*)": 13, 
    "label": "test", 
    "param1": "void);", 
    "int": 62, 
    "if (.* == 0)": 7, 
    "memset(.*)": 1, 
    "while(.*)": 3, 
    "return 0": 1, 
    "fputs(.*)": 39, 
    "char *": 19, 
    "printf(.*)": 41, 
    ".*\\-": 33, 
    "if (.*)": 13, 
    "return": "int", 
    ".*\\+": 4
  }, 
  "test_wolfSSL_CTX_set_cipher_list_bytes": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CTX_SetMinVersion": {
    "string": [
      "   %s:", 
      "wolfSSL_CTX_SetMinVersion()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 8, 
    "for (.*)": 1, 
    "char *": 2, 
    "printf(.*)": 2, 
    "if (.*)": 3, 
    "return": "int", 
    ".*\\+": 1
  }, 
  "test_wc_Sha384HmacSetKey": {
    "if (.* != 0)": 2, 
    "string": [
      "   %s:", 
      "wc_HmacSetKey() with SHA384"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 11, 
    "if (.* == 0)": 6, 
    "for (.*)": 1, 
    "char *": 7, 
    "printf(.*)": 2, 
    ".*\\-": 7, 
    "if (.*)": 10, 
    "return": "int", 
    ".*\\+": 1
  }, 
  "test_wolfSSL_X509_Name_canon": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_PEM_read_X509": {
    "label": "read", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha512_256GetHash": {
    "string": [
      "   %s:", 
      "wc_Sha512_256GetHash()"
    ], 
    "label": "get", 
    "param1": "void);", 
    "int": 4, 
    "if (.* == 0)": 1, 
    "char *": 2, 
    "printf(.*)": 2, 
    "if (.*)": 1, 
    "return": "int"
  }, 
  "test_ENGINE_cleanup": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_sk_X509_CRL": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha256Final": {
    "if (.* != 0)": 2, 
    "string": [
      "   %s:", 
      "wc_Sha256Final()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 9, 
    "if (.* == 0)": 6, 
    "for (.*)": 1, 
    "char *": 2, 
    "printf(.*)": 2, 
    ".*\\-": 7, 
    "if (.*)": 7, 
    "return": "int", 
    ".*\\+": 1
  }, 
  "test_wc_Sha512Update": {
    "if (.* != 0)": 9, 
    "string": [
      "   %s:", 
      "wc_Sha512Update()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 6, 
    "if (.* == 0)": 8, 
    "char *": 4, 
    "printf(.*)": 2, 
    ".*\\-": 5, 
    "if (.*)": 14, 
    "return": "int"
  }, 
  "test_CONF_modules_xxx": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Shake256_Final": {
    "label": "test", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_ecc_get_curve_id_from_params": {
    "string": [
      "   %s:", 
      "wc_ecc_get_curve_id_from_params", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "ECC_SECP256R1", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "ECC_CURVE_INVALID", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "ECC_CURVE_INVALID", 
      "\\n    result:   ", 
      "%d != %d"
    ], 
    "abort(.*)": 4, 
    "fflush(.*)": 4, 
    "label": "get", 
    "param1": "void);", 
    "int": 26, 
    "return 0": 1, 
    "memcpy(.*)": 7, 
    "fputs(.*)": 12, 
    "char *": 5, 
    "printf(.*)": 14, 
    ".*\\-": 11, 
    "if (.*)": 4, 
    "return": "int", 
    ".*\\+": 12
  }, 
  "test_wolfSSL_X509_INFO": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_ASN1_GENERALIZEDTIME_free": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_AES_ecb_encrypt": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_PKCS8": {
    "if (.* < \\d*)": 1, 
    "if (.* != 0)": 1, 
    "string": [
      "./certs/server-keyPkcs8.pem", 
      "./certs/server-keyPkcs8.der", 
      "./certs/ecc-privkeyPkcs8.pem", 
      "./certs/ecc-privkeyPkcs8.der", 
      "   %s:", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "ctx = wolfSSL_CTX_new(wolfTLSv1_2_client_method())", 
      "\\n    result:   ", 
      "ctx = wolfSSL_CTX_new(wolfTLSv1_2_client_method()) => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "(f != XBADFILE)", 
      "\\n    result:   ", 
      "(f != XBADFILE) => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_use_PrivateKey_buffer(ctx, buff, bytes, WOLFSSL_FILETYPE_ASN1)", 
      "WOLFSSL_SUCCESS", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "(f != XBADFILE)", 
      "\\n    result:   ", 
      "(f != XBADFILE) => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_use_PrivateKey_buffer(ctx, buff, bytes, WOLFSSL_FILETYPE_PEM)", 
      "WOLFSSL_SUCCESS", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "(f != XBADFILE)", 
      "\\n    result:   ", 
      "(f != XBADFILE) => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_use_PrivateKey_buffer(ctx, buff, bytes, WOLFSSL_FILETYPE_PEM)", 
      "WOLFSSL_SUCCESS", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s > %s", 
      "(bytes = wc_KeyPemToDer(buff, bytes, der, (word32)sizeof(der), ((void*)0)))", 
      "\\n    result:   ", 
      "%d <= %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "(f != XBADFILE)", 
      "\\n    result:   ", 
      "(f != XBADFILE) => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_use_PrivateKey_buffer(ctx, buff, bytes, WOLFSSL_FILETYPE_ASN1)", 
      "WOLFSSL_SUCCESS", 
      "\\n    result:   ", 
      "%d != %d"
    ], 
    "if (.* < .*)": 1, 
    "abort(.*)": 11, 
    "fflush(.*)": 11, 
    "label": "test", 
    "param1": "void);", 
    "int": 52, 
    "if (.* == 0)": 2, 
    "return 0": 1, 
    "memcpy(.*)": 4, 
    "fputs(.*)": 33, 
    "char *": 24, 
    ".*\\-": 26, 
    "printf(.*)": 35, 
    "if (.*)": 12, 
    "return": "int"
  }, 
  "test_wolfSSL_PKCS5": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_EVP_PKEY_cmp": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_print": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_certs": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_NAME_hash": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_Method_Allocators": {
    "if (.* != 0)": 8, 
    "string": [
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "method = wolfTLSv1_1_server_method()", 
      "\\n    result:   ", 
      "method = wolfTLSv1_1_server_method() => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "method = wolfTLSv1_1_client_method()", 
      "\\n    result:   ", 
      "method = wolfTLSv1_1_client_method() => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "method = wolfTLSv1_2_server_method()", 
      "\\n    result:   ", 
      "method = wolfTLSv1_2_server_method() => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "method = wolfTLSv1_2_client_method()", 
      "\\n    result:   ", 
      "method = wolfTLSv1_2_client_method() => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "method = wolfTLSv1_3_server_method()", 
      "\\n    result:   ", 
      "method = wolfTLSv1_3_server_method() => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "method = wolfTLSv1_3_client_method()", 
      "\\n    result:   ", 
      "method = wolfTLSv1_3_client_method() => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "method = wolfSSLv23_server_method()", 
      "\\n    result:   ", 
      "method = wolfSSLv23_server_method() => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "method = wolfSSLv23_client_method()", 
      "\\n    result:   ", 
      "method = wolfSSLv23_client_method() => NULL"
    ], 
    "abort(.*)": 8, 
    "fflush(.*)": 8, 
    "label": "test", 
    "param1": "void);", 
    "int": 25, 
    "if (.* == 0)": 8, 
    "return 0": 1, 
    "fputs(.*)": 24, 
    "char *": 8, 
    "printf(.*)": 24, 
    ".*\\-": 16, 
    "if (.*)": 16, 
    "return": "int"
  }, 
  "test_wc_Sha224Copy": {
    "label": "test", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_RSA_private_decrypt": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_SetIssueBuffer": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha384Copy": {
    "string": [
      "   %s:", 
      "wc_Sha384Copy()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 3, 
    "if (.* == 0)": 6, 
    "char *": 2, 
    "printf(.*)": 2, 
    ".*\\-": 3, 
    "if (.*)": 6, 
    "return": "int"
  }, 
  "test_EVP_MD_do_all": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_PEM_PUBKEY": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_no_op_functions": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CRYPTO_cts128": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha512_256Final": {
    "string": [
      "   %s:", 
      "wc_Sha512_256Final()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 4, 
    "if (.* == 0)": 1, 
    "char *": 2, 
    "printf(.*)": 2, 
    "if (.*)": 1, 
    "return": "int"
  }, 
  "test_EVP_PKEY_ec": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_SetTmpDH_file": {
    "string": [
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "ctx = wolfSSL_CTX_new(wolfSSLv23_server_method())", 
      "\\n    result:   ", 
      "ctx = wolfSSL_CTX_new(wolfSSLv23_server_method()) => NULL", 
      "./certs/server-cert.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "wolfSSL_CTX_use_certificate_file(ctx, svrCertFile, WOLFSSL_FILETYPE_PEM)", 
      "\\n    result:   ", 
      "wolfSSL_CTX_use_certificate_file(ctx, svrCertFile, WOLFSSL_FILETYPE_PEM) => FALSE", 
      "./certs/server-key.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "wolfSSL_CTX_use_PrivateKey_file(ctx, svrKeyFile, WOLFSSL_FILETYPE_PEM)", 
      "\\n    result:   ", 
      "wolfSSL_CTX_use_PrivateKey_file(ctx, svrKeyFile, WOLFSSL_FILETYPE_PEM) => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "ssl = wolfSSL_new(ctx)", 
      "\\n    result:   ", 
      "ssl = wolfSSL_new(ctx) => NULL", 
      "./certs/dh2048.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s != %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_SetTmpDH_file(((void*)0), \\", 
      ", WOLFSSL_FILETYPE_PEM)", 
      "\\n    result:   ", 
      "%d == %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s != %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_SetTmpDH_file(ssl, ((void*)0), WOLFSSL_FILETYPE_PEM)", 
      "\\n    result:   ", 
      "%d == %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s != %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_SetTmpDH_file(ssl, bogusFile, WOLFSSL_FILETYPE_PEM)", 
      "\\n    result:   ", 
      "%d == %d", 
      "./certs/dh2048.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_SetTmpDH_file(ssl, \\", 
      ", WOLFSSL_FILETYPE_PEM)", 
      "\\n    result:   ", 
      "%d != %d"
    ], 
    "abort(.*)": 8, 
    "fflush(.*)": 8, 
    "label": "test", 
    "param1": "void);", 
    "int": 35, 
    "if (.* == 0)": 4, 
    "return 0": 1, 
    "fputs(.*)": 24, 
    "char *": 8, 
    "printf(.*)": 24, 
    ".*\\-": 18, 
    "if (.*)": 8, 
    "return": "int"
  }, 
  "test_wolfSSL_CTX_add_extra_chain_cert": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_CreateEncryptedPKCS8Key": {
    "if (.* != 0)": 2, 
    "if (.* < \\d*)": 3, 
    "string": [
      "Lorem ipsum dolor sit amet", 
      "   %s:", 
      "test_wc_CreateEncryptedPKCS8Key", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wc_InitRng(&rng)", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wc_CreateEncryptedPKCS8Key((byte*)server_key_der_2048, sizeof_server_key_der_2048, ((void*)0), &encKeySz, password, passwordSz, PKCS5, PBES2, AES256CBCb, ((void*)0), 0, WC_PKCS12_ITT_DEFAULT, &rng, ((void*)0))", 
      "LENGTH_ONLY_E", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "encKey = (byte*)XMALLOC(encKeySz, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER)", 
      "\\n    result:   ", 
      "encKey = (byte*)XMALLOC(encKeySz, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER) => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s > %s", 
      "(decKeySz = wc_DecryptPKCS8Key(encKey, encKeySz, password, passwordSz))", 
      "\\n    result:   ", 
      "%d <= %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "memcmp((encKey + tradIdx),(server_key_der_2048),(sizeof_server_key_der_2048))", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s > %s", 
      "wc_GetPkcs8TraditionalOffset(encKey, &tradIdx, decKeySz)", 
      "\\n    result:   ", 
      "%d <= %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s > %s", 
      "wc_CreateEncryptedPKCS8Key((byte*)server_key_der_2048, sizeof_server_key_der_2048, encKey, &encKeySz, password, passwordSz, PKCS5, PBES2, AES256CBCb, ((void*)0), 0, WC_PKCS12_ITT_DEFAULT, &rng, ((void*)0))", 
      "\\n    result:   ", 
      "%d <= %d"
    ], 
    "if (.* < .*)": 3, 
    "abort(.*)": 7, 
    "fflush(.*)": 7, 
    "label": "test", 
    "param1": "void);", 
    "int": 42, 
    "if (.* == 0)": 2, 
    "return 0": 1, 
    "memcpy(.*)": 1, 
    "fputs(.*)": 21, 
    "char *": 11, 
    "printf(.*)": 23, 
    ".*\\-": 15, 
    "if (.*)": 8, 
    "return": "int", 
    ".*\\+": 7
  }, 
  "test_wc_Sha512_224GetFlags": {
    "label": "get", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CTX_enable_disable": {
    "string": [
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_DisableExtendedMasterSecret(ctx)", 
      "BAD_FUNC_ARG", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "\\n    result:   ", 
      "ctx => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_DisableExtendedMasterSecret(ctx)", 
      "WOLFSSL_SUCCESS", 
      "\\n    result:   ", 
      "%d != %d"
    ], 
    "abort(.*)": 3, 
    "fflush(.*)": 3, 
    "label": "test", 
    "param1": "void);", 
    "int": 15, 
    "if (.* == 0)": 1, 
    "return 0": 1, 
    "fputs(.*)": 9, 
    "char *": 3, 
    ".*\\-": 7, 
    "printf(.*)": 9, 
    "if (.*)": 3, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_cmp_time": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_OCSP_id_get0_info": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha3_256_Final": {
    "label": "test", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_RSA_GenAdd": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_STORE_CTX_get0_store": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_GENERAL_NAME_print": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_i2c_ASN1_INTEGER": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_InitRipeMd": {
    "label": "test", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509V3_EXT_print": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_PEM_bio_DSAKey": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_tls13_cipher_suites": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_LOOKUP_ctrl_file": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CTX_use_certificate_chain_file_format": {
    "string": [
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "\\n    result:   ", 
      "ctx => NULL", 
      "./certs/server-cert-chain.der", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_use_certificate_chain_file_format(ctx, server_chain_der, WOLFSSL_FILETYPE_ASN1)", 
      "WOLFSSL_SUCCESS", 
      "\\n    result:   ", 
      "%d != %d", 
      "./certs/client-cert.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_use_certificate_chain_file_format(ctx, client_single_pem, WOLFSSL_FILETYPE_PEM)", 
      "WOLFSSL_SUCCESS", 
      "\\n    result:   ", 
      "%d != %d"
    ], 
    "abort(.*)": 3, 
    "fflush(.*)": 3, 
    "label": "test", 
    "param1": "void);", 
    "int": 16, 
    "if (.* == 0)": 1, 
    "return 0": 1, 
    "fputs(.*)": 9, 
    "char *": 5, 
    "printf(.*)": 9, 
    ".*\\-": 8, 
    "if (.*)": 3, 
    "return": "int"
  }, 
  "test_wolfSSL_SHA512_Transform": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfCrypt_Init": {
    "string": [
      "   %s:", 
      "wolfCrypt_Init()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 4, 
    "if (.* == 0)": 1, 
    "char *": 2, 
    "printf(.*)": 2, 
    "if (.*)": 1, 
    "return": "int"
  }, 
  "test_wolfssl_EVP_aes_gcm": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_InitMd5": {
    "if (.* != 0)": 1, 
    "string": [
      "   %s:", 
      "wc_InitMd5()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 6, 
    "if (.* == 0)": 2, 
    "char *": 2, 
    "printf(.*)": 2, 
    ".*\\-": 3, 
    "if (.*)": 3, 
    "return": "int"
  }, 
  "test_wc_PemPubKeyToDer": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_PKCS8_Compat": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_InitSha512_224": {
    "if (.* != 0)": 1, 
    "string": [
      "   %s:", 
      "wc_InitSha512_224()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 6, 
    "if (.* == 0)": 2, 
    "char *": 2, 
    "printf(.*)": 2, 
    ".*\\-": 3, 
    "if (.*)": 3, 
    "return": "int"
  }, 
  "test_wolfSSL_SHA256_Transform": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CTX_use_PrivateKey_file": {
    "if (.* != 0)": 3, 
    "string": [
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "ctx = wolfSSL_CTX_new(wolfSSLv23_server_method())", 
      "\\n    result:   ", 
      "ctx = wolfSSL_CTX_new(wolfSSLv23_server_method()) => NULL", 
      "./certs/server-key.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is false", 
      "wolfSSL_CTX_use_PrivateKey_file(NULL, svrKeyFile, WOLFSSL_FILETYPE_PEM)", 
      "\\n    result:   ", 
      "wolfSSL_CTX_use_PrivateKey_file(NULL, svrKeyFile, WOLFSSL_FILETYPE_PEM) => TRUE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is false", 
      "wolfSSL_CTX_use_PrivateKey_file(ctx, bogusFile, WOLFSSL_FILETYPE_PEM)", 
      "\\n    result:   ", 
      "wolfSSL_CTX_use_PrivateKey_file(ctx, bogusFile, WOLFSSL_FILETYPE_PEM) => TRUE", 
      "./certs/server-key.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is false", 
      "wolfSSL_CTX_use_PrivateKey_file(ctx, svrKeyFile, 9999)", 
      "\\n    result:   ", 
      "wolfSSL_CTX_use_PrivateKey_file(ctx, svrKeyFile, 9999) => TRUE", 
      "./certs/server-key.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "wolfSSL_CTX_use_PrivateKey_file(ctx, svrKeyFile, WOLFSSL_FILETYPE_PEM)", 
      "\\n    result:   ", 
      "wolfSSL_CTX_use_PrivateKey_file(ctx, svrKeyFile, WOLFSSL_FILETYPE_PEM) => FALSE"
    ], 
    "abort(.*)": 5, 
    "fflush(.*)": 5, 
    "label": "test", 
    "param1": "void);", 
    "int": 17, 
    "if (.* == 0)": 2, 
    "return 0": 1, 
    "fputs(.*)": 15, 
    "char *": 5, 
    "printf(.*)": 15, 
    ".*\\-": 13, 
    "if (.*)": 5, 
    "return": "int"
  }, 
  "test_error_queue_per_thread": {
    "label": "read", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CertManagerCRL": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_EVP_MD_ecc_signing": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha512_256FinalRaw": {
    "string": [
      "   %s:", 
      "wc_Sha512_256FinalRaw()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 4, 
    "if (.* == 0)": 1, 
    "char *": 2, 
    "printf(.*)": 2, 
    "if (.*)": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_EVP_MD_rsa_signing": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_STORE_CTX_trusted_stack_cleanup": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_BUF": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CTX_SetMinMaxDhKey_Sz": {
    "string": [
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "\\n    result:   ", 
      "ctx => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_CTX_SetMinDhKey_Sz(ctx, 3072)", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "DH_KEY_SIZE_E", 
      "wolfSSL_CTX_SetTmpDH_buffer(ctx, dh_key_der_2048, sizeof_dh_key_der_2048, WOLFSSL_FILETYPE_ASN1)", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_CTX_SetMinDhKey_Sz(ctx, 2048)", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_CTX_SetTmpDH_buffer(ctx, dh_key_der_2048, sizeof_dh_key_der_2048, WOLFSSL_FILETYPE_ASN1)", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_CTX_SetMaxDhKey_Sz(ctx, 1024)", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "DH_KEY_SIZE_E", 
      "wolfSSL_CTX_SetTmpDH_buffer(ctx, dh_key_der_2048, sizeof_dh_key_der_2048, WOLFSSL_FILETYPE_ASN1)", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_CTX_SetMaxDhKey_Sz(ctx, 2048)", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_CTX_SetTmpDH_buffer(ctx, dh_key_der_2048, sizeof_dh_key_der_2048, WOLFSSL_FILETYPE_ASN1)", 
      "\\n    result:   ", 
      "%d != %d"
    ], 
    "abort(.*)": 9, 
    "fflush(.*)": 9, 
    "label": "test", 
    "param1": "void);", 
    "int": 45, 
    "if (.* == 0)": 1, 
    "return 0": 1, 
    "fputs(.*)": 27, 
    "char *": 9, 
    "printf(.*)": 27, 
    ".*\\-": 20, 
    "if (.*)": 9, 
    "return": "int"
  }, 
  "test_wolfssl_PKCS7": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_SetIssuerRaw": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Md5Final": {
    "if (.* != 0)": 1, 
    "string": [
      "   %s:", 
      "wc_Md5Final()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 8, 
    "if (.* == 0)": 6, 
    "for (.*)": 1, 
    "char *": 2, 
    "printf(.*)": 2, 
    ".*\\-": 3, 
    "if (.*)": 7, 
    "return": "int", 
    ".*\\+": 5
  }, 
  "test_wolfSSL_CRYPTO_memcmp": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_OPENSSL_hexstr2buf": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_ctrl": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CertManagerNameConstraint5": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha384GetHash": {
    "string": [
      "   %s:", 
      "wc_Sha384GetHash()"
    ], 
    "label": "get", 
    "param1": "void);", 
    "int": 4, 
    "if (.* == 0)": 5, 
    "char *": 2, 
    "printf(.*)": 2, 
    ".*\\-": 3, 
    "if (.*)": 5, 
    "return": "int"
  }, 
  "test_wolfSSL_CertManagerNameConstraint3": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CertManagerNameConstraint4": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CertManagerNameConstraint2": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_X509_REQ": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_PKEY_up_ref": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CTX_load_verify_buffer_ex": {
    "string": [
      "./certs/test/expired/expired-ca.der", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "\\n    result:   ", 
      "ctx => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "WOLFSSL_SUCCESS == wolfSSL_CTX_load_verify_buffer_ex(ctx, ca_cert_der_2048, sizeof_ca_cert_der_2048, WOLFSSL_FILETYPE_ASN1, 0, WOLFSSL_LOAD_FLAG_NONE)", 
      "\\n    result:   ", 
      "WOLFSSL_SUCCESS == wolfSSL_CTX_load_verify_buffer_ex(ctx, ca_cert_der_2048, sizeof_ca_cert_der_2048, WOLFSSL_FILETYPE_ASN1, 0, WOLFSSL_LOAD_FLAG_NONE) => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "fp != XBADFILE", 
      "\\n    result:   ", 
      "fp != XBADFILE => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s != %s", 
      "wolfSSL_CTX_load_verify_buffer_ex(ctx, ca_expired_cert, sizeof_ca_expired_cert, WOLFSSL_FILETYPE_ASN1, 0, 0x00000000)", 
      "WOLFSSL_SUCCESS", 
      "\\n    result:   ", 
      "%d == %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_load_verify_buffer_ex(ctx, ca_expired_cert, sizeof_ca_expired_cert, WOLFSSL_FILETYPE_ASN1, 0, 0x00000002)", 
      "WOLFSSL_SUCCESS", 
      "\\n    result:   ", 
      "%d != %d"
    ], 
    "abort(.*)": 5, 
    "fflush(.*)": 5, 
    "label": "load", 
    "param1": "void);", 
    "int": 21, 
    "if (.* == 0)": 1, 
    "memset(.*)": 1, 
    "return 0": 1, 
    "fputs(.*)": 15, 
    "char *": 8, 
    ".*\\-": 11, 
    "printf(.*)": 15, 
    "if (.*)": 5, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_PUBKEY_EC": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_d2i_and_i2d_PublicKey": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_OBJ_cmp": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_EVP_PKEY_sign_verify": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_a2i_ASN1_INTEGER": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha512_224Copy": {
    "string": [
      "   %s:", 
      "wc_Sha512_224Copy()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 4, 
    "if (.* == 0)": 6, 
    "char *": 2, 
    "printf(.*)": 2, 
    ".*\\-": 6, 
    "if (.*)": 6, 
    "return": "int"
  }, 
  "test_wc_Sha224HmacSetKey": {
    "label": "test", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_EC_KEY_set_conv_form": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_PubKeyPemToDer": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_GetSubjectRaw": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_SetTmpDH_buffer": {
    "string": [
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "ctx = wolfSSL_CTX_new(wolfSSLv23_server_method())", 
      "\\n    result:   ", 
      "ctx = wolfSSL_CTX_new(wolfSSLv23_server_method()) => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "wolfSSL_CTX_use_certificate_buffer(ctx, server_cert_der_2048, sizeof_server_cert_der_2048, WOLFSSL_FILETYPE_ASN1)", 
      "\\n    result:   ", 
      "wolfSSL_CTX_use_certificate_buffer(ctx, server_cert_der_2048, sizeof_server_cert_der_2048, WOLFSSL_FILETYPE_ASN1) => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is true", 
      "wolfSSL_CTX_use_PrivateKey_buffer(ctx, server_key_der_2048, sizeof_server_key_der_2048, WOLFSSL_FILETYPE_ASN1)", 
      "\\n    result:   ", 
      "wolfSSL_CTX_use_PrivateKey_buffer(ctx, server_key_der_2048, sizeof_server_key_der_2048, WOLFSSL_FILETYPE_ASN1) => FALSE", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "ssl = wolfSSL_new(ctx)", 
      "\\n    result:   ", 
      "ssl = wolfSSL_new(ctx) => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s != %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_SetTmpDH_buffer(((void*)0), dh_key_der_2048, sizeof_dh_key_der_2048, WOLFSSL_FILETYPE_ASN1)", 
      "\\n    result:   ", 
      "%d == %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s != %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_SetTmpDH_buffer(((void*)0), ((void*)0), 0, WOLFSSL_FILETYPE_ASN1)", 
      "\\n    result:   ", 
      "%d == %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s != %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_SetTmpDH_buffer(ssl, dsa_key_der_2048, sizeof_dsa_key_der_2048, WOLFSSL_FILETYPE_ASN1)", 
      "\\n    result:   ", 
      "%d == %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_SetTmpDH_buffer(ssl, dh_key_der_2048, sizeof_dh_key_der_2048, WOLFSSL_FILETYPE_ASN1)", 
      "\\n    result:   ", 
      "%d != %d"
    ], 
    "abort(.*)": 8, 
    "fflush(.*)": 8, 
    "label": "test", 
    "param1": "void);", 
    "int": 35, 
    "if (.* == 0)": 4, 
    "return 0": 1, 
    "fputs(.*)": 24, 
    "char *": 8, 
    "printf(.*)": 24, 
    ".*\\-": 16, 
    "if (.*)": 8, 
    "return": "int"
  }, 
  "test_wolfSSL_RSA": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_DSA_do_sign_verify": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_DTLS_either_side": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CTX_get_keylog_callback": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_ERR_print_errors": {
    "label": "error", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_tmp_dh": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CertManagerGetCerts": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_BN_rand": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_SetSubjectRaw": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha512_224GetHash": {
    "string": [
      "   %s:", 
      "wc_Sha512_224GetHash()"
    ], 
    "label": "get", 
    "param1": "void);", 
    "int": 4, 
    "if (.* == 0)": 1, 
    "char *": 2, 
    "printf(.*)": 2, 
    "if (.*)": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_time_adj": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_RSA_sign_ex": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_get_extension_flags": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CTX_sess_set_remove_cb": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_set_name": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_get_ext": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_SHA256": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfssl_EVP_aes_gcm_AAD_2_parts": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CTX_set_srp_password": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_subject_name_hash": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_CertPemToDer": {
    "if (.* != 0)": 2, 
    "string": [
      "   %s:", 
      "wc_CertPemToDer()", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s >= %s", 
      "\\n    result:   ", 
      "%d < %d"
    ], 
    "abort(.*)": 1, 
    "fflush(.*)": 1, 
    "label": "test", 
    "param1": "void);", 
    "int": 10, 
    "malloc(.*)": 1, 
    "return 0": 1, 
    "fputs(.*)": 3, 
    "char *": 4, 
    "printf(.*)": 5, 
    ".*\\-": 2, 
    "if (.*)": 3, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_NAME_get_entry": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_PKCS7_SIGNED_new": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_INFO_multiple_info": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_PKCS8_d2i": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CTX_get0_privatekey": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_EVP_Digest": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_ShaHmacUpdate": {
    "if (.* != 0)": 2, 
    "string": [
      "what do ya want for nothing?", 
      "Hi There", 
      "   %s:", 
      "wc_HmacUpdate() with SHA", 
      "Hi There", 
      "what do ya want for nothing?", 
      "what do ya want for nothing?", 
      "what do ya want for nothing?"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 7, 
    "if (.* == 0)": 7, 
    "for (.*)": 4, 
    "char *": 4, 
    "printf(.*)": 2, 
    ".*\\-": 4, 
    "if (.*)": 8, 
    "return": "int"
  }, 
  "test_wc_Md5Update": {
    "if (.* != 0)": 7, 
    "string": [
      "   %s:", 
      "wc_Md5Update()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 6, 
    "if (.* == 0)": 9, 
    "char *": 4, 
    "printf(.*)": 2, 
    ".*\\-": 5, 
    "if (.*)": 12, 
    "return": "int"
  }, 
  "test_wolfSSL_PEM_write_RSAPrivateKey": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_ERR_load_crypto_strings": {
    "label": "load", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_EVP_blake2": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CTX_add1_chain_cert": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_EVP_PKEY_new_mac_key": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CMAC": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_set_psk_use_session_callback": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_EXTENSION_new": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CertManagerCheckOCSPResponse": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_set1_curves_list": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_EC_KEY_set_group": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_EXTENSION_get_object": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_OpenSSL_version": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_ASN1_TIME_diff_compare": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_PKCS7_sign": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_CTX_SetTmpDH_buffer": {
    "string": [
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "ctx = wolfSSL_CTX_new(wolfSSLv23_client_method())", 
      "\\n    result:   ", 
      "ctx = wolfSSL_CTX_new(wolfSSLv23_client_method()) => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s != %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_CTX_SetTmpDH_buffer(((void*)0), dh_key_der_2048, sizeof_dh_key_der_2048, WOLFSSL_FILETYPE_ASN1)", 
      "\\n    result:   ", 
      "%d == %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s != %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_CTX_SetTmpDH_buffer(((void*)0), ((void*)0), 0, WOLFSSL_FILETYPE_ASN1)", 
      "\\n    result:   ", 
      "%d == %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s != %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_CTX_SetTmpDH_buffer(ctx, dsa_key_der_2048, sizeof_dsa_key_der_2048, WOLFSSL_FILETYPE_ASN1)", 
      "\\n    result:   ", 
      "%d == %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "WOLFSSL_SUCCESS", 
      "wolfSSL_CTX_SetTmpDH_buffer(ctx, dh_key_der_2048, sizeof_dh_key_der_2048, WOLFSSL_FILETYPE_ASN1)", 
      "\\n    result:   ", 
      "%d != %d"
    ], 
    "abort(.*)": 5, 
    "fflush(.*)": 5, 
    "label": "test", 
    "param1": "void);", 
    "int": 25, 
    "if (.* == 0)": 1, 
    "return 0": 1, 
    "fputs(.*)": 15, 
    "char *": 5, 
    "printf(.*)": 15, 
    ".*\\-": 10, 
    "if (.*)": 5, 
    "return": "int"
  }, 
  "test_wolfSSL_CTX_load_verify_locations": {
    "if (.* != 0)": 3, 
    "string": [
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "ctx = wolfSSL_CTX_new(wolfSSLv23_client_method())", 
      "\\n    result:   ", 
      "ctx = wolfSSL_CTX_new(wolfSSLv23_client_method()) => NULL", 
      "./certs/ca-cert.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_load_verify_locations(((void*)0), \\", 
      ", ((void*)0))", 
      "WOLFSSL_FAILURE", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_load_verify_locations(ctx, ((void*)0), ((void*)0))", 
      "WOLFSSL_FAILURE", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_load_verify_locations(ctx, bogusFile, ((void*)0))", 
      "(WOLFSSL_BAD_FILE)", 
      "\\n    result:   ", 
      "%d != %d", 
      "./certs/ca-cert.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_load_verify_locations(ctx, \\", 
      ", ((void*)0))", 
      "WOLFSSL_SUCCESS", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_UnloadCAs(ctx)", 
      "WOLFSSL_SUCCESS", 
      "\\n    result:   ", 
      "%d != %d", 
      "./certs/ca-cert.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_load_verify_locations(ctx, \\", 
      ", ((void*)0))", 
      "WOLFSSL_SUCCESS", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s is not null", 
      "cm = wolfSSL_CTX_GetCertManager(ctx)", 
      "\\n    result:   ", 
      "cm = wolfSSL_CTX_GetCertManager(ctx) => NULL", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CertManagerUnloadCAs(cm)", 
      "WOLFSSL_SUCCESS", 
      "\\n    result:   ", 
      "%d != %d", 
      "./certs/external", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_load_verify_locations_ex(ctx, ((void*)0), load_certs_path, 0x00000004)", 
      "WOLFSSL_SUCCESS", 
      "\\n    result:   ", 
      "%d != %d", 
      "./examples", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_load_verify_locations_ex(ctx, ((void*)0), load_no_certs_path, 0x00000004)", 
      "WOLFSSL_FAILURE", 
      "\\n    result:   ", 
      "%d != %d", 
      "./certs/test/expired", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_load_verify_locations_ex(ctx, ((void*)0), load_expired_path, 0x00000002 | 0x00000004)", 
      "WOLFSSL_SUCCESS", 
      "\\n    result:   ", 
      "%d != %d", 
      "./certs/external", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "wolfSSL_CTX_load_verify_locations_ex(ctx, ((void*)0), load_certs_path, 0x00000001)", 
      "WOLFSSL_SUCCESS", 
      "\\n    result:   ", 
      "%d != %d"
    ], 
    "abort(.*)": 13, 
    "fflush(.*)": 13, 
    "label": "load", 
    "param1": "void);", 
    "int": 63, 
    "if (.* == 0)": 2, 
    "return 0": 1, 
    "fputs(.*)": 39, 
    "char *": 16, 
    "printf(.*)": 39, 
    ".*\\-": 33, 
    "if (.*)": 13, 
    "return": "int"
  }, 
  "test_wc_Sha224Free": {
    "label": "test", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_PEM_read_RSA_PUBKEY": {
    "label": "read", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_ASN1_STRING": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_UseOCSPStapling": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509V3_EXT": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha3_224_Copy": {
    "label": "test", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha512_224Final": {
    "string": [
      "   %s:", 
      "wc_Sha512_224Final()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 4, 
    "if (.* == 0)": 1, 
    "char *": 2, 
    "printf(.*)": 2, 
    "if (.*)": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_PKCS8_ED25519": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_PemToDer": {
    "if (.* != 0)": 3, 
    "string": [
      "   %s:", 
      "wc_PemToDer()", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "\\n    result:   ", 
      "%d != %d", 
      "./certs/ecc-privOnlyKey.pem", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s == %s", 
      "load_file(ecc_private_key, &cert_buf, &cert_sz)", 
      "\\n    result:   ", 
      "%d != %d", 
      "\\nERROR - %s line %d failed with:", 
      "/home/benterra/Desktop/Finished_ARM_Compilations/wolfssl/arm-wolfssl-master/tests/api.c", 
      "\\n    expected: ", 
      "%s != %s", 
      "(ret = wc_PemToDer(key_buf, cert_sz + 1, CERT_TYPE, &pDer, ((void*)0), &info, &eccKey))", 
      "\\n    result:   ", 
      "%d == %d"
    ], 
    "= .*\\+.*\\+ 0x.*": 1, 
    "abort(.*)": 3, 
    "fflush(.*)": 3, 
    "label": "test", 
    "param1": "void);", 
    "int": 20, 
    "memset(.*)": 2, 
    "return 0": 1, 
    "memcpy(.*)": 1, 
    "fputs(.*)": 9, 
    "char *": 14, 
    "printf(.*)": 11, 
    ".*\\-": 7, 
    "if (.*)": 6, 
    "return": "int", 
    ".*\\+": 3
  }, 
  "test_wc_Sha224Update": {
    "label": "test", 
    "param1": "void);", 
    "int": 1, 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_EVP_MD_pkey_type": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha256HmacUpdate": {
    "if (.* != 0)": 2, 
    "string": [
      "what do ya want for nothing?", 
      "Hi There", 
      "   %s:", 
      "wc_HmacUpdate() with WC_SHA256", 
      "Hi There", 
      "what do ya want for nothing?", 
      "what do ya want for nothing?", 
      "what do ya want for nothing?"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 7, 
    "if (.* == 0)": 7, 
    "for (.*)": 4, 
    "char *": 4, 
    "printf(.*)": 2, 
    ".*\\-": 4, 
    "if (.*)": 8, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_CRL_print": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_STORE_get1_certs": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfssl_EVP_chacha20": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_security_level": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509V3_EXT_get": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_d2i_PUBKEY": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_SSL_CIPHER_get_xxx": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_OCSP_resp_count": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_NAME_ENTRY_get_object": {
    "label": "get", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_Sha512Copy": {
    "string": [
      "   %s:", 
      "wc_Sha512Copy()"
    ], 
    "label": "test", 
    "param1": "void);", 
    "int": 3, 
    "if (.* == 0)": 6, 
    "char *": 2, 
    "printf(.*)": 2, 
    ".*\\-": 3, 
    "if (.*)": 6, 
    "return": "int"
  }, 
  "test_wolfSSL_RSA_sign_sha3": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_mcast": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wc_ShaFinal": {
    "if (.* != 0)": 1, 
    "string": [
      "   %s:", 
      "wc_ShaFinal()"
    ], 
    "= .*\\+.*\\+ 0x.*": 1, 
    "label": "test", 
    "param1": "void);", 
    "int": 8, 
    "if (.* == 0)": 6, 
    "for (.*)": 1, 
    "char *": 2, 
    "printf(.*)": 2, 
    ".*\\-": 3, 
    "if (.*)": 7, 
    "return": "int", 
    ".*\\+": 5
  }, 
  "test_wolfSSL_msg_callback": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_PEM_read_RSAPublicKey": {
    "label": "read", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }, 
  "test_wolfSSL_X509_PUBKEY_DSA": {
    "label": "test", 
    "param1": "void);", 
    "return 0": 1, 
    "return": "int"
  }
}