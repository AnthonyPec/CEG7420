{
  "pbkdf2_test": {
    "label": "test", 
    "params": 0, 
    "int": 1, 
    "if (.* == 0)": 2, 
    "memcpy(.*)": 2, 
    "if (.*)": 2, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "memory_test": {
    "if (.* != 0)": 2, 
    "label": "test", 
    "params": 0, 
    "int": 1, 
    "if (.* == 0)": 2, 
    "if (.*)": 4, 
    "return": 1
  }, 
  "md5_test": {
    "if (.* != 0)": 9, 
    "break": 1, 
    "label": "test", 
    "params": 0, 
    "int": 1, 
    "if (.* == 0)": 2, 
    "while(.*)": 1, 
    "for (.*)": 2, 
    ".*\\-": 7, 
    "if (.*)": 12, 
    "return": 1, 
    ".*\\+": 16, 
    "= .*\\+": 14
  }, 
  "hmac_sha384_test": {
    "if (.* < \\d*)": 1, 
    "if (.* != 0)": 5, 
    "if (.* < .*)": 1, 
    "break": 1, 
    "label": "test", 
    "params": 0, 
    "int": 1, 
    "if (.* == 0)": 1, 
    "while(.*)": 1, 
    "for (.*)": 2, 
    ".*\\-": 1, 
    "if (.*)": 7, 
    "return": 1, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "rsa_sig_test": {
    "RsaKey *": 1, 
    "gets(.*)": 1, 
    "label": "test", 
    "word32": 1, 
    "params": 4, 
    ".*\\+ 0x.*": 27, 
    "int": 2, 
    "WC_RNG *": 1, 
    "if (.*) param": 1, 
    "if (.* == 0)": 9, 
    "memset(.*)": 1, 
    "memcpy(.*)": 3, 
    ".*\\-": 16, 
    "if (.*)": 27, 
    ".*\\+ 0x.* param": 1, 
    "return": 1, 
    ".*\\+": 27, 
    "= .*\\+": 13
  }, 
  "hmac_md5_test": {
    "if (.* < \\d*)": 1, 
    "if (.* != 0)": 5, 
    "if (.* < .*)": 1, 
    "break": 1, 
    "label": "test", 
    "params": 0, 
    "int": 1, 
    "if (.* == 0)": 1, 
    "while(.*)": 1, 
    "for (.*)": 2, 
    ".*\\-": 1, 
    "if (.*)": 7, 
    "return": 1, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "aes192_test": {
    "label": "test", 
    "params": 0, 
    "int": 1, 
    "if (.* == 0)": 8, 
    "memset(.*)": 2, 
    "memcpy(.*)": 1, 
    "if (.*)": 8, 
    "return": 1
  }, 
  "random_rng_test": {
    "label": "test", 
    "params": 0, 
    "int": 1, 
    "memset(.*)": 1, 
    "if (.*)": 3, 
    "return": 1
  }, 
  "main": {
    "if (.* != 0)": 2, 
    "fflush(.*)": 3, 
    "label": "main", 
    "params": 2, 
    "int": 2, 
    "char * *": 1, 
    "printf(.*)": 3, 
    "if (.*)": 2, 
    "return": 1
  }, 
  "dh_ffdhe_test": {
    "DhParams *": 1, 
    "label": "test", 
    "params": 2, 
    ".*\\+ 0x.*": 9, 
    "int": 1, 
    "WC_RNG *": 1, 
    "if (.* == 0)": 8, 
    "memset(.*)": 2, 
    "if (.*)": 9, 
    "return": 1, 
    ".*\\+": 11, 
    "= .*\\+": 6
  }, 
  "ecc_test_vector": {
    "if (.* < \\d*)": 1, 
    "break": 7, 
    "if (.* < .*)": 1, 
    "label": "test", 
    "params": 1, 
    "int": 2, 
    "memset(.*)": 1, 
    "goto": 4, 
    ".*\\-": 2, 
    "if (.*)": 1, 
    "return": 1, 
    "case": 11
  }, 
  "ecc_exp_imp_test": {
    "if (.* < \\d*)": 1, 
    "if (.* != 0)": 1, 
    "ecc_key *": 1, 
    "if (.* < .*)": 1, 
    "label": "test", 
    "params": 1, 
    ".*\\+ 0x.*": 1, 
    "int": 1, 
    "if (.* == 0)": 8, 
    "memcpy(.*)": 3, 
    "if (.*)": 10, 
    "return": 1, 
    ".*\\+": 2, 
    "= .*\\+": 1
  }, 
  "asn_test": {
    "fflush(.*)": 1, 
    "label": "test", 
    "params": 0, 
    "int": 1, 
    "if (.* == 0)": 4, 
    ".*\\-": 2, 
    "printf(.*)": 1, 
    "if (.*)": 6, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "aesgcm_default_test_helper": {
    "if (.* != 0)": 2, 
    "byte *": 6, 
    "if (.* == 0) param": 1, 
    "label": "test", 
    "params": 12, 
    "int": 7, 
    "if (.* == 0)": 8, 
    "if (.*) param": 1, 
    "memset(.*)": 3, 
    "if (.*)": 11, 
    "return": 1
  }, 
  "ecc_test_curve_size": {
    "for (.*) param": 1, 
    "if (.* != 0)": 4, 
    "if (.* < .*)": 1, 
    "if (.* == 0) param": 1, 
    ".*\\+ 0x.*": 12, 
    ".*\\+ param": 1, 
    "if (.* == 0)": 24, 
    "memset(.*)": 3, 
    "while(.*)": 7, 
    "goto": 4, 
    "for (.*)": 4, 
    ".*\\-": 1, 
    "if (.* < .*) param": 1, 
    "= .*\\+ param": 1, 
    ".*\\+": 23, 
    "if (.* != 0) param": 1, 
    "if (.* < \\d*)": 1, 
    "if (.* < \\d*) param": 1, 
    "while(.*) param": 1, 
    "label": "test", 
    "params": 5, 
    "int": 4, 
    "WC_RNG *": 1, 
    "if (.*) param": 1, 
    "ecc_set_type *": 1, 
    "if (.*)": 33, 
    ".*\\+ 0x.* param": 1, 
    "return": 1, 
    "= .*\\+": 7
  }, 
  "dh_fips_generate_test": {
    "label": "test", 
    "params": 1, 
    "int": 1, 
    "WC_RNG *": 1, 
    "if (.* == 0)": 10, 
    "memcpy(.*)": 4, 
    ".*\\-": 7, 
    "if (.*)": 17, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "hkdf_test": {
    "if (.* != 0)": 1, 
    "label": "test", 
    "params": 0, 
    ".*\\+ 0x.*": 9, 
    "int": 1, 
    "if (.* == 0)": 7, 
    "memset(.*)": 1, 
    "memcpy(.*)": 5, 
    "if (.*)": 8, 
    "return": 1, 
    ".*\\+": 10, 
    "= .*\\+": 8
  }, 
  "ecc_test_allocator": {
    "if (.* != 0)": 1, 
    "label": "test", 
    "params": 1, 
    "int": 1, 
    "WC_RNG *": 1, 
    "if (.* == 0)": 1, 
    "if (.*)": 2, 
    "return": 1
  }, 
  "sha256_test": {
    "if (.* != 0)": 9, 
    "break": 1, 
    "label": "test", 
    "params": 0, 
    "int": 1, 
    "if (.* == 0)": 2, 
    "while(.*)": 1, 
    "for (.*)": 2, 
    ".*\\-": 6, 
    "if (.*)": 12, 
    "return": 1, 
    ".*\\+": 4, 
    "= .*\\+": 4
  }, 
  "rsa_test": {
    "if (.* < \\d*)": 12, 
    "if (.* != 0)": 3, 
    "if (.* < .*)": 12, 
    "gets(.*)": 1, 
    "label": "test", 
    "params": 0, 
    "int": 1, 
    "if (.* == 0)": 9, 
    "memset(.*)": 3, 
    "while(.*)": 5, 
    "memcpy(.*)": 2, 
    ".*\\-": 6, 
    "if (.*)": 25, 
    "return": 1
  }, 
  "ecc_test_make_pub": {
    "label": "test", 
    "params": 1, 
    "int": 1, 
    "WC_RNG *": 1, 
    "if (.* == 0)": 22, 
    "while(.*)": 3, 
    ".*\\-": 4, 
    "if (.*)": 24, 
    "return": 1
  }, 
  "pbkdf1_test": {
    "label": "test", 
    "params": 0, 
    "int": 1, 
    "if (.* == 0)": 2, 
    "if (.*)": 2, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "err_sys": {
    "fflush(.*)": 1, 
    "params": 2, 
    "int": 2, 
    "char *": 1, 
    "printf(.*)": 1, 
    ".*\\-": 1, 
    "printf(.*) param": 1, 
    "return": 1
  }, 
  "simple_mem_test": {
    "for (.*) param": 1, 
    "if (.* != 0)": 1, 
    "break": 1, 
    "label": "test", 
    "params": 1, 
    "int": 2, 
    ".*\\+ param": 1, 
    "if (.* == 0)": 1, 
    "for (.*)": 2, 
    "= .*\\+ param": 1, 
    "if (.*)": 3, 
    "return": 1, 
    ".*\\+": 4, 
    "= .*\\+": 2
  }, 
  "memcb_test": {
    "if (.* != 0)": 2, 
    "label": "test", 
    "params": 0, 
    "int": 1, 
    "malloc(.*)": 2, 
    "if (.* == 0)": 3, 
    "if (.*)": 6, 
    "return": 1
  }, 
  "ecc_sig_test": {
    "ecc_key *": 1, 
    "gets(.*)": 1, 
    "label": "test", 
    "params": 2, 
    "int": 1, 
    "WC_RNG *": 1, 
    "if (.* == 0)": 4, 
    "memcpy(.*)": 2, 
    "if (.*)": 5, 
    "return": 1
  }, 
  "hmac_sha512_test": {
    "if (.* < \\d*)": 1, 
    "if (.* != 0)": 5, 
    "if (.* < .*)": 1, 
    "break": 1, 
    "label": "test", 
    "params": 0, 
    "int": 1, 
    "if (.* == 0)": 1, 
    "while(.*)": 1, 
    "for (.*)": 2, 
    ".*\\-": 1, 
    "if (.*)": 7, 
    "return": 1, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "ecc_test_vector_item": {
    "label": "test", 
    "eccVector *": 1, 
    "params": 1, 
    ".*\\+ 0x.*": 9, 
    "int": 1, 
    "if (.* == 0)": 6, 
    "memset(.*)": 2, 
    "while(.*)": 1, 
    "if (.*)": 8, 
    "return": 1, 
    ".*\\+": 10, 
    "= .*\\+": 6
  }, 
  "base64_test": {
    "label": "test", 
    "params": 0, 
    "int": 1, 
    "if (.* == 0)": 5, 
    "memcpy(.*)": 2, 
    "for (.*)": 4, 
    ".*\\-": 15, 
    "if (.*)": 13, 
    "return": 1, 
    ".*\\+": 8, 
    "= .*\\+": 7
  }, 
  "exit": {
    "void": 1, 
    "params": 1, 
    "int": 1, 
    "return;": 1, 
    "return": 0
  }, 
  "rsa_oaep_padding_test": {
    "if (.* < \\d*)": 32, 
    "if (.* != 0)": 2, 
    "if (.* < .*)": 32, 
    "RsaKey *": 1, 
    "gets(.*)": 1, 
    "label": "test", 
    "params": 2, 
    ".*\\+ 0x.*": 20, 
    "int": 1, 
    "WC_RNG *": 1, 
    ".*\\+ param": 1, 
    "if (.* == 0)": 5, 
    "memset(.*)": 6, 
    "while(.*)": 15, 
    "goto": 3, 
    "memcpy(.*)": 2, 
    ".*\\-": 32, 
    "if (.*)": 39, 
    ".*\\+ 0x.* param": 1, 
    "return": 1, 
    ".*\\+": 21, 
    "= .*\\+": 7
  }, 
  "ecc_ssh_test": {
    "ecc_key *": 1, 
    "label": "test", 
    "params": 2, 
    ".*\\+ 0x.*": 3, 
    "int": 1, 
    "WC_RNG *": 1, 
    "if (.* == 0)": 3, 
    "while(.*)": 1, 
    ".*\\-": 6, 
    "if (.*)": 7, 
    "return": 1, 
    ".*\\- param": 1, 
    ".*\\+": 3, 
    "= .*\\+": 3
  }, 
  "sha512_test": {
    "if (.* != 0)": 10, 
    "if (.* < \\d*)": 1, 
    "if (.* < .*)": 1, 
    "break": 2, 
    "label": "test", 
    "params": 0, 
    ".*\\+ 0x.*": 9, 
    "int": 1, 
    "if (.* == 0)": 2, 
    "while(.*)": 2, 
    "for (.*)": 2, 
    ".*\\-": 9, 
    "if (.*)": 14, 
    "return": 1, 
    ".*\\+": 14, 
    "= .*\\+": 13
  }, 
  "rsa_export_key_test": {
    "RsaKey *": 1, 
    "label": "test", 
    "params": 1, 
    ".*\\+ 0x.*": 17, 
    "int": 1, 
    ".*\\+ param": 1, 
    "if (.* == 0)": 1, 
    ".*\\-": 16, 
    "= .*\\+ param": 1, 
    "if (.*)": 17, 
    ".*\\+ 0x.* param": 1, 
    "return": 1, 
    ".*\\+": 17, 
    "= .*\\+": 17
  }, 
  "dh_test": {
    "label": "test", 
    "params": 0, 
    "int": 1, 
    "if (.* == 0)": 15, 
    "memset(.*)": 1, 
    "if (.*)": 18, 
    "return": 1
  }, 
  "dh_test_check_pubvalue": {
    "if (.* < \\d*)": 1, 
    "if (.* != 0)": 1, 
    "if (.* < .*)": 1, 
    "break": 1, 
    "label": "test", 
    "params": 0, 
    "int": 1, 
    "memset(.*)": 2, 
    "while(.*)": 1, 
    "return 0": 1, 
    "for (.*)": 1, 
    ".*\\-": 3, 
    "if (.*)": 3, 
    "return": 1, 
    ".*\\+": 13, 
    "= .*\\+": 11
  }, 
  "my_Free_cb": {
    "void": 1, 
    "label": "free", 
    "params": 1, 
    "return;": 1, 
    "void *": 1, 
    "return": 0, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "ecc_test_curve": {
    "if (.* < \\d*)": 4, 
    "if (.* < .*)": 4, 
    "fflush(.*)": 4, 
    "label": "test", 
    "params": 2, 
    "int": 2, 
    "WC_RNG *": 1, 
    ".*\\-": 3, 
    "printf(.*)": 4, 
    "printf(.*) param": 1, 
    "if (.*)": 4, 
    "return": 1
  }, 
  "my_Malloc_cb": {
    "malloc(.*) param": 1, 
    "void": 1, 
    "label": "malloc", 
    "size_t": 1, 
    "params": 1, 
    "malloc(.*)": 2, 
    "return": 0, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "_SaveDerAndPem": {
    "byte *": 1, 
    "label": "save", 
    "params": 6, 
    "int": 4, 
    ".*\\+ param": 1, 
    "if (.*) param": 1, 
    "char *": 2, 
    "= .*\\+ param": 1, 
    "if (.*)": 2, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "chacha_test": {
    "if (.* < \\d*)": 1, 
    "if (.* != 0)": 20, 
    "if (.* < .*)": 1, 
    "label": "test", 
    "params": 0, 
    ".*\\+ 0x.*": 42, 
    "int": 1, 
    "if (.* == 0)": 9, 
    "memset(.*)": 13, 
    "memcpy(.*)": 3, 
    "for (.*)": 4, 
    ".*\\-": 8, 
    "if (.*)": 30, 
    "return": 1, 
    ".*\\+": 57, 
    "= .*\\+": 49
  }, 
  "ecc_def_curve_test": {
    "if (.* < \\d*)": 2, 
    "if (.* < .*)": 2, 
    "label": "test", 
    "params": 1, 
    "int": 1, 
    "WC_RNG *": 1, 
    "if (.* == 0)": 3, 
    ".*\\-": 4, 
    "if (.*)": 5, 
    "return": 1
  }, 
  "aesgcm_test": {
    "if (.* != 0)": 6, 
    "label": "test", 
    "params": 0, 
    "int": 1, 
    "if (.* == 0)": 34, 
    "memset(.*)": 19, 
    "goto": 6, 
    "memcpy(.*)": 7, 
    "for (.*)": 5, 
    ".*\\-": 2, 
    "if (.*)": 44, 
    "return": 1, 
    ".*\\+": 7, 
    "= .*\\+": 6
  }, 
  "time_cb": {
    "params": 1, 
    "if (.*) param": 1, 
    "if (.*)": 1, 
    "return": 1, 
    "time_t *": 1
  }, 
  "ecc_mulmod_test": {
    "ecc_key *": 1, 
    "label": "test", 
    "params": 1, 
    ".*\\+ 0x.*": 7, 
    "int": 1, 
    "if (.* == 0)": 1, 
    "if (.*)": 1, 
    "return": 1, 
    ".*\\+": 7
  }, 
  "pwdbased_test": {
    "label": "test", 
    "params": 0, 
    "int": 1, 
    "if (.* == 0)": 1, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "dh_generate_test": {
    "label": "test", 
    "params": 1, 
    "int": 1, 
    "WC_RNG *": 1, 
    "if (.* == 0)": 2, 
    ".*\\-": 6, 
    "if (.*)": 9, 
    "return": 1
  }, 
  "my_Realloc_cb": {
    "void": 1, 
    "size_t": 1, 
    "params": 2, 
    "void *": 1, 
    "return": 0, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "random_test": {
    "label": "test", 
    "params": 0, 
    ".*\\+ 0x.*": 6, 
    "int": 1, 
    "if (.* == 0)": 8, 
    "memset(.*)": 1, 
    "memcpy(.*)": 5, 
    "for (.*)": 2, 
    "if (.*)": 8, 
    "return": 1, 
    ".*\\+": 8, 
    "= .*\\+": 5
  }, 
  "ecc_test_key_gen": {
    "if (.* < \\d*)": 1, 
    "if (.* < .*)": 1, 
    "if (.* == 0) param": 1, 
    "label": "test", 
    "params": 2, 
    ".*\\+ 0x.*": 1, 
    "int": 2, 
    "WC_RNG *": 1, 
    "if (.*) param": 1, 
    "if (.* == 0)": 4, 
    ".*\\-": 3, 
    "if (.*)": 5, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "rsa_flatten_test": {
    "RsaKey *": 1, 
    "label": "test", 
    "params": 1, 
    "int": 1, 
    "if (.* == 0)": 1, 
    ".*\\-": 7, 
    "if (.*)": 8, 
    "return": 1
  }, 
  "_rng_test": {
    "if (.* < \\d*)": 1, 
    "if (.* != 0)": 1, 
    "if (.* < .*)": 1, 
    "label": "test", 
    "params": 2, 
    "int": 2, 
    "WC_RNG *": 1, 
    "if (.* == 0)": 2, 
    "memset(.*)": 1, 
    "for (.*)": 1, 
    ".*\\-": 4, 
    "if (.*)": 9, 
    "return": 1, 
    ".*\\+": 3, 
    "= .*\\+": 3
  }, 
  "chacha20_poly1305_aead_test": {
    "if (.* < \\d*)": 4, 
    "if (.* != 0)": 4, 
    "if (.* < .*)": 4, 
    "label": "test", 
    "params": 0, 
    ".*\\+ 0x.*": 37, 
    "int": 1, 
    "if (.* == 0)": 30, 
    "memset(.*)": 13, 
    "memcpy(.*)": 6, 
    "for (.*)": 4, 
    ".*\\-": 32, 
    "if (.*)": 65, 
    "return": 1, 
    ".*\\+": 69, 
    "= .*\\+": 13
  }, 
  "ecc_test": {
    "if (.* < \\d*)": 1, 
    "if (.* != 0)": 1, 
    "if (.* < .*)": 1, 
    "fflush(.*)": 2, 
    "label": "test", 
    "params": 0, 
    "int": 1, 
    "if (.* == 0)": 2, 
    ".*\\-": 8, 
    "printf(.*)": 2, 
    "if (.*)": 4, 
    "return": 1
  }, 
  "aesgcm_default_test": {
    "label": "test", 
    "params": 0, 
    "int": 1, 
    "if (.* == 0)": 1, 
    "memcpy(.*)": 2, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "rsa_decode_test": {
    "if (.* != 0)": 9, 
    "RsaKey *": 1, 
    "label": "test", 
    "params": 1, 
    ".*\\+ 0x.*": 12, 
    "int": 1, 
    "if (.* == 0)": 6, 
    "memcpy(.*)": 8, 
    ".*\\-": 19, 
    "if (.*)": 35, 
    ".*\\+ 0x.* param": 1, 
    "return": 1, 
    ".*\\+": 27, 
    "= .*\\+": 19
  }, 
  "poly1305_test": {
    "if (.* < \\d*)": 1, 
    "if (.* != 0)": 4, 
    "if (.* < .*)": 1, 
    "break": 1, 
    "label": "test", 
    "params": 0, 
    ".*\\+ 0x.*": 13, 
    "int": 1, 
    "if (.* == 0)": 5, 
    "memset(.*)": 3, 
    "while(.*)": 1, 
    "memcpy(.*)": 8, 
    ".*\\-": 4, 
    "if (.*)": 10, 
    "return": 1, 
    ".*\\+": 17, 
    "= .*\\+": 14
  }, 
  "pkcs12_test": {
    "if (.* < \\d*)": 3, 
    "if (.* < .*)": 3, 
    "label": "test", 
    "params": 0, 
    ".*\\+ 0x.*": 2, 
    "int": 1, 
    "if (.* == 0)": 2, 
    "memcpy(.*)": 2, 
    "if (.*)": 5, 
    "return": 1, 
    ".*\\+": 3, 
    "= .*\\+": 3
  }, 
  "hash_test": {
    "if (.* < \\d*)": 4, 
    "if (.* != 0)": 1, 
    "if (.* < .*)": 4, 
    "label": "test", 
    "params": 0, 
    "int": 1, 
    "if (.* == 0)": 14, 
    "memcpy(.*)": 3, 
    "for (.*)": 3, 
    ".*\\-": 45, 
    "if (.*)": 46, 
    "return": 1, 
    ".*\\+": 4, 
    "= .*\\+": 4
  }, 
  "aes_test": {
    "label": "test", 
    "params": 0, 
    "int": 1, 
    "if (.* == 0)": 19, 
    "memset(.*)": 4, 
    "memcpy(.*)": 5, 
    "if (.*)": 21, 
    "return": 1
  }, 
  "aes256_test": {
    "label": "test", 
    "params": 0, 
    "int": 1, 
    "if (.* == 0)": 8, 
    "memset(.*)": 2, 
    "memcpy(.*)": 1, 
    "if (.*)": 8, 
    "return": 1
  }, 
  "aes_key_size_test": {
    "label": "test", 
    "params": 0, 
    "int": 1, 
    "if (.* == 0)": 8, 
    "memcpy(.*)": 3, 
    "for (.*)": 1, 
    ".*\\-": 8, 
    "if (.*)": 15, 
    "return": 1
  }, 
  "hmac_sha256_test": {
    "if (.* < \\d*)": 1, 
    "if (.* != 0)": 4, 
    "if (.* < .*)": 1, 
    "break": 1, 
    "label": "test", 
    "params": 0, 
    "int": 1, 
    "if (.* == 0)": 2, 
    "while(.*)": 1, 
    "for (.*)": 2, 
    ".*\\-": 6, 
    "if (.*)": 9, 
    "return": 1, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "logging_test": {
    "label": "test", 
    "params": 0, 
    "int": 1, 
    ".*\\-": 2, 
    "if (.*)": 2, 
    "return": 1
  }, 
  "sha_test": {
    "if (.* != 0)": 9, 
    "break": 1, 
    "label": "test", 
    "params": 0, 
    ".*\\+ 0x.*": 8, 
    "int": 1, 
    "if (.* == 0)": 2, 
    "while(.*)": 1, 
    "for (.*)": 2, 
    ".*\\-": 8, 
    "if (.*)": 12, 
    "return": 1, 
    ".*\\+": 16, 
    "= .*\\+": 14
  }, 
  "hmac_sha_test": {
    "if (.* < \\d*)": 1, 
    "if (.* != 0)": 5, 
    "if (.* < .*)": 1, 
    "break": 1, 
    "label": "test", 
    "params": 0, 
    "int": 1, 
    "if (.* == 0)": 1, 
    "while(.*)": 1, 
    "for (.*)": 2, 
    ".*\\-": 1, 
    "if (.*)": 7, 
    "return": 1, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "sha384_test": {
    "if (.* != 0)": 9, 
    "break": 1, 
    "label": "test", 
    "params": 0, 
    ".*\\+ 0x.*": 8, 
    "int": 1, 
    "if (.* == 0)": 2, 
    "while(.*)": 1, 
    "for (.*)": 2, 
    ".*\\-": 7, 
    "if (.*)": 12, 
    "return": 1, 
    ".*\\+": 11, 
    "= .*\\+": 10
  }, 
  "tls13_kdf_test": {
    "if (.* < \\d*)": 1, 
    "if (.* != 0)": 22, 
    "if (.* < .*)": 1, 
    "break": 1, 
    "label": "test", 
    "params": 0, 
    ".*\\+ 0x.*": 24, 
    "int": 1, 
    "if (.* == 0)": 3, 
    "memset(.*)": 1, 
    "while(.*)": 1, 
    ".*\\-": 29, 
    "if (.*)": 26, 
    "return": 1, 
    ".*\\+": 26, 
    "= .*\\+": 12
  }, 
  "time_test": {
    "label": "test", 
    "params": 0, 
    "int": 1, 
    "if (.* == 0)": 3, 
    "if (.*)": 5, 
    "return": 1
  }, 
  "gmac_test": {
    "label": "test", 
    "params": 0, 
    "int": 1, 
    "if (.* == 0)": 7, 
    "memset(.*)": 5, 
    ".*\\-": 2, 
    "if (.*)": 8, 
    "return": 1
  }, 
  "ecc_test_key_decode": {
    "if (.* < \\d*)": 1, 
    "if (.* < .*)": 1, 
    "label": "test", 
    "params": 2, 
    "int": 2, 
    "WC_RNG *": 1, 
    "if (.* == 0)": 5, 
    ".*\\-": 1, 
    "if (.*)": 6, 
    "return": 1
  }, 
  "ecc_point_test": {
    "label": "test", 
    "params": 0, 
    ".*\\+ 0x.*": 5, 
    "int": 1, 
    "if (.* == 0)": 10, 
    "memcpy(.*)": 2, 
    ".*\\-": 15, 
    "if (.*)": 25, 
    "return": 1, 
    ".*\\+": 5, 
    "= .*\\+": 4
  }, 
  "error_test": {
    "if (.* < \\d*)": 2, 
    "if (.* != 0)": 3, 
    "if (.* < .*)": 2, 
    "label": "error", 
    "params": 0, 
    ".*\\+ 0x.*": 1, 
    "int": 1, 
    "if (.* == 0)": 4, 
    "while(.*)": 1, 
    "memcpy(.*)": 1, 
    ".*\\-": 3, 
    "if (.*)": 10, 
    "return": 1, 
    ".*\\+": 3, 
    "= .*\\+": 2
  }, 
  "rsa_pss_test": {
    "if (.* < \\d*)": 16, 
    "if (.* != 0)": 2, 
    "if (.* < .*)": 16, 
    "RsaKey *": 1, 
    "gets(.*)": 1, 
    "label": "test", 
    "params": 2, 
    ".*\\+ 0x.*": 15, 
    "int": 1, 
    "WC_RNG *": 1, 
    "if (.* == 0)": 2, 
    "while(.*)": 11, 
    "memcpy(.*)": 4, 
    "for (.*)": 1, 
    ".*\\-": 24, 
    "if (.*)": 26, 
    "return": 1, 
    ".*\\+": 27, 
    "= .*\\+": 10
  }, 
  "wolfcrypt_test": {
    "fflush(.*)": 39, 
    "label": "test", 
    "params": 1, 
    "int": 1, 
    ".*\\+ param": 1, 
    "if (.*) param": 1, 
    "if (.* == 0)": 35, 
    "void *": 1, 
    "printf(.*)": 39, 
    ".*\\-": 25, 
    "if (.*)": 38, 
    "return": 1, 
    ".*\\+": 2
  }, 
  "mutex_test": {
    "if (.* != 0)": 1, 
    "label": "test", 
    "params": 0, 
    "int": 1, 
    "if (.* == 0)": 5, 
    "if (.*)": 6, 
    "return": 1
  }, 
  "aes_cbc_test": {
    "label": "test", 
    "params": 0, 
    ".*\\+ 0x.*": 4, 
    "int": 1, 
    "if (.* == 0)": 3, 
    "memset(.*)": 2, 
    "memcpy(.*)": 3, 
    "for (.*)": 1, 
    ".*\\-": 2, 
    "if (.*)": 5, 
    "return": 1, 
    ".*\\+": 7, 
    "= .*\\+": 5
  }
}