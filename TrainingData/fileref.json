{
  "operator=": {
    "params": 2, 
    "return": 1, 
    "FileRef *": 2
  }, 
  "swap<TagLib::FileRef::FileRefPrivate_*>": {
    "void": 1, 
    "FileRefPrivate * *": 2, 
    "params": 2, 
    "return;": 1, 
    "return": 0
  }, 
  "operator==": {
    "params": 2, 
    ".*\\-": 1, 
    "return": 1, 
    "FileRef *": 2, 
    ".*\\- param": 1
  }, 
  "_List_base": {
    "void": 1, 
    "params": 1, 
    "_List_base<const_TagLib::FileRef::FileTypeResolver_*,_std::allocator<const_TagLib::FileRef::FileTypeResolver_*>_> *": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "return": 0, 
    ".*\\- param": 1
  }, 
  "deallocate": {
    "pointer": 1, 
    "void": 1, 
    "size_type": 1, 
    "delete(.*)": 1, 
    "params": 3, 
    "delete(.*) param": 1, 
    "new_allocator<std::_List_node<const_TagLib::FileRef::FileTypeResolver_*>_> *": 1, 
    "return;": 1, 
    "return": 0
  }, 
  "prepend": {
    "FileTypeResolver * *": 1, 
    "params": 2, 
    "List<const_TagLib::FileRef::FileTypeResolver_*> *": 1, 
    ".*\\-": 1, 
    "return": 1, 
    ".*\\- param": 1
  }, 
  "_M_get_Node_allocator": {
    "label": "get", 
    "params": 1, 
    "_List_base<const_TagLib::FileRef::FileTypeResolver_*,_std::allocator<const_TagLib::FileRef::FileTypeResolver_*>_> *": 1, 
    "return": 1
  }, 
  "construct": {
    "pointer": 1, 
    "void": 1, 
    "FileTypeResolver * *": 1, 
    "params": 3, 
    "return;": 1, 
    "new_allocator<const_TagLib::FileRef::FileTypeResolver_*> *": 1, 
    "return": 0
  }, 
  "ListPrivateBase": {
    "void": 1, 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 2, 
    "return": 0, 
    ".*\\- param": 1, 
    "ListPrivateBase *": 1
  }, 
  "_M_clear": {
    "void": 1, 
    "while(.*) param": 1, 
    "params": 1, 
    "_List_base<const_TagLib::FileRef::FileTypeResolver_*,_std::allocator<const_TagLib::FileRef::FileTypeResolver_*>_> *": 1, 
    "return;": 1, 
    "while(.*)": 1, 
    ".*\\-": 1, 
    "return": 0, 
    ".*\\- param": 1
  }, 
  "~FileRef": {
    "void": 1, 
    "delete(.*)": 1, 
    "label": "~", 
    "params": 1, 
    "delete(.*) param": 1, 
    "return;": 1, 
    "return": 0, 
    "FileRef *": 1
  }, 
  "_M_inc_size": {
    "void": 1, 
    "size_t": 1, 
    "params": 2, 
    ".*\\+ param": 1, 
    "_List_base<const_TagLib::FileRef::FileTypeResolver_*,_std::allocator<const_TagLib::FileRef::FileTypeResolver_*>_> *": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "= .*\\+ param": 1, 
    "return": 0, 
    ".*\\+": 1, 
    ".*\\- param": 1, 
    "= .*\\+": 1
  }, 
  "allocator": {
    "void": 1, 
    "params": 1, 
    "return;": 1, 
    "allocator<std::_List_node<const_TagLib::FileRef::FileTypeResolver_*>_> *": 1, 
    "return": 0
  }, 
  "~ListPrivate": {
    "void": 1, 
    "label": "~", 
    "params": 1, 
    "ListPrivate<const_TagLib::FileRef::FileTypeResolver_*> *": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "return": 0, 
    ".*\\- param": 1
  }, 
  "FileRef": {
    "void": 1, 
    "params": 2, 
    "return;": 1, 
    ".*\\-": 2, 
    "return": 0, 
    "FileRef *": 2, 
    ".*\\- param": 1
  }, 
  "create": {
    "bool": 1, 
    "FileName": 1, 
    "label": "create", 
    "params": 3, 
    "ReadStyle": 1, 
    "return": 1
  }, 
  "List": {
    "void": 1, 
    "params": 1, 
    "List<const_TagLib::FileRef::FileTypeResolver_*> *": 1, 
    "return;": 1, 
    ".*\\-": 2, 
    "return": 0, 
    ".*\\- param": 1
  }, 
  "tag": {
    "params": 1, 
    ".*\\-": 2, 
    "if (.*)": 1, 
    "return": 1, 
    "FileRef *": 1, 
    ".*\\- param": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "operator*": {
    "params": 1, 
    "_List_const_iterator<const_TagLib::FileRef::FileTypeResolver_*> *": 1, 
    ".*\\-": 1, 
    "return": 1, 
    ".*\\- param": 1
  }, 
  "detectByResolvers": {
    "bool": 1, 
    "break": 1, 
    "params": 3, 
    "ReadStyle": 1, 
    "while(.*)": 1, 
    "IOStream *": 1, 
    "if (.*)": 3, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "detectByExtension": {
    "if (.* != 0)": 2, 
    "bool": 1, 
    "params": 3, 
    ".*\\+ param": 1, 
    "ReadStyle": 1, 
    "if (.* == 0)": 17, 
    "goto": 1, 
    ".*\\-": 1, 
    "IOStream *": 1, 
    "= .*\\+ param": 1, 
    "if (.*)": 22, 
    "return": 1, 
    ".*\\+": 2, 
    "= .*\\+": 1
  }, 
  "_M_init": {
    "void": 1, 
    "label": "init", 
    "params": 1, 
    "_List_base<const_TagLib::FileRef::FileTypeResolver_*,_std::allocator<const_TagLib::FileRef::FileTypeResolver_*>_> *": 1, 
    "return;": 1, 
    "return": 0
  }, 
  "ListPrivate": {
    "void": 1, 
    "params": 1, 
    "ListPrivate<const_TagLib::FileRef::FileTypeResolver_*> *": 1, 
    "return;": 1, 
    ".*\\-": 2, 
    "return": 0, 
    ".*\\- param": 1
  }, 
  "_M_initialize_dispatch<std::_List_const_iterator<const_TagLib::FileRef::FileTypeResolver_*>_>": {
    "void": 1, 
    "label": "init", 
    "params": 3, 
    "return;": 1, 
    "while(.*)": 1, 
    "_List_const_iterator<const_TagLib::FileRef::FileTypeResolver_*>": 2, 
    "return": 0, 
    "list<const_TagLib::FileRef::FileTypeResolver_*,_std::allocator<const_TagLib::FileRef::FileTypeResolver_*>_> *": 1
  }, 
  "operator!=": {
    "_Self *": 2, 
    "params": 2, 
    ".*\\-": 1, 
    "return": 1, 
    ".*\\- param": 1
  }, 
  "createInternal": {
    "bool": 1, 
    "FileName": 1, 
    "label": "create", 
    "params": 3, 
    "ReadStyle": 1, 
    "if (.* == 0)": 20, 
    ".*\\-": 1, 
    "if (.*)": 23, 
    "return": 1, 
    ".*\\+": 1
  }, 
  "swap": {
    "void": 1, 
    "params": 2, 
    "return;": 1, 
    ".*\\-": 1, 
    "return": 0, 
    "FileRef *": 2, 
    ".*\\- param": 1
  }, 
  "_List_iterator": {
    "void": 1, 
    "_List_iterator<const_TagLib::FileRef::FileTypeResolver_*> *": 1, 
    "params": 2, 
    "return;": 1, 
    ".*\\-": 1, 
    "return": 0, 
    ".*\\- param": 1, 
    "_List_node_base *": 1
  }, 
  "new_allocator": {
    "void": 1, 
    "params": 1, 
    "new_allocator<std::_List_node<const_TagLib::FileRef::FileTypeResolver_*>_> *": 1, 
    "return;": 1, 
    "return": 0
  }, 
  "count": {
    "RefCounterOld *": 1, 
    "label": "count", 
    "params": 1, 
    "int": 1, 
    ".*\\-": 1, 
    "return": 1, 
    ".*\\- param": 1
  }, 
  "destroy": {
    "pointer": 1, 
    "void": 1, 
    "label": "destroy", 
    "params": 2, 
    "return;": 1, 
    "new_allocator<const_TagLib::FileRef::FileTypeResolver_*> *": 1, 
    "return": 0
  }, 
  "_GLOBAL__sub_I_fileref.cpp": {
    "void": 1, 
    "params": 0, 
    "return;": 1, 
    "return": 0
  }, 
  "list": {
    "void": 1, 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "return": 0, 
    ".*\\- param": 1, 
    "list<const_TagLib::FileRef::FileTypeResolver_*,_std::allocator<const_TagLib::FileRef::FileTypeResolver_*>_> *": 1
  }, 
  "addFileTypeResolver": {
    "FileTypeResolver *": 1, 
    "label": "add", 
    "params": 1, 
    "return": 1
  }, 
  "max_size": {
    "params": 1, 
    "new_allocator<std::_List_node<const_TagLib::FileRef::FileTypeResolver_*>_> *": 1, 
    "return": 1
  }, 
  "~List": {
    "void": 1, 
    "delete(.*)": 1, 
    "label": "~", 
    "params": 1, 
    "delete(.*) param": 1, 
    "List<const_TagLib::FileRef::FileTypeResolver_*> *": 1, 
    "return;": 1, 
    "return": 0
  }, 
  "defaultFileExtensions": {
    "params": 0, 
    "return": 1
  }, 
  "__addressof<const_TagLib::FileRef::FileTypeResolver_*>": {
    "FileTypeResolver * *": 1, 
    "label": "add", 
    "params": 1, 
    "return": 1
  }, 
  "allocate": {
    "if (.* < \\d*)": 1, 
    "size_type": 1, 
    "if (.* < .*)": 1, 
    "params": 3, 
    "int": 1, 
    "new_allocator<std::_List_node<const_TagLib::FileRef::FileTypeResolver_*>_> *": 1, 
    "if (.*) param": 1, 
    "void *": 1, 
    "if (.* < .*) param": 1, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "_M_get_node": {
    "label": "get", 
    "params": 1, 
    "int": 1, 
    "_List_base<const_TagLib::FileRef::FileTypeResolver_*,_std::allocator<const_TagLib::FileRef::FileTypeResolver_*>_> *": 1, 
    "return": 1
  }, 
  "_List_const_iterator": {
    "void": 1, 
    "params": 2, 
    "_List_const_iterator<const_TagLib::FileRef::FileTypeResolver_*> *": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "return": 0, 
    ".*\\- param": 1, 
    "_List_node_base *": 1
  }, 
  "_List_impl": {
    "void": 1, 
    "_List_impl *": 1, 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "return": 0, 
    ".*\\- param": 1
  }, 
  "begin": {
    "params": 1, 
    ".*\\-": 1, 
    "return": 1, 
    ".*\\- param": 1, 
    "list<const_TagLib::FileRef::FileTypeResolver_*,_std::allocator<const_TagLib::FileRef::FileTypeResolver_*>_> *": 1
  }, 
  "~list": {
    "void": 1, 
    "label": "~", 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "return": 0, 
    ".*\\- param": 1, 
    "list<const_TagLib::FileRef::FileTypeResolver_*,_std::allocator<const_TagLib::FileRef::FileTypeResolver_*>_> *": 1
  }, 
  "RefCounterOld": {
    "void": 1, 
    "RefCounterOld *": 1, 
    "label": "count", 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "return": 0, 
    ".*\\- param": 1
  }, 
  "_M_create_node": {
    "label": "create", 
    "params": 2, 
    "value_type *": 1, 
    ".*\\-": 2, 
    "return": 1, 
    ".*\\- param": 1, 
    "list<const_TagLib::FileRef::FileTypeResolver_*,_std::allocator<const_TagLib::FileRef::FileTypeResolver_*>_> *": 1
  }, 
  "deref": {
    "RefCounterOld *": 1, 
    "params": 1, 
    ".*\\-": 2, 
    "return": 1, 
    ".*\\- param": 1
  }, 
  "push_front": {
    "void": 1, 
    "params": 2, 
    "value_type *": 1, 
    "return;": 1, 
    "return": 0, 
    "list<const_TagLib::FileRef::FileTypeResolver_*,_std::allocator<const_TagLib::FileRef::FileTypeResolver_*>_> *": 1
  }, 
  "operator++": {
    "params": 1, 
    "_List_const_iterator<const_TagLib::FileRef::FileTypeResolver_*> *": 1, 
    ".*\\-": 1, 
    "return": 1, 
    ".*\\- param": 1
  }, 
  "save": {
    "label": "save", 
    "params": 1, 
    ".*\\+ 0x.*": 1, 
    ".*\\-": 2, 
    "if (.*)": 1, 
    "return": 1, 
    "FileRef *": 1, 
    ".*\\- param": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "~_List_impl": {
    "void": 1, 
    "_List_impl *": 1, 
    "label": "~", 
    "params": 1, 
    "return;": 1, 
    "return": 0
  }, 
  "_M_insert": {
    "void": 1, 
    "params": 3, 
    "value_type *": 1, 
    "iterator": 1, 
    "return;": 1, 
    ".*\\-": 2, 
    "return": 0, 
    ".*\\- param": 1, 
    "list<const_TagLib::FileRef::FileTypeResolver_*,_std::allocator<const_TagLib::FileRef::FileTypeResolver_*>_> *": 1
  }, 
  "push_back": {
    "void": 1, 
    "params": 2, 
    "value_type *": 1, 
    "return;": 1, 
    "return": 0, 
    "list<const_TagLib::FileRef::FileTypeResolver_*,_std::allocator<const_TagLib::FileRef::FileTypeResolver_*>_> *": 1
  }, 
  "_M_valptr": {
    "_List_node<const_TagLib::FileRef::FileTypeResolver_*> *": 1, 
    "params": 1, 
    ".*\\-": 1, 
    "return": 1, 
    ".*\\- param": 1
  }, 
  "__cxx_global_var_init": {
    "void": 1, 
    "label": "init", 
    "params": 0, 
    "return;": 1, 
    "return": 0
  }, 
  "__cxx_global_var_init.1": {
    "void": 1, 
    "label": "init", 
    "params": 0, 
    "return;": 1, 
    "return": 0
  }, 
  "file": {
    "params": 1, 
    ".*\\-": 1, 
    "return": 1, 
    "FileRef *": 1, 
    ".*\\- param": 1
  }, 
  "detectByContent": {
    "if (.* != 0)": 2, 
    "bool": 1, 
    "params": 3, 
    "ReadStyle": 1, 
    "if (.* == 0)": 13, 
    "IOStream *": 1, 
    "if (.*)": 17, 
    "return": 1, 
    ".*\\+": 1
  }, 
  "end": {
    "params": 1, 
    "return": 1, 
    "list<const_TagLib::FileRef::FileTypeResolver_*,_std::allocator<const_TagLib::FileRef::FileTypeResolver_*>_> *": 1
  }, 
  "~new_allocator": {
    "void": 1, 
    "label": "~", 
    "params": 1, 
    "return;": 1, 
    "new_allocator<const_TagLib::FileRef::FileTypeResolver_*> *": 1, 
    "return": 0
  }, 
  "allocator<std::_List_node<const_TagLib::FileRef::FileTypeResolver_*>_>": {
    "allocator<const_TagLib::FileRef::FileTypeResolver_*> *": 1, 
    "void": 1, 
    "params": 2, 
    "return;": 1, 
    "allocator<std::_List_node<const_TagLib::FileRef::FileTypeResolver_*>_> *": 1, 
    "return": 0
  }, 
  "_List_node_header": {
    "void": 1, 
    "params": 1, 
    "return;": 1, 
    "_List_node_header *": 1, 
    "return": 0
  }, 
  "__clang_call_terminate": {
    "void": 1, 
    "params": 0, 
    "return": 0
  }, 
  "__addressof<const_TagLib::FileRef::FileTypeResolver_*const>": {
    "FileTypeResolver * *": 1, 
    "label": "add", 
    "params": 1, 
    "return": 1
  }, 
  "clear": {
    "void": 1, 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 2, 
    "return": 0, 
    ".*\\- param": 1, 
    "list<const_TagLib::FileRef::FileTypeResolver_*,_std::allocator<const_TagLib::FileRef::FileTypeResolver_*>_> *": 1
  }, 
  "FileRefPrivate": {
    "void": 1, 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 3, 
    "return": 0, 
    "FileRefPrivate *": 1, 
    ".*\\- param": 1
  }, 
  "parse": {
    "void": 1, 
    "bool": 1, 
    "label": "parse", 
    "params": 4, 
    ".*\\+ param": 1, 
    "ReadStyle": 1, 
    "if (.*) param": 1, 
    "return;": 1, 
    ".*\\-": 7, 
    "IOStream *": 1, 
    "= .*\\+ param": 1, 
    "if (.*)": 3, 
    "return": 0, 
    "FileRef *": 1, 
    ".*\\- param": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "~FileRefPrivate": {
    "void": 1, 
    "delete(.*)": 1, 
    "label": "~", 
    "params": 1, 
    "delete(.*) param": 1, 
    "return;": 1, 
    "return": 0, 
    "FileRefPrivate *": 1
  }, 
  "~allocator": {
    "allocator<const_TagLib::FileRef::FileTypeResolver_*> *": 1, 
    "void": 1, 
    "label": "~", 
    "params": 1, 
    "return;": 1, 
    "return": 0
  }, 
  "_M_put_node": {
    "pointer": 1, 
    "void": 1, 
    "params": 2, 
    "_List_base<const_TagLib::FileRef::FileTypeResolver_*,_std::allocator<const_TagLib::FileRef::FileTypeResolver_*>_> *": 1, 
    "return;": 1, 
    "return": 0
  }, 
  "~_List_base": {
    "void": 1, 
    "label": "~", 
    "params": 1, 
    "_List_base<const_TagLib::FileRef::FileTypeResolver_*,_std::allocator<const_TagLib::FileRef::FileTypeResolver_*>_> *": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "return": 0, 
    ".*\\- param": 1
  }, 
  "_S_select_on_copy": {
    "label": "copy", 
    "params": 1, 
    "allocator<std::_List_node<const_TagLib::FileRef::FileTypeResolver_*>_> *": 1, 
    "return": 1
  }, 
  "isNull": {
    "params": 1, 
    "if (.*) param": 1, 
    ".*\\-": 1, 
    "if (.*)": 1, 
    "return": 1, 
    "FileRef *": 1, 
    ".*\\- param": 1
  }, 
  "detach": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "if (.* < .*)": 1, 
    "params": 1, 
    "List<const_TagLib::FileRef::FileTypeResolver_*> *": 1, 
    "return;": 1, 
    ".*\\-": 4, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\- param": 1
  }, 
  "audioProperties": {
    "params": 1, 
    ".*\\+ 0x.*": 1, 
    ".*\\-": 2, 
    "if (.*)": 1, 
    "return": 1, 
    "FileRef *": 1, 
    ".*\\- param": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }
}