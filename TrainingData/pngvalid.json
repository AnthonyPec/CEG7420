{
  "standard_palette_validate": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "string": [
      "validate: palette transparency changed", 
      "validate: PLTE or tRNS chunk changed", 
      "validate: palette size changed: "
    ], 
    "if (.* < .*)": 1, 
    "label": "validate", 
    "params": 3, 
    "return;": 1, 
    "while(.*)": 1, 
    ".*\\-": 9, 
    "if (.*)": 3, 
    "return": 0, 
    ".*\\+": 5, 
    "= .*\\+": 5
  }, 
  "image_transform_png_set_strip_alpha_set": {
    "void": 1, 
    "void*": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "return;": 1, 
    "return": 0, 
    ".*\\+": 1
  }, 
  "read_palette": {
    "if (.* < \\d*)": 2, 
    "string": [
      "validate: invalid PLTE result", 
      "validate: invalid PLTE count", 
      "validate: unexpected png_get_tRNS (palette) result"
    ], 
    "if (.* < .*)": 2, 
    "int*": 1, 
    "label": "read", 
    "params": 4, 
    "int": 1, 
    "if (.* == 0)": 3, 
    "memset(.*)": 2, 
    "while(.*)": 1, 
    "for (.*)": 5, 
    ".*\\-": 4, 
    "if (.*)": 5, 
    "return": 1, 
    ".*\\+": 11, 
    "= .*\\+": 10
  }, 
  "perform_gamma_threshold_tests": {
    "void": 1, 
    "label": "test", 
    "params": 1, 
    ".*\\+ 0x.*": 4, 
    "if (.* == 0)": 1, 
    "return;": 2, 
    "while(.*)": 2, 
    "for (.*)": 1, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\+": 4, 
    "= .*\\+": 2
  }, 
  "set_modifier_for_read": {
    "label": "read", 
    "uint": 1, 
    "params": 4, 
    "int": 1, 
    "char*": 1, 
    ".*\\-": 9, 
    "return": 1
  }, 
  "image_transform_png_set_invert_alpha_add": {
    "void*": 1, 
    "byte": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "int": 1, 
    "return": 1, 
    ".*\\+": 1
  }, 
  "gamma_transform_test": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "string": [
      "gamma ", 
      "sbit(", 
      "16to8 "
    ], 
    "byte": 1, 
    "double": 1, 
    "label": "test", 
    "params": 10, 
    "int": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "if (.*)": 2, 
    "return": 0
  }, 
  "make_size_images": {
    "void": 1, 
    "string": [
      "make size images"
    ], 
    "label": "make", 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "return": 0
  }, 
  "image_transform_png_set_shift_mod": {
    "void": 1, 
    "void*": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 2, 
    "if (.* == 0)": 1, 
    "return;": 1, 
    ".*\\-": 10, 
    "if (.*)": 2, 
    "return": 0, 
    ".*\\+": 2
  }, 
  "image_transform_png_set_swap_mod": {
    "void": 1, 
    "void*": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 2, 
    "return;": 1, 
    ".*\\-": 2, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\+": 2
  }, 
  "image_transform_png_set_expand_gray_1_2_4_to_8_mod": {
    "void": 1, 
    "void*": 1, 
    "label": "transform", 
    "params": 4, 
    "return;": 1, 
    "return": 0
  }, 
  "fix": {
    "double": 1, 
    "params": 1, 
    "int": 1, 
    "return": 1
  }, 
  "image_transform_ini_end": {
    "void": 1, 
    "void*": 1, 
    "label": "transform", 
    "params": 2, 
    "return;": 1, 
    "return": 0
  }, 
  "modifier_current_encoding": {
    "void": 1, 
    "params": 2, 
    "memset(.*)": 1, 
    "return;": 1, 
    "memcpy(.*)": 1, 
    ".*\\-": 3, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "store_read_buffer_avail": {
    "if (.* < \\d*)": 1, 
    "string": [
      "buffer read error"
    ], 
    "if (.* < .*)": 1, 
    "label": "read", 
    "params": 1, 
    "return 0": 1, 
    "for (.*)": 1, 
    ".*\\-": 8, 
    "if (.*)": 3, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "standard_name_from_id": {
    "uint": 1, 
    "params": 4, 
    "int": 1, 
    "char*": 1, 
    "return": 1
  }, 
  "size_row": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "uint": 1, 
    "params": 3, 
    "int": 1, 
    "return;": 1, 
    "for (.*)": 1, 
    ".*\\-": 2, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\+": 3, 
    "= .*\\+": 3, 
    "byte*": 1
  }, 
  "standard_info_imp": {
    "void": 1, 
    "params": 4, 
    "int": 1, 
    "if (.* == 0)": 1, 
    "return;": 1, 
    "while(.*)": 1, 
    ".*\\-": 3, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "image_transform_png_set_expand_set": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "void*": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "return;": 1, 
    ".*\\-": 2, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\+": 1
  }, 
  "sequential_row": {
    "if (.* != 0)": 2, 
    "if (.* < \\d*)": 6, 
    "void": 1, 
    "if (.* < .*)": 6, 
    "params": 5, 
    "int": 1, 
    "memset(.*)": 2, 
    "return;": 1, 
    "for (.*)": 2, 
    ".*\\-": 16, 
    "if (.*)": 9, 
    "return": 0, 
    ".*\\+": 4, 
    "= .*\\+": 3
  }, 
  "test_size": {
    "if (.* < \\d*)": 2, 
    "if (.* != 0)": 7, 
    "if (.* < .*)": 2, 
    "byte": 1, 
    "label": "test", 
    "params": 4, 
    ".*\\+ 0x.*": 5, 
    "int": 1, 
    "return 0": 7, 
    "while(.*)": 2, 
    "for (.*)": 4, 
    ".*\\-": 14, 
    "if (.*)": 9, 
    "return": 1, 
    ".*\\+": 20, 
    "= .*\\+": 6
  }, 
  "transform_end": {
    "void": 1, 
    "label": "transform", 
    "params": 2, 
    "if (.* == 0)": 1, 
    "return;": 1, 
    ".*\\-": 3, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "row_copy": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "byte": 1, 
    "label": "copy", 
    "uint": 1, 
    "params": 4, 
    "int": 1, 
    "if (.* == 0)": 1, 
    "return;": 1, 
    "memcpy(.*)": 1, 
    "if (.*)": 2, 
    "return": 0
  }, 
  "store_storenew": {
    "void": 1, 
    "string": [
      "store new: OOM"
    ], 
    "params": 1, 
    "malloc(.*)": 1, 
    "return;": 1, 
    "memcpy(.*)": 1, 
    ".*\\-": 4, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "image_transform_png_set_filler_add": {
    "if (.* < \\d*)": 1, 
    "void*": 1, 
    "if (.* < .*)": 1, 
    "byte": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "int": 1, 
    "if (.*)": 2, 
    "return": 1, 
    ".*\\+": 1
  }, 
  "modifier_color_encoding_is_sRGB": {
    "params": 1, 
    "int": 1, 
    ".*\\-": 3, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "store_log": {
    "if (.* != 0)": 3, 
    "void": 1, 
    "string": [
      "warning: ", 
      "error: "
    ], 
    "params": 4, 
    "int": 1, 
    "if (.* == 0)": 2, 
    "return;": 1, 
    "goto": 1, 
    "char": 1, 
    ".*\\-": 7, 
    "if (.*)": 5, 
    "return": 0, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "modification_init": {
    "void": 1, 
    "label": "init", 
    "params": 1, 
    "memset(.*)": 1, 
    "return;": 1, 
    ".*\\-": 4, 
    "return": 0
  }, 
  "image_transform_png_set_add_alpha_set": {
    "void": 1, 
    "void*": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "return;": 1, 
    "return": 0, 
    ".*\\+": 1
  }, 
  "store_image_row": {
    "if (.* < \\d*)": 1, 
    "string": [
      "no allocated image", 
      "image too small"
    ], 
    "if (.* < .*)": 1, 
    "byte": 1, 
    "uint": 1, 
    "params": 4, 
    "int": 1, 
    ".*\\-": 4, 
    "if (.*)": 2, 
    "return": 1, 
    ".*\\+": 3, 
    "= .*\\+": 1
  }, 
  "standard_text_validate": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "string": [
      "image name", 
      "end marker", 
      "expected two text items, got %lu"
    ], 
    "label": "validate", 
    "params": 4, 
    "int": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "printf(.*)": 1, 
    "if (.*)": 2, 
    "return": 0, 
    ".*\\+": 1
  }, 
  "summarize_gamma_errors": {
    "if (.* != 0)": 2, 
    "void": 1, 
    "string": [
      "\\nBasic gamma correction:\\n", 
      "\\nGamma correction with %s:\\n", 
      " 2 bit gray: ", 
      " 4 bit gray: ", 
      " 8 bit gray: ", 
      " 8 bit color:", 
      " indexed:    ", 
      "16 bit gray: ", 
      "16 bit color:"
    ], 
    "fflush(.*)": 2, 
    "label": "error", 
    "params": 4, 
    "int": 1, 
    "return;": 1, 
    "char": 1, 
    "printf(.*)": 2, 
    "if (.*)": 3, 
    "return": 0
  }, 
  "image_transform_test_counter": {
    "if (.* < \\d*)": 2, 
    "if (.* < .*)": 2, 
    "break": 1, 
    "label": "test", 
    "uint": 1, 
    "params": 2, 
    "int": 1, 
    "while(.*)": 1, 
    ".*\\-": 2, 
    "if (.*)": 3, 
    "return": 1
  }, 
  "valid_chunktype": {
    "if (.* < \\d*)": 2, 
    "if (.* < .*)": 2, 
    "break": 1, 
    "uint": 1, 
    "params": 1, 
    "int": 1, 
    "while(.*)": 1, 
    "return 0": 1, 
    "if (.*)": 2, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "standard_row": {
    "void": 1, 
    "uint": 1, 
    "params": 4, 
    "int": 1, 
    "if (.* == 0)": 1, 
    "return;": 1, 
    "if (.*)": 1, 
    "return": 0, 
    "byte*": 1
  }, 
  "init_standard_palette": {
    "if (.* != 0)": 2, 
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "if (.* < .*)": 1, 
    "label": "init", 
    "params": 5, 
    "int": 1, 
    "return;": 1, 
    "for (.*)": 4, 
    "if (.*)": 3, 
    "return": 0, 
    ".*\\+": 9, 
    "= .*\\+": 5
  }, 
  "gamma_component_validate": {
    "if (.* < \\d*)": 25, 
    "if (.* != 0)": 12, 
    "string": [
      "less than maxout:\\n", 
      "within digitization limits:\\n", 
      "within input precision limits:\\n", 
      ", sbit(", 
      "[linear]", 
      "(background)", 
      " [screen is linear] =", 
      "(to screen) =", 
      "\\n\\t[overall:", 
      " [no gamma correction] =", 
      "(gamma correction) =", 
      "internal error (compose)"
    ], 
    "if (.* < .*)": 25, 
    "double": 1, 
    "label": "validate", 
    "uint": 1, 
    "params": 6, 
    "int": 1, 
    "if (.* == 0)": 2, 
    "goto": 1, 
    "char*": 1, 
    ".*\\-": 48, 
    "if (.*)": 63, 
    "return": 1, 
    ".*\\+": 5, 
    "= .*\\+": 4
  }, 
  "transform_rowsize": {
    "byte": 1, 
    "label": "transform", 
    "params": 3, 
    "return": 1
  }, 
  "image_transform_png_set_rgb_to_gray_mod": {
    "if (.* != 0)": 4, 
    "if (.* < \\d*)": 3, 
    "void": 1, 
    "void*": 1, 
    "string": [
      "rgb_to_gray error ", 
      " exceeds limit "
    ], 
    "if (.* < .*)": 3, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 6, 
    "if (.* == 0)": 2, 
    "return;": 1, 
    ".*\\-": 35, 
    "if (.*)": 21, 
    "return": 0, 
    ".*\\+": 12, 
    "= .*\\+": 5
  }, 
  "modifier_reset": {
    "void": 1, 
    "label": "set", 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 16, 
    "return": 0, 
    ".*\\+": 1
  }, 
  "bits_of": {
    "if (.* != 0)": 6, 
    "uint": 1, 
    "params": 1, 
    "int": 1, 
    "if (.*)": 6, 
    "return": 1, 
    ".*\\+": 5, 
    "= .*\\+": 5
  }, 
  "image_pixel_add_alpha": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "void*": 1, 
    "if (.* < .*)": 1, 
    "label": "add", 
    "params": 3, 
    ".*\\+ 0x.*": 21, 
    "int": 1, 
    "if (.* == 0)": 4, 
    "return;": 1, 
    ".*\\-": 5, 
    "if (.*)": 9, 
    "return": 0, 
    ".*\\+": 23, 
    "= .*\\+": 3
  }, 
  "transform_image_validate": {
    "if (.* < \\d*)": 2, 
    "if (.* != 0)": 5, 
    "void": 1, 
    "string": [
      "unexpected change in palette size", 
      "unexpected transformed palette index", 
      "red/gray", 
      "green", 
      "alpha"
    ], 
    "if (.* < .*)": 2, 
    "label": "transform", 
    "params": 3, 
    "memset(.*)": 1, 
    "return;": 1, 
    "while(.*)": 1, 
    "for (.*)": 1, 
    ".*\\-": 20, 
    "if (.*)": 12, 
    "return": 0, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "perform_gamma_test": {
    "if (.* < \\d*)": 5, 
    "if (.* != 0)": 19, 
    "void": 1, 
    "string": [
      "Gamma correction error summary\\n\\n", 
      "The printed value is the maximum error in the pixel values\\n", 
      "calculated by the libpng gamma correction code.  The error\\n", 
      "is calculated as the difference between the output pixel\\n", 
      "value (always an integer) and the ideal value from the\\n", 
      "libpng specification (typically not an integer).\\n\\n", 
      "Expect this value to be less than .5 for 8 bit formats,\\n", 
      "less than 1 for formats with fewer than 8 bits and a small\\n", 
      "number (typically less than 5) for the 16 bit formats.\\n", 
      "For performance reasons the value for 16 bit formats\\n", 
      "increases when the image file includes an sBIT chunk.\\n", 
      "\\nGamma correction with 16 to 8 bit reduction:\\n", 
      " 16 bit gray:  %.5f\\n", 
      " 16 bit gray:  %.5f\\n", 
      " 16 bit color: %.5f\\n", 
      " 16 bit color: %.5f\\n", 
      "background", 
      "alpha mode"
    ], 
    "if (.* < .*)": 5, 
    "break": 1, 
    "fflush(.*)": 4, 
    "label": "test", 
    "params": 2, 
    "int": 1, 
    "return;": 6, 
    "while(.*)": 1, 
    "for (.*)": 4, 
    ".*\\-": 30, 
    "printf(.*)": 14, 
    "if (.*)": 25, 
    "return": 0, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "calcerr": {
    "if (.* != 0)": 1, 
    "double": 1, 
    "params": 3, 
    "int": 1, 
    "if (.* == 0)": 2, 
    ".*\\-": 5, 
    "if (.*)": 3, 
    "return": 1
  }, 
  "gamma_component_compose": {
    "if (.* < \\d*)": 4, 
    "if (.* < .*)": 4, 
    "double": 1, 
    "int*": 1, 
    "params": 5, 
    "int": 1, 
    ".*\\-": 3, 
    "if (.*)": 5, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "modifier_total_encodings": {
    "if (.* != 0)": 1, 
    "uint": 1, 
    "params": 1, 
    "int": 1, 
    ".*\\-": 3, 
    "if (.*)": 1, 
    "return": 1, 
    ".*\\+": 1
  }, 
  "store_freebuffer": {
    "void": 1, 
    "label": "free", 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 4, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "image_transform_png_set_expand_add": {
    "void*": 1, 
    "byte": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "int": 1, 
    "return": 1, 
    ".*\\+": 1
  }, 
  "transform_info_imp": {
    "if (.* < \\d*)": 2, 
    "void": 1, 
    "string": [
      "invalid final bit depth: colour type(", 
      ") with bit depth: ", 
      "colour type ", 
      " expected ", 
      "bit depth ", 
      " expected ", 
      "pngvalid: internal: palette sample depth not 8", 
      "pngvalid: internal: bad unpacked pixel depth", 
      "internal: sample depth ", 
      " expected ", 
      "internal: bit depth ", 
      " expected "
    ], 
    "if (.* < .*)": 2, 
    "label": "transform", 
    "params": 3, 
    ".*\\+ 0x.*": 2, 
    "memset(.*)": 1, 
    "return;": 1, 
    "while(.*)": 1, 
    "goto": 3, 
    ".*\\-": 30, 
    "if (.*)": 13, 
    "return": 0, 
    ".*\\+": 3, 
    "= .*\\+": 1
  }, 
  "internal_error": {
    "void": 1, 
    "label": "error", 
    "params": 2, 
    "char": 1, 
    ".*\\-": 2, 
    "return": 0
  }, 
  "deinterlace_row": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "if (.* < .*)": 1, 
    "byte": 1, 
    "uint": 1, 
    "params": 6, 
    "int": 1, 
    "return;": 1, 
    "for (.*)": 1, 
    ".*\\-": 2, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\+": 3, 
    "= .*\\+": 3
  }, 
  "image_transform_png_set_invert_alpha_mod": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "void*": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 2, 
    "return;": 1, 
    ".*\\-": 2, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\+": 2
  }, 
  "png_pass_col_shift": {
    "if (.* < \\d*)": 1, 
    "if (.* < .*)": 1, 
    "break": 4, 
    "params": 1, 
    ".*\\+ 0x.*": 1, 
    "int": 1, 
    "return 0": 1, 
    "while(.*)": 1, 
    "for (.*)": 1, 
    ".*\\-": 6, 
    "if (.*)": 8, 
    "return": 1, 
    "case": 4, 
    ".*\\+": 4, 
    "= .*\\+": 4
  }, 
  "sample": {
    "if (.* != 0)": 3, 
    "if (.* < \\d*)": 1, 
    "if (.* < .*)": 1, 
    "byte": 1, 
    "uint": 1, 
    "params": 7, 
    "int": 1, 
    "if (.* == 0)": 3, 
    ".*\\-": 2, 
    "if (.*)": 8, 
    "return": 1, 
    ".*\\+": 5, 
    "= .*\\+": 5
  }, 
  "progressive_row": {
    "if (.* < \\d*)": 3, 
    "void": 1, 
    "string": [
      "missing row in progressive de-interlacing", 
      "png_get_current_row_number is broken", 
      "png_get_current_pass_number is broken", 
      "invalid y to progressive row callback"
    ], 
    "if (.* < .*)": 3, 
    "byte": 1, 
    "uint": 1, 
    "params": 4, 
    "int": 1, 
    "return;": 1, 
    ".*\\-": 8, 
    "if (.*)": 12, 
    "return": 0, 
    ".*\\+": 6, 
    "= .*\\+": 1
  }, 
  "image_transform_png_set_expand_gray_1_2_4_to_8_add": {
    "void*": 1, 
    "byte": 1, 
    "label": "transform", 
    "params": 4, 
    "int": 1, 
    "return": 1
  }, 
  "sbit_modify": {
    "if (.* < \\d*)": 1, 
    "string": [
      "unexpected colour type in sBIT modification"
    ], 
    "if (.* < .*)": 1, 
    "break": 3, 
    "params": 3, 
    "int": 1, 
    "if (.* == 0)": 1, 
    "while(.*)": 1, 
    ".*\\-": 9, 
    "if (.*)": 2, 
    "return": 1, 
    "case": 5, 
    ".*\\+": 3, 
    "= .*\\+": 1
  }, 
  "white_point": {
    "params": 2, 
    "return": 1
  }, 
  "image_transform_png_set_add_alpha_add": {
    "if (.* < \\d*)": 1, 
    "void*": 1, 
    "if (.* < .*)": 1, 
    "byte": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "int": 1, 
    "if (.*)": 2, 
    "return": 1, 
    ".*\\+": 1
  }, 
  "make_random_bytes": {
    "void": 1, 
    "void*": 1, 
    "int*": 1, 
    "label": "make", 
    "params": 3, 
    "uint*": 1, 
    "return;": 1, 
    "for (.*)": 1, 
    "return": 0, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "store_pool_delete": {
    "fprintf(.*)": 3, 
    "if (.* < \\d*)": 3, 
    "if (.* != 0)": 1, 
    "void": 1, 
    "string": [
      "write", 
      "unknown file", 
      "%s: %s %s: memory lost (list follows):\\n", 
      "\\t%lu bytes @ %p\\n", 
      "write", 
      "unknown file", 
      "%s: %s %s: memory counter mismatch (internal error)\\n"
    ], 
    "if (.* < .*)": 3, 
    "params": 2, 
    "return;": 1, 
    "while(.*)": 1, 
    ".*\\-": 31, 
    "printf(.*)": 3, 
    "if (.*)": 11, 
    "return": 0, 
    ".*\\+": 2, 
    "= .*\\+": 1
  }, 
  "store_read_buffer_size": {
    "label": "read", 
    "params": 1, 
    ".*\\-": 2, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "gama_modification_init": {
    "void": 1, 
    "double": 1, 
    "label": "init", 
    "params": 3, 
    "return;": 1, 
    ".*\\-": 7, 
    "return": 0
  }, 
  "gamma_display_init": {
    "void": 1, 
    "double": 1, 
    "byte": 1, 
    "int*": 1, 
    "label": "init", 
    "uint": 1, 
    "params": 13, 
    "int": 1, 
    "if (.* == 0)": 1, 
    "memset(.*)": 1, 
    "return;": 1, 
    ".*\\-": 18, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\+": 4, 
    "= .*\\+": 4
  }, 
  "image_pixel_setf": {
    "if (.* < \\d*)": 4, 
    "void": 1, 
    "void*": 1, 
    "if (.* < .*)": 4, 
    "label": "set", 
    "uint": 1, 
    "params": 5, 
    ".*\\+ 0x.*": 14, 
    "int": 1, 
    "return;": 1, 
    "if (.*)": 4, 
    "return": 0, 
    ".*\\+": 18, 
    "= .*\\+": 4
  }, 
  "standard_display_init": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "string": [
      "internal: bad bit depth"
    ], 
    "if (.* < .*)": 1, 
    "label": "init", 
    "uint": 1, 
    "params": 5, 
    "int": 1, 
    "memset(.*)": 3, 
    "return;": 1, 
    ".*\\-": 30, 
    "if (.*)": 2, 
    "return": 0
  }, 
  "image_transform_png_set_swap_add": {
    "void*": 1, 
    "byte": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "int": 1, 
    "return": 1, 
    ".*\\+": 1
  }, 
  "image_transform_png_set_filler_mod": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "void*": 1, 
    "if (.* < .*)": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 2, 
    "return;": 1, 
    ".*\\-": 8, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\+": 3
  }, 
  "store_flush": {
    "void": 1, 
    "label": "flush", 
    "params": 1, 
    "return;": 1, 
    "return": 0
  }, 
  "abserr": {
    "if (.* != 0)": 2, 
    "double": 1, 
    "params": 3, 
    "int": 1, 
    "if (.* == 0)": 1, 
    ".*\\-": 4, 
    "if (.*)": 3, 
    "return": 1
  }, 
  "safecat_current_encoding": {
    "if (.* != 0)": 1, 
    "string": [
      "[overridden]"
    ], 
    "params": 4, 
    "char*": 1, 
    ".*\\-": 2, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "image_transform_png_set_background_set": {
    "if (.* != 0)": 2, 
    "void": 1, 
    "void*": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 2, 
    "return;": 1, 
    ".*\\-": 4, 
    "if (.*)": 3, 
    "return": 0, 
    ".*\\+": 2
  }, 
  "store_freenew": {
    "void": 1, 
    "label": "free", 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 11, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "png_row_from_pass_row": {
    "break": 7, 
    "uint": 1, 
    "params": 2, 
    "int": 1, 
    "return": 1, 
    "case": 7, 
    ".*\\+": 3, 
    "= .*\\+": 3
  }, 
  "store_pool_error": {
    "void": 1, 
    "label": "error", 
    "params": 3, 
    "return;": 1, 
    "char*": 1, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "modifier_encoding_iterate": {
    "if (.* < \\d*)": 1, 
    "if (.* != 0)": 1, 
    "void": 1, 
    "if (.* < .*)": 1, 
    "params": 1, 
    "if (.* == 0)": 4, 
    "return;": 1, 
    ".*\\-": 13, 
    "if (.*)": 6, 
    "return": 0, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "standard_height": {
    "uint": 1, 
    "params": 2, 
    "int": 1, 
    "if (.* == 0)": 1, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "store_pool_mark": {
    "void": 1, 
    "byte": 1, 
    "params": 1, 
    "return;": 1, 
    "return": 0
  }, 
  "image_pixel_convert_PLTE": {
    "void": 1, 
    "void*": 1, 
    "label": "convert", 
    "params": 1, 
    ".*\\+ 0x.*": 6, 
    "if (.* == 0)": 1, 
    "return;": 1, 
    "if (.*)": 2, 
    "return": 0, 
    ".*\\+": 6, 
    "= .*\\+": 1
  }, 
  "store_delete": {
    "void": 1, 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "return": 0
  }, 
  "make_transform_image": {
    "if (.* != 0)": 2, 
    "void": 1, 
    "string": [
      "transform row size incorrect", 
      "write: png_set_interlace_handling failed"
    ], 
    "byte": 1, 
    "setjmp(.*)": 1, 
    "label": "transform", 
    "uint": 1, 
    "params": 6, 
    ".*\\+ 0x.*": 1, 
    "int": 1, 
    "if (.* == 0)": 2, 
    "return;": 1, 
    "while(.*)": 1, 
    "for (.*)": 2, 
    "char": 1, 
    ".*\\-": 11, 
    "if (.*)": 8, 
    "return": 0, 
    ".*\\+": 4, 
    "= .*\\+": 2
  }, 
  "image_transform_png_set_expand_16_mod": {
    "if (.* != 0)": 1, 
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "void*": 1, 
    "if (.* < .*)": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 2, 
    "return;": 1, 
    ".*\\-": 6, 
    "if (.*)": 3, 
    "return": 0, 
    ".*\\+": 2
  }, 
  "store_write": {
    "if (.* < \\d*)": 7, 
    "void": 1, 
    "string": [
      "store state damaged", 
      "pngvalid internal image too large", 
      "invalid chunk type", 
      "chunk length too great", 
      "unexpected write size"
    ], 
    "if (.* < .*)": 7, 
    "break": 3, 
    "byte": 1, 
    "label": "write", 
    "params": 3, 
    ".*\\+ 0x.*": 4, 
    "if (.* == 0)": 1, 
    "return;": 1, 
    "while(.*)": 4, 
    "memcpy(.*)": 1, 
    ".*\\-": 23, 
    "if (.*)": 13, 
    "return": 0, 
    ".*\\+": 18, 
    "= .*\\+": 15
  }, 
  "perform_gamma_sbit_tests": {
    "if (.* < \\d*)": 1, 
    "if (.* != 0)": 1, 
    "void": 1, 
    "if (.* < .*)": 1, 
    "break": 1, 
    "label": "test", 
    "params": 1, 
    ".*\\+ 0x.*": 6, 
    "if (.* == 0)": 2, 
    "return;": 2, 
    "while(.*)": 2, 
    "for (.*)": 2, 
    ".*\\-": 1, 
    "if (.*)": 5, 
    "return": 0, 
    ".*\\+": 8, 
    "= .*\\+": 5
  }, 
  "image_transform_png_set_shift_add": {
    "void*": 1, 
    "byte": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "int": 1, 
    "return": 1, 
    ".*\\+": 1
  }, 
  "image_transform_png_set_packing_mod": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "void*": 1, 
    "if (.* < .*)": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 2, 
    "return;": 1, 
    ".*\\-": 2, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\+": 2
  }, 
  "image_transform_png_set_expand_gray_1_2_4_to_8_set": {
    "void": 1, 
    "void*": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "return;": 1, 
    "return": 0, 
    ".*\\+": 1
  }, 
  "set_store_for_read": {
    "if (.* < \\d*)": 1, 
    "string": [
      "read store already in use", 
      "png_create_read_struct returned NULL (unexpected)", 
      "png option invalid"
    ], 
    "if (.* < .*)": 1, 
    "break": 1, 
    "label": "read", 
    "uint": 1, 
    "params": 4, 
    "int": 1, 
    "malloc(.*)": 1, 
    "while(.*)": 1, 
    "char*": 1, 
    ".*\\-": 16, 
    "if (.*)": 6, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "make_four_random_bytes": {
    "void": 1, 
    "byte": 1, 
    "int*": 1, 
    "label": "make", 
    "params": 2, 
    "uint*": 1, 
    "return;": 1, 
    "return": 0
  }, 
  "normalize_color_encoding": {
    "void": 1, 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 10, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "image_transform_png_set_gray_to_rgb_add": {
    "void*": 1, 
    "byte": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "int": 1, 
    "return": 1, 
    ".*\\+": 1
  }, 
  "image_transform_png_set_expand_mod": {
    "if (.* < \\d*)": 1, 
    "if (.* != 0)": 1, 
    "void": 1, 
    "void*": 1, 
    "if (.* < .*)": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 2, 
    "return;": 1, 
    ".*\\-": 6, 
    "if (.*)": 3, 
    "return": 0, 
    ".*\\+": 2
  }, 
  "store_read": {
    "void": 1, 
    "string": [
      "bad store read call"
    ], 
    "byte": 1, 
    "label": "read", 
    "params": 3, 
    "return;": 1, 
    ".*\\-": 1, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "make_size": {
    "void": 1, 
    "byte": 1, 
    "label": "make", 
    "params": 4, 
    "int": 1, 
    "return;": 1, 
    "for (.*)": 3, 
    "return": 0, 
    ".*\\+": 3, 
    "= .*\\+": 3
  }, 
  "image_transform_png_set_invert_alpha_set": {
    "void": 1, 
    "void*": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "return;": 1, 
    "return": 0, 
    ".*\\+": 1
  }, 
  "pcerr": {
    "if (.* != 0)": 2, 
    "double": 1, 
    "params": 3, 
    "int": 1, 
    "if (.* == 0)": 1, 
    "goto": 1, 
    ".*\\-": 4, 
    "if (.*)": 3, 
    "return": 1
  }, 
  "standard_palette_init": {
    "if (.* < \\d*)": 3, 
    "void": 1, 
    "if (.* < .*)": 3, 
    "break": 1, 
    "label": "init", 
    "params": 1, 
    "return;": 1, 
    "while(.*)": 1, 
    "memcpy(.*)": 1, 
    ".*\\-": 7, 
    "if (.*)": 3, 
    "return": 0, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "perform_gamma_transform_tests": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "label": "test", 
    "params": 1, 
    ".*\\+ 0x.*": 6, 
    "if (.* == 0)": 1, 
    "return;": 2, 
    "while(.*)": 1, 
    "for (.*)": 2, 
    "if (.*)": 3, 
    "return": 0, 
    ".*\\+": 7, 
    "= .*\\+": 4
  }, 
  "image_transform_png_set_strip_16_mod": {
    "if (.* < \\d*)": 4, 
    "void": 1, 
    "void*": 1, 
    "if (.* < .*)": 4, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 2, 
    "return;": 1, 
    ".*\\-": 11, 
    "if (.*)": 5, 
    "return": 0, 
    ".*\\+": 2
  }, 
  "modifier_color_encoding_is_set": {
    "label": "set", 
    "params": 1, 
    "int": 1, 
    ".*\\-": 1, 
    "return": 1
  }, 
  "make_standard_palette": {
    "if (.* != 0)": 3, 
    "label": "make", 
    "params": 3, 
    "int": 1, 
    "if (.* == 0)": 2, 
    "memset(.*)": 1, 
    "while(.*)": 1, 
    "for (.*)": 5, 
    ".*\\-": 1, 
    "if (.*)": 6, 
    "return": 1, 
    ".*\\+": 19, 
    "= .*\\+": 10
  }, 
  "store_ensure_image": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "string": [
      "OOM allocating image buffer"
    ], 
    "if (.* < .*)": 1, 
    "uint": 1, 
    "params": 5, 
    "int": 1, 
    "malloc(.*)": 1, 
    "return;": 2, 
    "memset(.*)": 1, 
    "while(.*)": 1, 
    "for (.*)": 1, 
    ".*\\-": 9, 
    "if (.*)": 3, 
    "return": 0, 
    ".*\\+": 8, 
    "= .*\\+": 5
  }, 
  "image_transform_png_set_gray_to_rgb_mod": {
    "if (.* != 0)": 1, 
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "void*": 1, 
    "if (.* < .*)": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 2, 
    "if (.* == 0)": 1, 
    "return;": 1, 
    ".*\\-": 9, 
    "if (.*)": 4, 
    "return": 0, 
    ".*\\+": 2
  }, 
  "store_pool_init": {
    "void": 1, 
    "label": "init", 
    "params": 2, 
    "memset(.*)": 1, 
    "return;": 1, 
    ".*\\-": 10, 
    "return": 0
  }, 
  "image_transform_reset_count": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "if (.* < .*)": 1, 
    "abort(.*)": 1, 
    "label": "transform", 
    "params": 1, 
    "return;": 1, 
    "for (.*)": 1, 
    ".*\\-": 3, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "image_transform_default_add": {
    "void*": 1, 
    "byte": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "int": 1, 
    "return": 1, 
    ".*\\+": 1
  }, 
  "random_choice": {
    "void": 1, 
    "params": 1, 
    "int": 1, 
    "return": 1
  }, 
  "standard_row_validate": {
    "if (.* < \\d*)": 2, 
    "if (.* != 0)": 2, 
    "void": 1, 
    "string": [
      "PNG image row[%lu][%d] changed from %.2x to %.2x", 
      "display row[%lu][%d] changed from %.2x to %.2x"
    ], 
    "if (.* < .*)": 2, 
    "label": "validate", 
    "uint": 1, 
    "params": 5, 
    "int": 1, 
    "memset(.*)": 1, 
    "return;": 1, 
    ".*\\-": 13, 
    "printf(.*)": 2, 
    "if (.*)": 4, 
    "return": 0, 
    ".*\\+": 8, 
    "= .*\\+": 2
  }, 
  "set_random_tRNS": {
    "void": 1, 
    "byte": 1, 
    "label": "set", 
    "params": 4, 
    "int": 1, 
    "if (.* == 0)": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "if (.*)": 2, 
    "return": 0
  }, 
  "image_transform_add": {
    "if (.* < \\d*)": 1, 
    "if (.* != 0)": 2, 
    "void*": 1, 
    "if (.* < .*)": 1, 
    "break": 1, 
    "byte": 1, 
    "label": "transform", 
    "uint": 1, 
    "params": 8, 
    "int": 1, 
    "if (.* == 0)": 4, 
    "while(.*)": 1, 
    "return 0": 1, 
    "for (.*)": 1, 
    "char*": 1, 
    ".*\\-": 8, 
    "if (.*)": 8, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "random_u32": {
    "void": 1, 
    "uint": 1, 
    "params": 1, 
    "int": 1, 
    "return": 1, 
    ".*\\+": 1
  }, 
  "choose_random_filter": {
    "if (.* != 0)": 2, 
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "if (.* < .*)": 1, 
    "params": 2, 
    "int": 1, 
    "return;": 1, 
    "if (.*)": 2, 
    "return": 0
  }, 
  "image_transform_png_set_swap_set": {
    "void": 1, 
    "void*": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "return;": 1, 
    "return": 0, 
    ".*\\+": 1
  }, 
  "png_pass_rows": {
    "if (.* < \\d*)": 2, 
    "if (.* < .*)": 2, 
    "break": 1, 
    "uint": 1, 
    "params": 2, 
    "int": 1, 
    "while(.*)": 1, 
    "for (.*)": 1, 
    "if (.*)": 3, 
    "return": 1, 
    ".*\\+": 5, 
    "= .*\\+": 5
  }, 
  "store_memory_free": {
    "if (.* != 0)": 2, 
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "string": [
      "memory corrupted (size)", 
      "memory corrupted (end)", 
      "memory corrupted (start)", 
      "memory corrupted (pool)"
    ], 
    "if (.* < .*)": 1, 
    "label": "free", 
    "params": 3, 
    "if (.* == 0)": 2, 
    "return;": 1, 
    ".*\\-": 10, 
    "if (.*)": 6, 
    "return": 0, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "modifier_read_imp": {
    "if (.* != 0)": 4, 
    "if (.* < \\d*)": 3, 
    "void": 1, 
    "string": [
      "invalid PNG file signature", 
      "invalid IHDR"
    ], 
    "if (.* < .*)": 3, 
    "break": 3, 
    "byte": 1, 
    "label": "read", 
    "params": 3, 
    ".*\\+ 0x.*": 4, 
    "if (.* == 0)": 5, 
    "return;": 2, 
    "goto": 1, 
    "while(.*)": 1, 
    "memcpy(.*)": 1, 
    "for (.*)": 3, 
    ".*\\-": 76, 
    "if (.*)": 22, 
    "return": 0, 
    ".*\\+": 18, 
    "= .*\\+": 8
  }, 
  "image_transform_mod_end": {
    "if (.* != 0)": 4, 
    "if (.* < \\d*)": 4, 
    "void": 1, 
    "void*": 1, 
    "if (.* < .*)": 4, 
    "label": "transform", 
    "params": 4, 
    "if (.* == 0)": 2, 
    "return;": 1, 
    ".*\\-": 30, 
    "if (.*)": 6, 
    "return": 0, 
    ".*\\+": 5, 
    "= .*\\+": 4
  }, 
  "standard_info_part2": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "string": [
      "bad png_get_rowbytes calculation"
    ], 
    "if (.* < .*)": 1, 
    "params": 4, 
    "int": 1, 
    "if (.* == 0)": 1, 
    "return;": 1, 
    ".*\\-": 7, 
    "if (.*)": 2, 
    "return": 0, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "interlace_row": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "if (.* < .*)": 1, 
    "byte": 1, 
    "uint": 1, 
    "params": 6, 
    "int": 1, 
    "return;": 1, 
    "for (.*)": 1, 
    ".*\\-": 2, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\+": 3, 
    "= .*\\+": 3
  }, 
  "image_transform_png_set_bgr_mod": {
    "void": 1, 
    "void*": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 2, 
    "return;": 1, 
    ".*\\-": 2, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\+": 2
  }, 
  "image_transform_png_set_expand_16_add": {
    "void*": 1, 
    "byte": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "int": 1, 
    "return": 1, 
    ".*\\+": 1
  }, 
  "chromaticity_y": {
    "double": 1, 
    "params": 1, 
    "return": 1, 
    ".*\\+": 1
  }, 
  "image_transform_png_set_swap_alpha_mod": {
    "void": 1, 
    "void*": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 2, 
    "return;": 1, 
    ".*\\-": 2, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\+": 2
  }, 
  "png_col_in_interlace_pass": {
    "if (.* < \\d*)": 1, 
    "if (.* < .*)": 1, 
    "break": 1, 
    "uint": 1, 
    "params": 2, 
    "int": 1, 
    "while(.*)": 1, 
    "return 0": 1, 
    "if (.*)": 2, 
    "return": 1, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "image_transform_png_set_packing_add": {
    "void*": 1, 
    "byte": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "int": 1, 
    "return": 1, 
    ".*\\+": 1
  }, 
  "gamma_info": {
    "void": 1, 
    "params": 2, 
    "return;": 1, 
    "return": 0
  }, 
  "store_freefile": {
    "void": 1, 
    "label": "free", 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 7, 
    "if (.*)": 2, 
    "return": 0
  }, 
  "chromaticity_x": {
    "double": 1, 
    "params": 1, 
    "return": 1, 
    ".*\\+": 1
  }, 
  "store_write_palette": {
    "if (.* < \\d*)": 1, 
    "string": [
      "attempt to write palette without write stream", 
      "multiple store_write_palette calls", 
      "store new palette: OOM"
    ], 
    "if (.* < .*)": 1, 
    "label": "write", 
    "params": 2, 
    "int": 1, 
    "malloc(.*)": 1, 
    ".*\\-": 8, 
    "if (.*)": 4, 
    "return": 1
  }, 
  "signal_handler": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "string": [
      "caught signal: ", 
      "interrupt", 
      "unknown ", 
      "illegal instruction", 
      "abort", 
      "floating point exception", 
      "invalid memory access", 
      "termination request"
    ], 
    "break": 6, 
    "abort(.*)": 1, 
    "params": 1, 
    "int": 1, 
    "if (.*)": 1, 
    "return": 0, 
    "case": 6
  }, 
  "store_message": {
    "string": [
      "pngvalid: ", 
      "write: ", 
      ": ", 
      "read: ", 
      ": ", 
      ": "
    ], 
    "params": 6, 
    "char*": 1, 
    ".*\\-": 7, 
    "if (.*)": 4, 
    "return": 1
  }, 
  "randomize": {
    "void": 1, 
    "void*": 1, 
    "params": 2, 
    "return;": 1, 
    "return": 0
  }, 
  "image_transform_png_set_scale_16_add": {
    "void*": 1, 
    "byte": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "int": 1, 
    "return": 1, 
    ".*\\+": 1
  }, 
  "standard_info_part1": {
    "if (.* != 0)": 4, 
    "if (.* < \\d*)": 3, 
    "void": 1, 
    "string": [
      "validate: bit depth changed", 
      "validate: color type changed", 
      "validate: filter type changed", 
      "validate: interlacing changed", 
      "validate: compression type changed", 
      "validate: image width changed", 
      "validate: image height changed", 
      "validate: unexpected png_get_sBIT result", 
      "validate: sBIT value out of range", 
      "validate: row size changed", 
      "validate: unexpected png_get_tRNS (color) result", 
      "validate: unexpected png_get_tRNS result", 
      "validate: invalid tRNS chunk with alpha image", 
      "validate: file changed interlace type"
    ], 
    "if (.* < .*)": 3, 
    "params": 3, 
    "if (.* == 0)": 3, 
    "return;": 1, 
    ".*\\-": 40, 
    "if (.*)": 24, 
    "return": 0, 
    ".*\\+": 7, 
    "= .*\\+": 5
  }, 
  "modifier_set_encoding": {
    "if (.* != 0)": 1, 
    "if (.* < \\d*)": 2, 
    "void": 1, 
    "if (.* < .*)": 2, 
    "label": "set", 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 12, 
    "if (.*)": 3, 
    "return": 0, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "perform_standard_test": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "label": "test", 
    "params": 1, 
    "return;": 1, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "digitize": {
    "double": 1, 
    "params": 3, 
    "int": 1, 
    ".*\\-": 1, 
    "return": 1
  }, 
  "gama_modify": {
    "params": 3, 
    "int": 1, 
    ".*\\-": 3, 
    "return": 1, 
    ".*\\+": 2
  }, 
  "image_transform_default_ini": {
    "void": 1, 
    "void*": 1, 
    "label": "transform", 
    "params": 2, 
    ".*\\+ 0x.*": 1, 
    "return;": 1, 
    "return": 0, 
    ".*\\+": 1
  }, 
  "transform_disable": {
    "fprintf(.*)": 1, 
    "void": 1, 
    "string": [
      "pngvalid: --transform-disable=%s: unknown transform\\n"
    ], 
    "break": 1, 
    "label": "transform", 
    "params": 1, 
    "if (.* == 0)": 1, 
    "return;": 1, 
    "while(.*)": 1, 
    "char*": 1, 
    "printf(.*)": 1, 
    ".*\\-": 4, 
    "if (.*)": 2, 
    "return": 0
  }, 
  "chrm_modify": {
    "params": 3, 
    ".*\\+ 0x.*": 7, 
    "int": 1, 
    ".*\\-": 10, 
    "return": 1, 
    ".*\\+": 9
  }, 
  "gamma_end": {
    "void": 1, 
    "params": 2, 
    "if (.* == 0)": 1, 
    "return;": 1, 
    ".*\\-": 3, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "store_current_palette": {
    "string": [
      "no current stream for palette"
    ], 
    "int*": 1, 
    "params": 2, 
    "for (.*)": 1, 
    ".*\\-": 4, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "outlog": {
    "if (.* < \\d*)": 2, 
    "if (.* != 0)": 1, 
    "if (.* < .*)": 2, 
    "double": 1, 
    "params": 3, 
    "int": 1, 
    "if (.* == 0)": 4, 
    ".*\\-": 8, 
    "if (.*)": 7, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "transform_row": {
    "void": 1, 
    "string": [
      "internal error"
    ], 
    "break": 8, 
    "byte": 1, 
    "label": "transform", 
    "uint": 1, 
    "params": 5, 
    ".*\\+ 0x.*": 3, 
    "int": 1, 
    "return;": 1, 
    "for (.*)": 9, 
    "return": 0, 
    "case": 9, 
    ".*\\+": 36, 
    "= .*\\+": 18, 
    "byte*": 1
  }, 
  "image_transform_png_set_rgb_to_gray_ini": {
    "if (.* != 0)": 2, 
    "if (.* < \\d*)": 2, 
    "void": 1, 
    "void*": 1, 
    "if (.* < .*)": 2, 
    "label": "transform", 
    "params": 2, 
    "if (.* == 0)": 4, 
    "return;": 1, 
    ".*\\-": 24, 
    "if (.*)": 11, 
    "return": 0, 
    ".*\\+": 6, 
    "= .*\\+": 5
  }, 
  "png_pass_row_shift": {
    "if (.* < \\d*)": 1, 
    "if (.* < .*)": 1, 
    "params": 1, 
    ".*\\+ 0x.*": 1, 
    "int": 1, 
    "return 0": 1, 
    "while(.*)": 1, 
    "for (.*)": 1, 
    ".*\\-": 6, 
    "if (.*)": 11, 
    "return": 1, 
    ".*\\+": 4, 
    "= .*\\+": 4
  }, 
  "fail": {
    "if (.* < \\d*)": 3, 
    "if (.* < .*)": 3, 
    "params": 1, 
    "int": 1, 
    "if (.* == 0)": 1, 
    ".*\\-": 4, 
    "if (.*)": 3, 
    "return": 1
  }, 
  "image_transform_png_set_strip_16_set": {
    "void": 1, 
    "void*": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "return": 0, 
    ".*\\+": 1
  }, 
  "image_transform_png_set_packswap_set": {
    "void": 1, 
    "void*": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "return": 0, 
    ".*\\+": 1
  }, 
  "png_pass_start_col": {
    "if (.* < \\d*)": 1, 
    "if (.* < .*)": 1, 
    "uint": 1, 
    "params": 1, 
    "int": 1, 
    "return 0": 1, 
    "while(.*)": 1, 
    "for (.*)": 1, 
    "if (.*)": 2, 
    "return": 1, 
    ".*\\+": 3, 
    "= .*\\+": 3
  }, 
  "make_errors": {
    "if (.* < \\d*)": 1, 
    "if (.* != 0)": 1, 
    "if (.* < .*)": 1, 
    "byte": 1, 
    "label": "error", 
    "params": 4, 
    "int": 1, 
    "return 0": 1, 
    "while(.*)": 1, 
    "for (.*)": 2, 
    ".*\\-": 1, 
    "if (.*)": 2, 
    "return": 1, 
    ".*\\+": 3, 
    "= .*\\+": 3
  }, 
  "random_u16": {
    "void": 1, 
    "uint": 1, 
    "params": 1, 
    "int": 1, 
    "return": 1, 
    ".*\\+": 1
  }, 
  "chrm_modification_init": {
    "void": 1, 
    "label": "init", 
    "params": 3, 
    "return;": 1, 
    ".*\\-": 15, 
    "return": 0
  }, 
  "output_quantization_factor": {
    "if (.* != 0)": 1, 
    "params": 3, 
    "int": 1, 
    "if (.* == 0)": 1, 
    ".*\\-": 1, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "print_one": {
    "void": 1, 
    "double": 1, 
    "params": 2, 
    "return;": 1, 
    "char*": 1, 
    ".*\\-": 1, 
    "printf(.*)": 1, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "store_init": {
    "void": 1, 
    "label": "init", 
    "params": 1, 
    "memset(.*)": 1, 
    "return;": 1, 
    ".*\\-": 35, 
    "return": 0
  }, 
  "random_byte": {
    "void": 1, 
    "byte": 1, 
    "params": 1, 
    "return": 1
  }, 
  "modification_reset": {
    "void": 1, 
    "label": "set", 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 4, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "init_gamma_errors": {
    "void": 1, 
    "label": "error", 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 7, 
    "return": 0
  }, 
  "outerr": {
    "if (.* != 0)": 1, 
    "double": 1, 
    "params": 3, 
    "int": 1, 
    "if (.* == 0)": 2, 
    ".*\\-": 4, 
    "if (.*)": 5, 
    "return": 1
  }, 
  "safecatn": {
    "params": 4, 
    "int": 1, 
    "char*": 1, 
    "printf(.*)": 1, 
    "return": 1
  }, 
  "standard_end": {
    "void": 1, 
    "params": 2, 
    "return;": 1, 
    ".*\\-": 1, 
    "return": 0
  }, 
  "modifier_read": {
    "void": 1, 
    "string": [
      "bad modifier_read call"
    ], 
    "byte": 1, 
    "label": "read", 
    "params": 3, 
    "return;": 1, 
    ".*\\-": 1, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "image_transform_png_set_packing_set": {
    "void": 1, 
    "void*": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "return": 0, 
    ".*\\+": 1
  }, 
  "safecat_color_encoding": {
    "if (.* != 0)": 3, 
    "double": 1, 
    "params": 5, 
    "char*": 1, 
    "if (.*)": 4, 
    "return": 1
  }, 
  "image_transform_set_end": {
    "void": 1, 
    "void*": 1, 
    "label": "transform", 
    "params": 4, 
    "return;": 1, 
    "return": 0
  }, 
  "store_read_set": {
    "void": 1, 
    "string": [
      ": file not found"
    ], 
    "break": 1, 
    "label": "read", 
    "uint": 1, 
    "params": 2, 
    ".*\\+ 0x.*": 1, 
    "int": 1, 
    "return;": 1, 
    "while(.*)": 1, 
    ".*\\-": 11, 
    "if (.*)": 2, 
    "return": 0, 
    ".*\\+": 1
  }, 
  "standard_rowsize": {
    "uint": 1, 
    "params": 2, 
    "int": 1, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "image_transform_png_set_strip_alpha_mod": {
    "void": 1, 
    "void*": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 2, 
    "return;": 1, 
    ".*\\-": 6, 
    "if (.*)": 2, 
    "return": 0, 
    ".*\\+": 2
  }, 
  "image_transform_png_set_bgr_add": {
    "void*": 1, 
    "byte": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "int": 1, 
    "if (.*)": 1, 
    "return": 1, 
    ".*\\+": 1
  }, 
  "sample_scale": {
    "double": 1, 
    "uint": 1, 
    "params": 2, 
    "int": 1, 
    "if (.*)": 2, 
    "return": 1
  }, 
  "image_transform_png_set_shift_set": {
    "void": 1, 
    "void*": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "return": 0, 
    ".*\\+": 6, 
    "= .*\\+": 5
  }, 
  "random_mod": {
    "uint": 1, 
    "params": 1, 
    "int": 1, 
    "return": 1
  }, 
  "image_transform_png_set_strip_16_add": {
    "void*": 1, 
    "byte": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "int": 1, 
    "return": 1, 
    ".*\\+": 1
  }, 
  "image_transform_png_set_packswap_add": {
    "void*": 1, 
    "byte": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "int": 1, 
    "return": 1, 
    ".*\\+": 1
  }, 
  "modifier_setbuffer": {
    "void": 1, 
    "label": "set", 
    "params": 1, 
    ".*\\+ 0x.*": 1, 
    "return;": 1, 
    ".*\\-": 5, 
    "return": 0, 
    ".*\\+": 2
  }, 
  "perform_gamma_composition_tests": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "label": "test", 
    "params": 3, 
    "int": 1, 
    "if (.* == 0)": 1, 
    "return;": 2, 
    "while(.*)": 2, 
    "for (.*)": 2, 
    ".*\\-": 6, 
    "if (.*)": 2, 
    "return": 0, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "safecatd": {
    "double": 1, 
    "params": 5, 
    "int": 1, 
    "char*": 1, 
    "printf(.*)": 1, 
    "return": 1
  }, 
  "image_transform_png_set_tRNS_to_alpha_mod": {
    "if (.* < \\d*)": 2, 
    "void": 1, 
    "void*": 1, 
    "if (.* < .*)": 2, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 2, 
    "if (.* == 0)": 1, 
    "return;": 1, 
    ".*\\-": 7, 
    "if (.*)": 4, 
    "return": 0, 
    ".*\\+": 2
  }, 
  "image_transform_png_set_background_mod": {
    "if (.* != 0)": 1, 
    "if (.* < \\d*)": 2, 
    "void": 1, 
    "void*": 1, 
    "if (.* < .*)": 2, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 2, 
    "return;": 1, 
    ".*\\-": 26, 
    "if (.*)": 5, 
    "return": 0, 
    ".*\\+": 8, 
    "= .*\\+": 6
  }, 
  "image_transform_png_set_scale_16_mod": {
    "if (.* < \\d*)": 4, 
    "void": 1, 
    "void*": 1, 
    "if (.* < .*)": 4, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 2, 
    "return;": 1, 
    ".*\\-": 11, 
    "if (.*)": 5, 
    "return": 0, 
    ".*\\+": 2
  }, 
  "image_transform_png_set_gray_to_rgb_set": {
    "void": 1, 
    "void*": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "return;": 1, 
    "return": 0, 
    ".*\\+": 1
  }, 
  "png_row_in_interlace_pass": {
    "if (.* < \\d*)": 1, 
    "if (.* < .*)": 1, 
    "break": 1, 
    "uint": 1, 
    "params": 2, 
    "int": 1, 
    "while(.*)": 1, 
    "return 0": 1, 
    "if (.*)": 2, 
    "return": 1, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "store_read_chunk": {
    "if (.* != 0)": 3, 
    "if (.* < \\d*)": 14, 
    "string": [
      "internal: IDAT size mismatch", 
      "internal: missing IDAT data", 
      "internal: missing IDAT"
    ], 
    "if (.* < .*)": 14, 
    "break": 1, 
    "byte": 1, 
    "label": "read", 
    "params": 4, 
    ".*\\+ 0x.*": 3, 
    "if (.* == 0)": 3, 
    "goto": 1, 
    "while(.*)": 4, 
    ".*\\-": 48, 
    "if (.*)": 28, 
    "return": 1, 
    ".*\\+": 20, 
    "= .*\\+": 17
  }, 
  "image_transform_png_set_palette_to_rgb_mod": {
    "void": 1, 
    "void*": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 2, 
    "return;": 1, 
    ".*\\-": 1, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\+": 2
  }, 
  "store_error": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "if (.* < .*)": 1, 
    "label": "error", 
    "params": 2, 
    "char": 1, 
    ".*\\-": 3, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "standard_width": {
    "uint": 1, 
    "params": 2, 
    "int": 1, 
    "if (.* == 0)": 1, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "png_pass_cols": {
    "if (.* < \\d*)": 2, 
    "if (.* < .*)": 2, 
    "break": 1, 
    "uint": 1, 
    "params": 2, 
    "int": 1, 
    "while(.*)": 1, 
    "for (.*)": 1, 
    "if (.*)": 3, 
    "return": 1, 
    ".*\\+": 5, 
    "= .*\\+": 5
  }, 
  "perform_gamma_scale16_tests": {
    "if (.* != 0)": 4, 
    "void": 1, 
    "label": "test", 
    "params": 1, 
    "return;": 5, 
    "while(.*)": 1, 
    "for (.*)": 1, 
    ".*\\-": 11, 
    "if (.*)": 6, 
    "return": 0, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "store_image_free": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "string": [
      "png_store image overwrite (1)", 
      "png_store image overwrite (2)"
    ], 
    "label": "free", 
    "params": 2, 
    "return;": 1, 
    ".*\\-": 6, 
    "if (.*)": 3, 
    "return": 0, 
    ".*\\+": 1
  }, 
  "npasses_from_interlace_type": {
    "string": [
      "invalid interlace type"
    ], 
    "params": 2, 
    "int": 1, 
    "if (.* == 0)": 1, 
    "if (.*)": 2, 
    "return": 1
  }, 
  "make_transform_images": {
    "void": 1, 
    "string": [
      "make standard images"
    ], 
    "label": "transform", 
    "params": 1, 
    "return;": 1, 
    "while(.*)": 1, 
    "for (.*)": 1, 
    ".*\\-": 1, 
    "return": 0, 
    ".*\\+": 3, 
    "= .*\\+": 2
  }, 
  "store_verbose": {
    "void": 1, 
    "params": 4, 
    "return;": 1, 
    "fputs(.*)": 2, 
    "char": 1, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "gamma_composition_test": {
    "if (.* != 0)": 1, 
    "if (.* < \\d*)": 2, 
    "void": 1, 
    "string": [
      " bckg(Screen):", 
      " bckg(File):", 
      " bckg(Unique):", 
      " alpha(Porter-Duff)", 
      " alpha(Optimized)", 
      " alpha(Broken)", 
      "", 
      "gamma "
    ], 
    "break": 7, 
    "if (.* < .*)": 2, 
    "byte": 1, 
    "double": 1, 
    "label": "test", 
    "params": 10, 
    "int": 1, 
    "if (.* == 0)": 3, 
    "return;": 1, 
    ".*\\-": 4, 
    "if (.*)": 5, 
    "return": 0, 
    ".*\\+": 2, 
    "= .*\\+": 2, 
    "case": 7
  }, 
  "store_read_buffer_next": {
    "string": [
      "buffer lost"
    ], 
    "break": 1, 
    "label": "read", 
    "params": 1, 
    "int": 1, 
    "while(.*)": 1, 
    ".*\\-": 7, 
    "if (.*)": 4, 
    "return": 1
  }, 
  "safecat": {
    "if (.* < \\d*)": 1, 
    "if (.* < .*)": 1, 
    "break": 1, 
    "params": 4, 
    "while(.*)": 1, 
    "char*": 1, 
    ".*\\-": 1, 
    "if (.*)": 3, 
    "return": 1, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "store_malloc": {
    "if (.* < \\d*)": 2, 
    "void": 1, 
    "string": [
      "out of memory"
    ], 
    "if (.* < .*)": 2, 
    "label": "malloc", 
    "params": 2, 
    ".*\\+ 0x.*": 10, 
    "malloc(.*)": 1, 
    ".*\\-": 8, 
    "if (.*)": 3, 
    "return": 0, 
    ".*\\+": 19, 
    "= .*\\+": 9
  }, 
  "image_transform_png_set_tRNS_to_alpha_set": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "void*": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "return;": 1, 
    ".*\\-": 2, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\+": 1
  }, 
  "gamma_image_validate": {
    "if (.* != 0)": 4, 
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "string": [
      "alpha", 
      "green", 
      "gamma: below threshold row %lu changed"
    ], 
    "if (.* < .*)": 1, 
    "label": "validate", 
    "params": 3, 
    ".*\\+ 0x.*": 1, 
    "if (.* == 0)": 5, 
    "return;": 1, 
    "while(.*)": 1, 
    "for (.*)": 1, 
    ".*\\-": 20, 
    "printf(.*)": 1, 
    "if (.*)": 31, 
    "return": 0, 
    ".*\\+": 3, 
    "= .*\\+": 2
  }, 
  "init_validate_info": {
    "if (.* != 0)": 1, 
    "if (.* < \\d*)": 2, 
    "void": 1, 
    "if (.* < .*)": 2, 
    "label": "init", 
    "params": 5, 
    "int": 1, 
    "if (.* == 0)": 2, 
    "return;": 1, 
    ".*\\-": 52, 
    "if (.*)": 7, 
    "return": 0, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "pixel_cmp": {
    "byte": 1, 
    "uint": 1, 
    "params": 3, 
    "int": 1, 
    "if (.* == 0)": 1, 
    "for (.*)": 1, 
    "if (.*)": 1, 
    "return": 1, 
    ".*\\+": 3, 
    "= .*\\+": 3
  }, 
  "image_transform_png_set_bgr_set": {
    "void": 1, 
    "void*": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "return;": 1, 
    "return": 0, 
    ".*\\+": 1
  }, 
  "png_col_from_pass_col": {
    "break": 7, 
    "uint": 1, 
    "params": 2, 
    "int": 1, 
    "return": 1, 
    "case": 7, 
    ".*\\+": 3, 
    "= .*\\+": 3
  }, 
  "perform_transform_test": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "string": [
      "transform:"
    ], 
    "break": 1, 
    "label": "test", 
    "params": 1, 
    ".*\\+ 0x.*": 5, 
    "if (.* == 0)": 2, 
    "return;": 2, 
    "while(.*)": 3, 
    "if (.*)": 3, 
    "return": 0, 
    ".*\\+": 7, 
    "= .*\\+": 2
  }, 
  "store_storefile": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "string": [
      "storefile: incomplete write", 
      "storefile: OOM", 
      "storefile: 0 sized IDAT"
    ], 
    "uint": 1, 
    "params": 2, 
    "int": 1, 
    "malloc(.*)": 1, 
    "if (.* == 0)": 2, 
    "return;": 1, 
    "memcpy(.*)": 1, 
    ".*\\-": 24, 
    "if (.*)": 3, 
    "return": 0
  }, 
  "transform_set_encoding": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "void*": 1, 
    "label": "transform", 
    "params": 1, 
    ".*\\+ 0x.*": 4, 
    "if (.* == 0)": 1, 
    "return;": 1, 
    ".*\\-": 2, 
    "if (.*)": 3, 
    "return": 0, 
    ".*\\+": 4, 
    "= .*\\+": 1
  }, 
  "perform_size_test": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "label": "test", 
    "params": 1, 
    "return;": 1, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "store_progressive_read": {
    "void": 1, 
    "string": [
      "store state damaged (progressive)"
    ], 
    "label": "read", 
    "params": 3, 
    "return;": 1, 
    "while(.*)": 1, 
    ".*\\-": 3, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "image_transform_png_set_swap_alpha_add": {
    "void*": 1, 
    "byte": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "int": 1, 
    "if (.*)": 1, 
    "return": 1, 
    ".*\\+": 1
  }, 
  "transform_height": {
    "break": 5, 
    "byte": 1, 
    "label": "transform", 
    "uint": 1, 
    "params": 3, 
    "int": 1, 
    "return": 1, 
    "case": 9
  }, 
  "image_transform_png_set_rgb_to_gray_set": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "void*": 1, 
    "string": [
      "internal pngvalid cHRM coefficient error", 
      "red(X)", 
      "red(Y)", 
      "red(Z)", 
      "green(X)", 
      "blue(X)", 
      "blue(Y)", 
      "blue(Z)", 
      " cHRM ", 
      " error: "
    ], 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 2, 
    "return;": 1, 
    "for (.*)": 1, 
    ".*\\-": 16, 
    "if (.*)": 13, 
    "return": 0, 
    ".*\\+": 2
  }, 
  "standard_image_validate": {
    "if (.* < \\d*)": 2, 
    "void": 1, 
    "if (.* < .*)": 2, 
    "label": "validate", 
    "params": 4, 
    "int": 1, 
    "return;": 1, 
    "for (.*)": 1, 
    ".*\\-": 6, 
    "if (.*)": 2, 
    "return": 0, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "perform_error_test": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "string": [
      "error test"
    ], 
    "label": "error", 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "pixel_copy": {
    "if (.* < \\d*)": 1, 
    "if (.* != 0)": 4, 
    "void": 1, 
    "if (.* < .*)": 1, 
    "byte": 1, 
    "label": "copy", 
    "uint": 1, 
    "params": 6, 
    "int": 1, 
    "if (.* == 0)": 2, 
    "return;": 1, 
    ".*\\-": 2, 
    "if (.*)": 7, 
    "return": 0, 
    ".*\\+": 2, 
    "= .*\\+": 1
  }, 
  "standard_info": {
    "void": 1, 
    "params": 2, 
    "return;": 1, 
    "return": 0
  }, 
  "image_transform_png_set_expand_16_set": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "void*": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "return;": 1, 
    ".*\\-": 2, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\+": 1
  }, 
  "perform_interlace_macro_validation": {
    "if (.* < \\d*)": 11, 
    "fprintf(.*)": 10, 
    "void": 1, 
    "string": [
      "PNG_PASS_START_ROW(%d) = %u != %x\\n", 
      "PNG_PASS_START_COL(%d) = %u != %x\\n", 
      "PNG_PASS_COL_SHIFT(%d) = %u != %x\\n", 
      "PNG_ROW_FROM_PASS_ROW(%u, %d) = %u != %x\\n", 
      "PNG_COL_FROM_PASS_COL(%u, %d) = %u != %x\\n", 
      "PNG_ROW_IN_INTERLACE_PASS(%u, %d) = %u != %x\\n", 
      "PNG_COL_IN_INTERLACE_PASS(%u, %d) = %u != %x\\n", 
      "PNG_PASS_ROWS(%u, %d) = %u != %x\\n", 
      "PNG_PASS_COLS(%u, %d) = %u != %x\\n", 
      "PNG_PASS_ROW_SHIFT(%d) = %u != %x\\n"
    ], 
    "if (.* < .*)": 11, 
    "break": 2, 
    "params": 1, 
    "return;": 1, 
    "while(.*)": 3, 
    ".*\\-": 20, 
    "printf(.*)": 10, 
    "if (.*)": 23, 
    "return": 0, 
    ".*\\+": 11, 
    "= .*\\+": 7
  }, 
  "store_read_imp": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "string": [
      "read beyond end of file", 
      "store state damaged"
    ], 
    "break": 1, 
    "if (.* < .*)": 1, 
    "byte": 1, 
    "label": "read", 
    "params": 3, 
    "if (.* == 0)": 2, 
    "return;": 1, 
    "while(.*)": 2, 
    "memcpy(.*)": 1, 
    ".*\\-": 8, 
    "if (.*)": 4, 
    "return": 0, 
    ".*\\+": 3, 
    "= .*\\+": 2
  }, 
  "image_pixel_init": {
    "if (.* != 0)": 2, 
    "if (.* < \\d*)": 4, 
    "void": 1, 
    "void*": 1, 
    "if (.* < .*)": 4, 
    "byte": 1, 
    "label": "init", 
    "uint": 1, 
    "params": 7, 
    ".*\\+ 0x.*": 23, 
    "int": 1, 
    "if (.* == 0)": 1, 
    "return;": 1, 
    ".*\\-": 13, 
    "if (.*)": 14, 
    "return": 0, 
    ".*\\+": 38, 
    "= .*\\+": 15
  }, 
  "sbit_modification_init": {
    "void": 1, 
    "byte": 1, 
    "label": "init", 
    "params": 3, 
    "return;": 1, 
    ".*\\-": 7, 
    "return": 0
  }, 
  "test_standard": {
    "if (.* < \\d*)": 1, 
    "if (.* != 0)": 1, 
    "if (.* < .*)": 1, 
    "byte": 1, 
    "label": "test", 
    "params": 4, 
    "int": 1, 
    "return 0": 1, 
    "while(.*)": 1, 
    "for (.*)": 1, 
    ".*\\-": 2, 
    "if (.*)": 2, 
    "return": 1, 
    ".*\\+": 3, 
    "= .*\\+": 2
  }, 
  "image_transform_png_set_packswap_mod": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "void*": 1, 
    "if (.* < .*)": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 2, 
    "return;": 1, 
    ".*\\-": 2, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\+": 2
  }, 
  "sBIT0_error_fn": {
    "void": 1, 
    "label": "error", 
    "params": 2, 
    "return;": 1, 
    "return": 0
  }, 
  "image_transform_png_set_tRNS_to_alpha_add": {
    "void*": 1, 
    "byte": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "int": 1, 
    "return": 1, 
    ".*\\+": 1
  }, 
  "modifier_init": {
    "void": 1, 
    "label": "init", 
    "params": 1, 
    "memset(.*)": 1, 
    "return;": 1, 
    ".*\\-": 60, 
    "return": 0, 
    ".*\\+": 1
  }, 
  "transform_range_check": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "string": [
      " output value error: rgba(", 
      " expected: "
    ], 
    "if (.* < .*)": 1, 
    "double": 1, 
    "byte": 1, 
    "label": "check", 
    "uint": 1, 
    "params": 13, 
    "int": 1, 
    "return;": 1, 
    "char*": 1, 
    ".*\\-": 1, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "image_transform_png_set_palette_to_rgb_set": {
    "void": 1, 
    "void*": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "return;": 1, 
    "return": 0, 
    ".*\\+": 1
  }, 
  "png_pass_start_row": {
    "if (.* < \\d*)": 1, 
    "if (.* < .*)": 1, 
    "uint": 1, 
    "params": 1, 
    "int": 1, 
    "return 0": 1, 
    "while(.*)": 1, 
    "for (.*)": 1, 
    "if (.*)": 2, 
    "return": 1, 
    ".*\\+": 3, 
    "= .*\\+": 3
  }, 
  "transform_display_init": {
    "void": 1, 
    "label": "init", 
    "uint": 1, 
    "params": 4, 
    "int": 1, 
    "memset(.*)": 1, 
    "return;": 1, 
    ".*\\-": 7, 
    "return": 0
  }, 
  "image_transform_png_set_strip_alpha_add": {
    "void*": 1, 
    "byte": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "int": 1, 
    "return": 1, 
    ".*\\+": 1
  }, 
  "image_transform_png_set_add_alpha_mod": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "void*": 1, 
    "if (.* < .*)": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 2, 
    "return;": 1, 
    ".*\\-": 8, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\+": 3
  }, 
  "srgb_modification_init": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "if (.* < .*)": 1, 
    "byte": 1, 
    "label": "init", 
    "params": 3, 
    "int": 1, 
    "return;": 1, 
    ".*\\-": 10, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "image_transform_png_set_scale_16_set": {
    "void": 1, 
    "void*": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "return": 0, 
    ".*\\+": 1
  }, 
  "store_image_check": {
    "if (.* != 0)": 3, 
    "void": 1, 
    "string": [
      "image overwrite", 
      "row end overwritten", 
      "row start overwritten"
    ], 
    "break": 1, 
    "label": "check", 
    "params": 3, 
    "int": 1, 
    "if (.* == 0)": 1, 
    "return;": 1, 
    "while(.*)": 1, 
    ".*\\-": 7, 
    "if (.*)": 4, 
    "return": 0, 
    ".*\\+": 3, 
    "= .*\\+": 3
  }, 
  "standard_check_text": {
    "if (.* != 0)": 4, 
    "void": 1, 
    "string": [
      "text: ", 
      "compression [%d->%d], ", 
      "keyword \\", 
      "null, ", 
      "text lost, ", 
      "text length changed[%lu->%lu], ", 
      "text becomes \\", 
      "iTXt length set, ", 
      "iTXt language \\", 
      "iTXt keyword \\"
    ], 
    "label": "check", 
    "params": 4, 
    "return;": 1, 
    "char": 1, 
    ".*\\-": 16, 
    "printf(.*)": 2, 
    "if (.*)": 10, 
    "return": 0
  }, 
  "transform_info": {
    "void": 1, 
    "label": "transform", 
    "params": 2, 
    "return;": 1, 
    "return": 0
  }, 
  "image_transform_png_set_palette_to_rgb_add": {
    "void*": 1, 
    "byte": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "int": 1, 
    "return": 1, 
    ".*\\+": 1
  }, 
  "store_free": {
    "void": 1, 
    "string": [
      "bad pointer to free"
    ], 
    "break": 1, 
    "label": "free", 
    "params": 2, 
    "return;": 2, 
    "while(.*)": 1, 
    ".*\\-": 7, 
    "if (.*)": 3, 
    "return": 0, 
    ".*\\+": 4, 
    "= .*\\+": 2
  }, 
  "next_format": {
    "if (.* < \\d*)": 5, 
    "if (.* != 0)": 1, 
    "if (.* < .*)": 5, 
    "break": 4, 
    "byte": 1, 
    "int*": 1, 
    "params": 5, 
    "int": 1, 
    "if (.* == 0)": 1, 
    "uint*": 1, 
    "if (.*)": 8, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1, 
    "case": 4
  }, 
  "modifier_crc": {
    "void": 1, 
    "byte": 1, 
    "params": 1, 
    "return;": 1, 
    "return": 0, 
    ".*\\+": 3, 
    "= .*\\+": 2
  }, 
  "gamma_info_imp": {
    "if (.* != 0)": 3, 
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "if (.* < .*)": 1, 
    "params": 3, 
    "return;": 1, 
    "while(.*)": 1, 
    "for (.*)": 1, 
    ".*\\-": 14, 
    "if (.*)": 5, 
    "return": 0, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "image_transform_png_set_filler_set": {
    "void": 1, 
    "void*": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "return": 0, 
    ".*\\+": 1
  }, 
  "image_transform_png_set_swap_alpha_set": {
    "void": 1, 
    "void*": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "return;": 1, 
    "return": 0, 
    ".*\\+": 1
  }, 
  "sBIT_error_fn": {
    "void": 1, 
    "label": "error", 
    "params": 2, 
    "return;": 1, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "transform_enable": {
    "fprintf(.*)": 1, 
    "void": 1, 
    "string": [
      "pngvalid: --transform-enable=%s: unknown transform\\n"
    ], 
    "label": "transform", 
    "params": 1, 
    "if (.* == 0)": 2, 
    "return;": 1, 
    "for (.*)": 1, 
    "char*": 1, 
    ".*\\-": 5, 
    "printf(.*)": 1, 
    "if (.*)": 3, 
    "return": 0
  }, 
  "image_transform_png_set_rgb_to_gray_add": {
    "void*": 1, 
    "byte": 1, 
    "label": "transform", 
    "params": 4, 
    ".*\\+ 0x.*": 1, 
    "int": 1, 
    "return": 1, 
    ".*\\+": 1
  }, 
  "store_warning": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "if (.* < .*)": 1, 
    "params": 2, 
    "return;": 1, 
    "char": 1, 
    ".*\\-": 2, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "modifier_progressive_read": {
    "if (.* < \\d*)": 2, 
    "void": 1, 
    "string": [
      "store state damaged (progressive)", 
      "progressive read implementation error"
    ], 
    "if (.* < .*)": 2, 
    "label": "read", 
    "params": 3, 
    "if (.* == 0)": 1, 
    "return;": 1, 
    "while(.*)": 1, 
    ".*\\-": 8, 
    "if (.*)": 5, 
    "return": 0, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "bit_size": {
    "string": [
      "invalid color type"
    ], 
    "break": 4, 
    "byte": 1, 
    "uint": 1, 
    "params": 3, 
    "int": 1, 
    "return": 1, 
    "case": 5
  }, 
  "make_size_image": {
    "if (.* < \\d*)": 3, 
    "if (.* != 0)": 1, 
    "void": 1, 
    "string": [
      "size row size incorrect", 
      "write: png_set_interlace_handling failed"
    ], 
    "if (.* < .*)": 3, 
    "byte": 1, 
    "setjmp(.*)": 1, 
    "label": "make", 
    "uint": 1, 
    "params": 7, 
    ".*\\+ 0x.*": 1, 
    "int": 1, 
    "if (.* == 0)": 4, 
    "memset(.*)": 2, 
    "return;": 1, 
    "goto": 1, 
    "while(.*)": 1, 
    "for (.*)": 3, 
    ".*\\-": 17, 
    "if (.*)": 11, 
    "return": 0, 
    ".*\\+": 11, 
    "= .*\\+": 8
  }, 
  "random_32": {
    "void": 1, 
    "uint": 1, 
    "params": 1, 
    "int": 1, 
    "while(.*)": 1, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "srgb_modify": {
    "params": 3, 
    "int": 1, 
    ".*\\-": 3, 
    "return": 1, 
    ".*\\+": 1
  }, 
  "standard_name": {
    "if (.* != 0)": 3, 
    "string": [
      "+tRNS", 
      " interlaced", 
      "(pngvalid)"
    ], 
    "byte": 1, 
    "uint": 1, 
    "params": 10, 
    "int": 1, 
    "if (.* == 0)": 1, 
    "char*": 1, 
    "if (.*)": 5, 
    "return": 1, 
    ".*\\+": 1, 
    "= .*\\+": 1
  }, 
  "gamma_threshold_test": {
    "void": 1, 
    "string": [
      "threshold "
    ], 
    "byte": 1, 
    "double": 1, 
    "label": "test", 
    "params": 6, 
    "int": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "return": 0
  }
}