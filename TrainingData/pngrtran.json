{
  "png_gamma_threshold": {
    "if (.* != 0)": 1, 
    "params": 2, 
    "int": 1, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "png_do_expand_16": {
    "void": 1, 
    "byte": 1, 
    "params": 2, 
    "return;": 1, 
    "for (.*)": 1, 
    ".*\\-": 11, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\+": 4, 
    "= .*\\+": 4
  }, 
  "png_do_encode_alpha": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "string": [
      "png_do_encode_alpha: unexpected call"
    ], 
    "byte": 1, 
    "params": 3, 
    "if (.* == 0)": 2, 
    "return;": 3, 
    "for (.*)": 2, 
    ".*\\-": 13, 
    "if (.*)": 7, 
    "return": 0, 
    ".*\\+": 6, 
    "= .*\\+": 5
  }, 
  "translate_gamma_flags": {
    "params": 3, 
    "int": 1, 
    "if (.* == 0)": 2, 
    ".*\\-": 3, 
    "if (.*)": 4, 
    "return": 1
  }, 
  "png_set_expand_16": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "label": "set", 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "png_do_expand_palette": {
    "if (.* < \\d*)": 3, 
    "void": 1, 
    "if (.* < .*)": 3, 
    "byte": 1, 
    "params": 6, 
    "int": 1, 
    "if (.* == 0)": 1, 
    "return;": 1, 
    "for (.*)": 5, 
    ".*\\-": 40, 
    "if (.*)": 12, 
    "return": 0, 
    ".*\\+": 28, 
    "= .*\\+": 28
  }, 
  "png_set_strip_alpha": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "label": "set", 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "png_do_gray_to_rgb": {
    "if (.* < \\d*)": 2, 
    "void": 1, 
    "if (.* < .*)": 2, 
    "byte": 1, 
    "params": 2, 
    "if (.* == 0)": 1, 
    "return;": 1, 
    "for (.*)": 4, 
    ".*\\-": 47, 
    "if (.*)": 6, 
    "return": 0, 
    ".*\\+": 30, 
    "= .*\\+": 30
  }, 
  "png_set_expand_gray_1_2_4_to_8": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "label": "set", 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "png_do_rgb_to_gray": {
    "if (.* != 0)": 1, 
    "if (.* < \\d*)": 1, 
    "if (.* < .*)": 1, 
    "byte": 1, 
    "params": 3, 
    ".*\\+ 0x.*": 3, 
    "int": 1, 
    "if (.* == 0)": 1, 
    "for (.*)": 4, 
    ".*\\-": 33, 
    "if (.*)": 15, 
    "return": 1, 
    ".*\\+": 30, 
    "= .*\\+": 24
  }, 
  "png_rtran_ok": {
    "if (.* != 0)": 1, 
    "string": [
      "invalid before the PNG header has been read", 
      "invalid after png_start_read_image or png_read_update_info"
    ], 
    "params": 2, 
    "int": 1, 
    "if (.* == 0)": 2, 
    "return 0": 1, 
    ".*\\-": 3, 
    "if (.*)": 3, 
    "return": 1
  }, 
  "convert_gamma_value": {
    "if (.* < \\d*)": 1, 
    "string": [
      "gamma value"
    ], 
    "if (.* < .*)": 1, 
    "double": 1, 
    "label": "convert", 
    "params": 2, 
    "int": 1, 
    "if (.*)": 1, 
    "return": 1
  }, 
  "png_do_chop": {
    "void": 1, 
    "byte": 1, 
    "params": 2, 
    "return;": 1, 
    "for (.*)": 1, 
    ".*\\-": 5, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "png_set_quantize": {
    "if (.* != 0)": 5, 
    "if (.* < \\d*)": 9, 
    "void": 1, 
    "if (.* < .*)": 9, 
    "break": 5, 
    "label": "set", 
    "uint": 1, 
    "params": 6, 
    ".*\\+ 0x.*": 1, 
    "int": 1, 
    "malloc(.*)": 6, 
    "if (.* == 0)": 5, 
    "memset(.*)": 1, 
    "return;": 1, 
    "while(.*)": 5, 
    "for (.*)": 18, 
    ".*\\-": 83, 
    "if (.*)": 32, 
    "return": 0, 
    ".*\\+": 53, 
    "= .*\\+": 41
  }, 
  "png_set_strip_16": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "label": "set", 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "png_set_background_fixed": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "string": [
      "Application must supply a known background gamma"
    ], 
    "label": "set", 
    "params": 5, 
    "int": 1, 
    "if (.* == 0)": 2, 
    "return;": 1, 
    ".*\\-": 12, 
    "if (.*)": 3, 
    "return": 0
  }, 
  "png_init_read_transformations": {
    "if (.* != 0)": 14, 
    "if (.* < \\d*)": 4, 
    "void": 1, 
    "string": [
      "libpng does not support gamma+background+rgb_to_gray", 
      "invalid background gamma type"
    ], 
    "if (.* < .*)": 4, 
    "label": "read", 
    "params": 1, 
    ".*\\+ 0x.*": 10, 
    "if (.* == 0)": 13, 
    "return;": 1, 
    "for (.*)": 6, 
    ".*\\-": 187, 
    "if (.*)": 41, 
    "return": 0, 
    ".*\\+": 31, 
    "= .*\\+": 14
  }, 
  "png_do_expand": {
    "if (.* < \\d*)": 3, 
    "void": 1, 
    "if (.* < .*)": 3, 
    "break": 1, 
    "byte": 1, 
    "params": 3, 
    "if (.* == 0)": 1, 
    "return;": 1, 
    "while(.*)": 1, 
    "for (.*)": 6, 
    ".*\\-": 86, 
    "if (.*)": 23, 
    "return": 0, 
    ".*\\+": 46, 
    "= .*\\+": 46
  }, 
  "png_set_rgb_to_gray": {
    "void": 1, 
    "string": [
      "rgb to gray red coefficient", 
      "rgb to gray green coefficient"
    ], 
    "double": 1, 
    "label": "set", 
    "params": 4, 
    "int": 1, 
    "return;": 1, 
    "return": 0
  }, 
  "png_set_alpha_mode_fixed": {
    "if (.* != 0)": 2, 
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "string": [
      "output gamma out of expected range", 
      "invalid alpha mode", 
      "conflicting calls to set alpha mode and background"
    ], 
    "if (.* < .*)": 1, 
    "break": 4, 
    "label": "set", 
    "params": 3, 
    "int": 1, 
    "if (.* == 0)": 1, 
    "memset(.*)": 1, 
    "return;": 1, 
    ".*\\-": 18, 
    "if (.*)": 5, 
    "return": 0, 
    "case": 4
  }, 
  "png_set_read_user_transform_fn": {
    "void": 1, 
    "label": "read", 
    "params": 2, 
    "return;": 1, 
    ".*\\-": 2, 
    "return": 0
  }, 
  "png_do_read_filler": {
    "void": 1, 
    "byte": 1, 
    "label": "read", 
    "uint": 1, 
    "params": 4, 
    "int": 1, 
    "if (.* == 0)": 4, 
    "return;": 1, 
    "for (.*)": 8, 
    ".*\\-": 89, 
    "if (.*)": 10, 
    "return": 0, 
    ".*\\+": 40, 
    "= .*\\+": 40
  }, 
  "png_do_gamma": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "if (.* < .*)": 1, 
    "break": 3, 
    "byte": 1, 
    "params": 3, 
    "return;": 1, 
    "for (.*)": 10, 
    ".*\\-": 14, 
    "if (.*)": 8, 
    "return": 0, 
    "case": 4, 
    ".*\\+": 20, 
    "= .*\\+": 20
  }, 
  "png_set_crc_action": {
    "void": 1, 
    "string": [
      "Can\\'t discard critical data on CRC error"
    ], 
    "break": 7, 
    "label": "set", 
    "params": 3, 
    "int": 1, 
    "return;": 1, 
    ".*\\-": 12, 
    "if (.*)": 1, 
    "return": 0, 
    "case": 10
  }, 
  "png_set_tRNS_to_alpha": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "label": "set", 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "png_do_quantize": {
    "if (.* < \\d*)": 2, 
    "void": 1, 
    "if (.* < .*)": 2, 
    "byte": 1, 
    "params": 4, 
    "return;": 1, 
    "for (.*)": 3, 
    ".*\\-": 19, 
    "if (.*)": 6, 
    "return": 0, 
    ".*\\+": 14, 
    "= .*\\+": 14
  }, 
  "png_set_expand": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "label": "set", 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "png_do_unshift": {
    "if (.* != 0)": 1, 
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "if (.* < .*)": 1, 
    "break": 3, 
    "byte": 1, 
    "params": 3, 
    "if (.* == 0)": 1, 
    "return;": 1, 
    "while(.*)": 4, 
    "for (.*)": 1, 
    ".*\\-": 12, 
    "if (.*)": 7, 
    "return": 0, 
    ".*\\+": 14, 
    "= .*\\+": 10, 
    "case": 4
  }, 
  "png_do_read_swap_alpha": {
    "void": 1, 
    "byte": 1, 
    "label": "read", 
    "params": 2, 
    "return;": 1, 
    "for (.*)": 4, 
    ".*\\-": 45, 
    "if (.*)": 4, 
    "return": 0, 
    ".*\\+": 20, 
    "= .*\\+": 20
  }, 
  "png_set_palette_to_rgb": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "label": "set", 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "png_read_transform_info": {
    "if (.* != 0)": 14, 
    "if (.* < \\d*)": 3, 
    "void": 1, 
    "string": [
      "Palette is NULL in indexed image"
    ], 
    "if (.* < .*)": 3, 
    "label": "read", 
    "params": 2, 
    "if (.* == 0)": 2, 
    "return;": 1, 
    ".*\\-": 63, 
    "if (.*)": 24, 
    "return": 0, 
    ".*\\+": 3, 
    "= .*\\+": 3
  }, 
  "png_do_scale_16_to_8": {
    "void": 1, 
    "byte": 1, 
    "params": 2, 
    ".*\\+ 0x.*": 1, 
    "return;": 1, 
    "while(.*)": 1, 
    ".*\\-": 6, 
    "if (.*)": 1, 
    "return": 0, 
    ".*\\+": 5, 
    "= .*\\+": 4
  }, 
  "png_init_palette_transformations": {
    "if (.* != 0)": 4, 
    "void": 1, 
    "break": 1, 
    "label": "init", 
    "params": 1, 
    "if (.* == 0)": 1, 
    "return;": 1, 
    "for (.*)": 2, 
    ".*\\-": 14, 
    "if (.*)": 7, 
    "return": 0, 
    ".*\\+": 2, 
    "= .*\\+": 2
  }, 
  "png_set_scale_16": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "label": "set", 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "if (.*)": 1, 
    "return": 0
  }, 
  "png_set_background": {
    "void": 1, 
    "string": [
      "png_set_background"
    ], 
    "double": 1, 
    "label": "set", 
    "params": 5, 
    "int": 1, 
    "return;": 1, 
    "return": 0
  }, 
  "png_set_rgb_to_gray_fixed": {
    "if (.* != 0)": 1, 
    "if (.* < \\d*)": 2, 
    "void": 1, 
    "string": [
      "invalid error action to rgb_to_gray", 
      "ignoring out of range rgb_to_gray coefficients"
    ], 
    "if (.* < .*)": 2, 
    "label": "set", 
    "params": 4, 
    "int": 1, 
    "if (.* == 0)": 1, 
    "return;": 1, 
    ".*\\-": 12, 
    "if (.*)": 8, 
    "return": 0, 
    ".*\\+": 1
  }, 
  "png_do_compose": {
    "if (.* != 0)": 4, 
    "if (.* < \\d*)": 8, 
    "void": 1, 
    "break": 7, 
    "if (.* < .*)": 8, 
    "byte": 1, 
    "params": 3, 
    ".*\\+ 0x.*": 16, 
    "if (.* == 0)": 17, 
    "return;": 1, 
    "for (.*)": 21, 
    ".*\\-": 124, 
    "if (.*)": 55, 
    "return": 0, 
    "case": 9, 
    ".*\\+": 101, 
    "= .*\\+": 78
  }, 
  "png_do_unpack": {
    "if (.* < \\d*)": 1, 
    "void": 1, 
    "if (.* < .*)": 1, 
    "byte": 1, 
    "params": 2, 
    "return;": 1, 
    "for (.*)": 3, 
    ".*\\-": 18, 
    "if (.*)": 7, 
    "return": 0, 
    ".*\\+": 17, 
    "= .*\\+": 17
  }, 
  "png_set_alpha_mode": {
    "void": 1, 
    "double": 1, 
    "label": "set", 
    "params": 3, 
    "int": 1, 
    "return;": 1, 
    "return": 0
  }, 
  "png_init_rgb_transformations": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "break": 2, 
    "label": "init", 
    "params": 1, 
    "if (.* == 0)": 3, 
    "return;": 1, 
    ".*\\-": 17, 
    "if (.*)": 4, 
    "return": 0, 
    "case": 3
  }, 
  "png_set_gamma_fixed": {
    "if (.* != 0)": 1, 
    "if (.* < \\d*)": 2, 
    "void": 1, 
    "string": [
      "invalid file gamma in png_set_gamma", 
      "invalid screen gamma in png_set_gamma"
    ], 
    "if (.* < .*)": 2, 
    "label": "set", 
    "params": 3, 
    "int": 1, 
    "return;": 1, 
    ".*\\-": 3, 
    "if (.*)": 3, 
    "return": 0
  }, 
  "png_do_read_transformations": {
    "if (.* != 0)": 24, 
    "if (.* < \\d*)": 2, 
    "void": 1, 
    "string": [
      "NULL row buffer", 
      "Uninitialized row", 
      "png_do_rgb_to_gray found nongray pixel", 
      "png_do_rgb_to_gray found nongray pixel", 
      "png_do_quantize returned rowbytes=0"
    ], 
    "if (.* < .*)": 2, 
    "label": "read", 
    "params": 2, 
    "if (.* == 0)": 7, 
    "return;": 1, 
    ".*\\-": 73, 
    "if (.*)": 34, 
    "return": 0, 
    ".*\\+": 26, 
    "= .*\\+": 2
  }, 
  "png_do_read_invert_alpha": {
    "void": 1, 
    "byte": 1, 
    "label": "read", 
    "params": 2, 
    "return;": 1, 
    "for (.*)": 4, 
    ".*\\-": 22, 
    "if (.*)": 4, 
    "return": 0, 
    ".*\\+": 14, 
    "= .*\\+": 14
  }, 
  "png_set_gamma": {
    "void": 1, 
    "double": 1, 
    "label": "set", 
    "params": 3, 
    "return;": 1, 
    "return": 0
  }, 
  "png_set_gray_to_rgb": {
    "if (.* != 0)": 1, 
    "void": 1, 
    "label": "set", 
    "params": 1, 
    "return;": 1, 
    ".*\\-": 1, 
    "if (.*)": 1, 
    "return": 0
  }
}